covariate_matrix = covariate_matrix)
library(sceptre)
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
res <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs,
gene_precomp_dir = gene_precomp_dir,
gRNA_precomp_dir = gRNA_precomp_dir,
results_dir = results_dir,
cell_gene_expression_matrix = cell_gene_expression_matrix,
ordered_gene_ids = ordered_gene_ids,
gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp,
covariate_matrix = covariate_matrix,
cell_subset = cell_subset,
pod_sizes = c(gene = 3, gRNA = 3, pair = 3),
seed = 1234,
gene_sizes = select_sizes,
log_dir = log_dir,
multi_processor = TRUE)
write.fst(res, paste0(offsite_dir, "/results/comparison_to_gene/sceptre_package_known_sizes.fst"))
res
###################################################
# Investigate gene ENSG00000102981 and scrambled_21
###################################################
gene_id <- "ENSG00000102981"; gRNA_id <- "scrambled_21"
gene_id
gRNA_id
gRNA_gene_pairs
gene_id_int <- which(ordered_gene_ids == gene_id)
v=gene_id_int
gene_id_int
expressions <- cell_gene_expression_matrix[, gene_id_int]
expressions
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = "scrambled_21") %>% pull() %>% as.integer()
gRNA_indic
# subset!
expressions <- expressions[cell_subset]; gRNA_indic <- expressions[gRNA_indic]; covariate_matrix <- covariate_matrix[cell_subset, ]
length(expressions)
select_sizes[["ENSG00000102981"]]
gene_precomp <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[["ENSG00000102981"]])
gene_precomp
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
length(gRNA_indic)
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gene_id <- "ENSG00000102981"; gRNA_id <- "scrambled_21"
gene_id_int <- which(ordered_gene_ids == gene_id)
expressions <- cell_gene_expression_matrix[, gene_id_int]
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = "scrambled_21") %>% pull() %>% as.integer()
# subset!
expressions <- expressions[cell_subset]; gRNA_indic <- gRNA_indic[cell_subset]; covariate_matrix <- covariate_matrix[cell_subset, ]
expressions
gene_precomp <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[["ENSG00000102981"]])
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp, gene_precomp_size = gene_precomp$gene_precomp_size, gene_precomp_offsets = gene_precomp$gene_precomp_offsets, B = B, seed = seed)
run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp, gene_precomp_size = gene_precomp$gene_precomp_size, gene_precomp_offsets = gene_precomp$gene_precomp_offsets, B = 500, seed = 1234)
me_known
#################
# Compare to Gene
#################
me_known <- read.fst(paste0(offsite_dir, "/results/comparison_to_gene/sceptre_package_known_sizes.fst"))
me_known
gene
me_unknown <- read.fst(paste0(offsite_dir, "/results/comparison_to_gene/sceptre_package_unknown_sizes.fst"))
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
me_known
me_unknown
l <- list(me_known, me_unknown, gene_mod)
me_known
p <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp, gene_precomp_size = gene_precomp$gene_precomp_size, gene_precomp_offsets = gene_precomp$gene_precomp_offsets, B = 500, seed = 1234)
p
gene
gene_mod
comparision_df
l <- list(me_known, me_unknown, gene_mod)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
}) %>% rename(Tim_known_size = p_value.x, Tim_est_size = p_value.y, Gene = p_value)
comparision_df
p
res <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs,
gene_precomp_dir = gene_precomp_dir,
gRNA_precomp_dir = gRNA_precomp_dir,
results_dir = results_dir,
cell_gene_expression_matrix = cell_gene_expression_matrix,
ordered_gene_ids = ordered_gene_ids,
gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp,
covariate_matrix = covariate_matrix,
cell_subset = cell_subset,
pod_sizes = c(gene = 3, gRNA = 3, pair = 3),
seed = 1234,
gene_sizes = select_sizes,
log_dir = log_dir,
multi_processor = FALSE)
gRNA_gene_pairs
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gene_id <- "ENSG00000102981"; gRNA_id <- "scrambled_21"
gene_id_int <- which(ordered_gene_ids == gene_id)
expressions <- cell_gene_expression_matrix[, gene_id_int]
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = "scrambled_21") %>% pull() %>% as.integer()
# subset!
expressions <- expressions[cell_subset]; gRNA_indic <- gRNA_indic[cell_subset]; covariate_matrix <- covariate_matrix[cell_subset, ]
gene_precomp <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[["ENSG00000102981"]])
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
#################
# Compare to Gene
#################
me_known <- read.fst(paste0(offsite_dir, "/results/comparison_to_gene/sceptre_package_known_sizes.fst"))
res
me_known
read.fst(paste0( gene_precomp_dir, "/gene_dictionary.fst" ))
read.fst(paste0(gene_precomp_dir, "/gene_offsets.fst"))
read.fst(paste0(gene_precomp_dir, "/gene_offsets_2.fst"))
gene_offset_scale <- read.fst(paste0(gene_precomp_dir, "/gene_offsets_2.fst"), gene_id)
head(gene_offset_scale)
gene_offset_scale <- read.fst(paste0(gene_precomp_dir, "/gene_offsets_2.fst"), gene_id) %>% pull()
gene_offset_scale
head(gene_offset_scale)
head(gene_precomp$gene_precomp_offsets)
readRDS(paste0(gene_precomp_dir, "/gene_sizes_2.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_2.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_2.rds"))[[gene_id]]
gene_precomp$gene_precomp_offsets
gene_precomp$gene_precomp_size
gene_offset_scale
gene_size_scale
gene_size_scale <- readRDS(paste0(gene_precomp_dir, "/gene_size_2.rds"))[[gene_id]]
gene_size_scale <- readRDS(paste0(gene_precomp_dir, "/gene_size_2.rds"))[[gene_id]]
head(gene_offset_scale)
gene_size_scale
gene_precomp$gene_precomp_size
select_sizes[["ENSG00000102981"]]
readRDS(paste0(gene_precomp_dir, "/gene_size_2.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_1.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_1.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_1.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_2.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_2.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_1.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_2.rds"))
readRDS(paste0(gene_precomp_dir, "/gene_size_1.rds"))
select_sizes
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gene_id <- "ENSG00000102981"; gRNA_id <- "scrambled_21"
gene_id_int <- which(ordered_gene_ids == gene_id)
expressions <- cell_gene_expression_matrix[, gene_id_int]
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = "scrambled_21") %>% pull() %>% as.integer()
# subset!
expressions <- expressions[cell_subset]; gRNA_indic <- gRNA_indic[cell_subset]; covariate_matrix <- covariate_matrix[cell_subset, ]
gene_precomp <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[["ENSG00000102981"]])
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
read.fst(paste0(gRNA_precomp_dir, "/gRNA_precomp_2.fst"), gene_id)
read.fst(paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst"), gene_id)
gene_id
read.fst(paste0(gRNA_precomp_dir, "/gRNA_precomp_2.fst"), gene_id)
gene_id
gene_id
x <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_precomp_2.fst"))
head(x)
gRNA_precomp_scale <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_precomp_2.fst"), gRNA_id)
head(gRNA_precomp_scale)
gRNA_precomp_scale <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_precomp_2.fst"), gRNA_id)
gRNA_precomp_scale <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_precomp_2.fst"), gRNA_id) %>% pull()
head(gRNA_precomp_scale)
head(gRNA_precomp)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gene_dict
gRNA_dict <- read.fst(paste0(gene_precomp_dir, "/gRNA_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
gRNA_dict
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
pod_sizes = c(gene = 3, gRNA = 3, pair = 3
pod_sizes = c(gene = 3, gRNA = 3, pair = 3)
pod_sizes = c(gene = 3, gRNA = 3, pair = 3)
seed = 1234
multi_processor = FALSE
gRNA_gene_pairs
gene_precomp_dir
pod_id
pod_id <- 2
pod_id
pod_id
gRNA_precomp_dir
gRNA_indicator_matrix_fp
covariate_matrix
cell_subset
log_dir
if (!is.null(log_dir)) activate_sink(paste0(log_dir, "/gRNA_precomp_", pod_id, ".Rout"))
# subset covariate matrix according to cell subset
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
# determine the gRNAs on which to run the precomputation
gRNA_dictionary <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gRNA_dictionary
gRNA_ids <- gRNA_dictionary %>% pull(id) %>% as.character()
gRNA_ids
out <- sapply(gRNA_ids, function(gRNA_id) {
cat(paste0("Running precomputation for gRNA ", gRNA_id, ".\n"))
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull() %>% as.integer()
if (!is.null(cell_subset)) gRNA_indicators <- gRNA_indicators[cell_subset]
run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
}) %>% as_tibble()
out
gRNA_dictionary %>% pull(precomp_file)
# save the result
precomp_matrix_fp <- (gRNA_dictionary %>% pull(precomp_file))[1] %>% as.character
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
gRNA_precomp_dir
# 0. Clear out contents of directories
c(gRNA_precomp_dir, gene_precomp_dir, results_dir)
for (direct in c(gRNA_precomp_dir, gene_precomp_dir, results_dir)) {
print(direct)
}
direct <- gRNA_precomp_dir
direct
list.files(direct)
list.files(direct, full.names = TRUE)
files <- list.files(direct, full.names = TRUE)
file.remove(files)
list.files(direct, full.names = TRUE)
for (direct in c(gRNA_precomp_dir, gene_precomp_dir, results_dir)) {
files <- list.files(direct, full.names = TRUE)
x <- file.remove(files)
}
x
library(sceptre)
detach(future)
detach("future")
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
# gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(1:nrow(gRNA_gene_pairs), 20, FALSE))
dicts <- create_and_store_dictionaries(gRNA_gene_pairs = gRNA_gene_pairs, gene_precomp_dir = gene_precomp_dir, gRNA_precomp_dir = gRNA_precomp_dir, results_dir = results_dir, pod_sizes = c(gene = 10, gRNA = 10, pair = 10))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
# gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(1:nrow(gRNA_gene_pairs), 20, FALSE))
dicts <- create_and_store_dictionaries(gRNA_gene_pairs = gRNA_gene_pairs, gene_precomp_dir = gene_precomp_dir, gRNA_precomp_dir = gRNA_precomp_dir, results_dir = results_dir, pod_sizes = c(gene = 10, gRNA = 10, pair = 10))
dicts
# gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(1:nrow(gRNA_gene_pairs), 20, FALSE))
dicts <- create_and_store_dictionaries(gRNA_gene_pairs = gRNA_gene_pairs, gene_precomp_dir = gene_precomp_dir, gRNA_precomp_dir = gRNA_precomp_dir, results_dir = results_dir, pod_sizes = c(gene = 3, gRNA = 3, pair = 3))
dicts
# Print to the standard output n_pods for genes, gRNAs, and pairs (in that order) so that the bash file knows how many pod_ids to iterate over.
paste(dicts$n_pods[["gene"]], dicts$n_pods[["gRNA"]], dicts$n_pods[["pairs"]]) %>% cat
as.integer(args[3])
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
head(covariate_matrix)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
results_dir
c(gRNA_precomp_dir, gene_precomp_dir, results_dir)
for (direct in c(gRNA_precomp_dir, gene_precomp_dir)) {
x <- files.remove(list.files(direct, full.names = TRUE))
}
for (direct in c(gRNA_precomp_dir, gene_precomp_dir)) {
x <- file.remove(list.files(direct, full.names = TRUE))
}
results_dir
file_names <- list.files(results_dir)
file_names
grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE)
to_load <- c(grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE), "results_dictionary.fst")
to_load
file_names <- list.files(results_dir)
to_delete <- c(grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE), "results_dictionary.fst")
to_delete
file
file <- to_delete[1]
full_file <- paste0(results_dir, "/", file)
full_file
file_names <- list.files(results_dir)
to_delete <- c(grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE), "results_dictionary.fst")
for (file in to_delete) {
full_file <- paste0(results_dir, "/", file)
if (file.exists(full_file)) file.remove(full_file)
}
# run gene precomputation at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
select_sizes
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/comparison_to_gene/sceptre_package_known_sizes.fst"))
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
gene_mod
"/Users/timbarry/Box/SCEPTRE/sceptre_paper/"
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
tim_known_size <- read.fst(paste0(offsite_dir, "/results/comparison_to_gene/sceptre_package_known_sizes.fst"))
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
l <- list(tim_known_size, gene_mod)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
})
comparision_df
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results.fst"))
tim_known_size
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
l <- list(tim_known_size, gene_mod)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
})
comparision_df
###################################################
# Investigate gene ENSG00000102981 and scrambled_21
###################################################
gene_id <- "ENSG00000102981"; gRNA_id <- "scrambled_21"
gene_id_int <- which(ordered_gene_ids == gene_id)
gene_id
gene_id_int
expressions <- cell_gene_expression_matrix[, gene_id_int]
expressions %>% head()
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = "scrambled_21") %>% pull() %>% as.integer()
gRNA_indic
# subset!
expressions <- expressions[cell_subset]; gRNA_indic <- gRNA_indic[cell_subset]; covariate_matrix <- covariate_matrix[cell_subset, ]
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[["ENSG00000102981"]])
gRNA_precomp_true <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
p <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp, gene_precomp_size = gene_precomp_true$gene_precomp_size, gene_precomp_offsets = gene_precomp_true$gene_precomp_offsets, B = 500, seed = 1234)
p <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp_true, gene_precomp_size = gene_precomp_true$gene_precomp_size, gene_precomp_offsets = gene_precomp_true$gene_precomp_offsets, B = 500, seed = 1234)
p
comparision_df
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gene_dict
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
filter(gene_dict, id == gene_id)
filter(gene_dict, id == gene_id) %>% pull(offset_file)
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character()
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst()
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst() %>% pull(gene_id)
offsets <- filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst() %>% pull(gene_id)
head(offsets)
gene_precomp_true$gene_precomp_offsets %>% head(?)
gene_precomp_true$gene_precomp_offsets %>% head()
gene_precomp_true
gene_precomp_true$gene_precomp_size
gene_id
filter(gene_dict, id == gene_id) %>% pull(offset_file)
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character()
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst() %>% pull(gene_id)
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst() %>% pull(gene_id) %>% head()
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst(columns = gene_id) %>% head()
filter(gene_dict, id == gene_id)
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character()
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS() %>% pull(gene_id)
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS()
size <- (filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS())[[gene_id]]
size
filter(gRNA_dict, id == gene_id)
gRNA_dict
filter(gRNA_dict, id == gRNA_id)
filter(gRNA_dict, id == gRNA_id) %>% pull(precomp_file) %>% as.character()
gRNA_precomp <- filter(gRNA_dict, id == gRNA_id) %>% pull(precomp_file) %>% as.character() %>% read.fst() %>% pull(gRNA_id)
head(gRNA_precomp)
head(offsets)
head(size)
gene_precomp_true$gene_precomp_offsets %>% head()
gene_precomp_true$size %>% head()
gene_precomp_true$size
gene_precomp_true$gene_precomp_size
gRNA_precomp_true %>% head()
gRNA_precomp %>% head()
gene_precomp_true$gene_precomp_offsets %>% head()
offsets %>% head()
size
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)
gene_precomp_true$gene_precomp_size
gene_precomp_true$gene_precomp_offsets
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[[gRNA_id]])
select_sizes
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[[gene_id]])
gRNA_precomp_true <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
p <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp_true, gene_precomp_size = gene_precomp_true$gene_precomp_size, gene_precomp_offsets = gene_precomp_true$gene_precomp_offsets, B = 500, seed = 1234)
p
comparision_df
gene_precomp_true$gene_precomp_offsets $>$ head
gene_precomp_true$gene_precomp_offsets %>% head
head(offsets)
gRNA_precomp <- filter(gRNA_dict, id == gRNA_id) %>% pull(precomp_file) %>% as.character() %>% read.fst() %>% pull(gRNA_id)
gRNA_precomp %>% head()
head(gRNA_precomp_true)
gRNA_precomp_true == gRNA_precomp
all(gRNA_precomp_true == gRNA_precomp)
size <- (filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS())[[gene_id]]
size
gene_dict
filter(gene_dict, id == gene_id)
filter(gene_dict, id == gene_id) %>% pull(size_file)
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character()
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS())
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS()
slice(gene_dict, 1) %>% pull(size_file) %>% as.character() %>% readRDS()
slice(gene_dict, 2) %>% pull(size_file) %>% as.character() %>% readRDS()
slice(gene_dict, 4) %>% pull(size_file) %>% as.character() %>% readRDS()
# run gene precomputation at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
select_sizes
cell_subset
pod_id <- 2
pod_id
gene_precomp_dir
cell_gene_expression_matrix
ordered_gene_ids
head(covariate_matrix)
cell_subset
log_dir
gene_sizes
gene_sizes = select_sizes
# subset covariate matrix by rows
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
integer_ids <- sapply(gene_ids, function(i) which(i == ordered_gene_ids)) %>% as.integer()
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
integer_ids <- sapply(gene_ids, function(i) which(i == ordered_gene_ids)) %>% as.integer()
gene_dictionary
gene_ids
integer_ids
gene_sizes
gene_ids
gene_id <- gene_ids[1]
gene_id
cat(paste0("Running precomputation for gene ", gene_id, ".\n"))
ordered_gene_ids
integer_id <- which(gene_id == ordered_gene_ids)
integer_id
gene_ids
expressions <- cell_gene_expression_matrix[,integer_id]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
gene_sizes[[gene_id]]
curr_gene_size <- gene_sizes[[gene_id]]
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = curr_gene_size)
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)
gene_ids
head(precomps)
gene_sizes
NULL[[gene_id]]
gene_sizes
curr_gene_size <- gene_sizes[[gene_id]]
precomps <- map(gene_ids, function(gene_id) {
cat(paste0("Running precomputation for gene ", gene_id, ".\n"))
integer_id <- which(gene_id == ordered_gene_ids)
expressions <- cell_gene_expression_matrix[,integer_id]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
curr_gene_size <- gene_sizes[[gene_id]]
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = curr_gene_size)
})
head(precomps)
names(precomps)
names(precomps) <- gene_ids
out_offsets <- map_dfc(precomps, function(l) l$gene_precomp_offsets)
out_sizes <- map_dbl(precomps, function(l) l$gene_precomp_size)
out_sizes
gene_sizes
# save the precomputations
offset_save_fp <- (gene_dictionary %>% pull(offset_file))[1] %>% as.character()
size_save_fp <- (gene_dictionary %>% pull(size_file))[1] %>% as.character()
offset_save_fp
size_save_fp
library(sceptre)
