curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = region_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- region_spacer_seqs
curr_counts
}) %>% t() %>% Matrix(sparse = TRUE)
})
count_matrices
count_matrices[[1]]
count_matrices[[2]]
count_matrices[[3]]
target_regions
target_regions <- target_regions[1:%]
target_regions <- target_regions[1:5]
res <- map(.x = gRNA_files, .f = function(curr_file) {
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
count_matrix_list <- map(target_regions, function(region) {
cat(paste0("Working on region ", region, ".\n"))
region_spacer_seqs <- filter(guide_seqs, hg38_enh_region == region) %>% pull(spacer.sequence)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = region_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- region_spacer_seqs
curr_counts
}) %>% t() %>% Matrix(sparse = TRUE)
})
list(cell_barcodes = cell_barcodes, count_matrix_list = count_matrix_list, total_umis = as.integer(curr_gRNA_count_matrix$total_umi_count))
})
res
res[[1]]
res[[1]]$count_matrix_list$`chr1:11671358-11671758`
res
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
cell_gRNA_umi_counts[[1]]
target_regions
region
res
region
x
x <- res[[1]]
x
x$count_matrix_list[[region]]
gRNA_count_matrix_list <- map(target_regions, function(region) {
map(res, function(x) x$count_matrix_list[[region]]) %>% reduce(.f = rbind)
})
gRNA_count_matrix_list$`chr1:11671358-11671758`
gRNA_count_matrix_list$`chr1:11671358-11671758` %>% dim
gRNA_count_matrix_list$`chr1:11798398-11798798` %>% dim
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
cell_barcodes
cell_gRNA_umi_counts
source('~/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/pre_process_data_3.R')
gRNA_count_matrix <- gRNA_count_matrix_list$`chr1:11671358-11671758`
head(gRNA_count_matrix)
gRNA_count_matrix
head(gRNA_count_matrix)
gRNA_count_matrix <- gRNA_count_matrix_list[[1]]
gRNA_count_matrix
gRNA_count_matrix_thresh <- apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
gRNA_count_matrix_thresh
apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
}) %>% apply(MARGIN = 1, FUN = function(r) any(r))
apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
}) %>% apply(MARGIN = 1, FUN = function(r) any(r))
head(v)
head(gRNA_count_matrix_list)
gRNA_count_matrix_list$`chr1:11671358-11671758`
map_dfr(gRNA_count_matrix_list, combine_gRNAs_in_group)
combine_gRNAs_in_group <- function(gRNA_count_matrix) {
apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
}) %>% apply(MARGIN = 1, FUN = function(r) any(r))
}
map_dfr(gRNA_count_matrix_list, combine_gRNAs_in_group)
gRNA_indic_matrix <- map_dfr(gRNA_count_matrix_list, combine_gRNAs_in_group)
head(gRNA_indic_matrix)
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix. Also, append the gRNA UMI count to the cell covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes) %>% gsub(pattern = "-1", replacement = "")
head(cell_covariate_matrix)
m <- match(x = cell_barcodes_to_check, table = cell_barcodes) # There will be some na's.
gRNA_indic_matrix_ordered <- gRNA_indic_matrix[m,]
head(gRNA_indic_matrix_ordered)
cell_gRNA_umi_counts <- cell_gRNA_umi_counts[m]
# Put into data frame form and save
write.fst(x = gRNA_indic_matrix_ordered, path = paste0(processed_dir, "/gRNA_indicator_matrix.fst"))
# Append the gRNA UMI counts to the cell-specific covariate matrix.
cell_covariate_matrix <- mutate(cell_covariate_matrix, tot_gRNA_umis = cell_gRNA_umi_counts)
cell_covariate_matrix
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
# First, save the model covariate matrix
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
n_umis_per_cell <- big_apply(exp_mat_t, function(X, ind) {colSums(X[,ind])}) %>% unlist()
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
covariate_model_matrix <- covariate_matrix %>% mutate(n_umis = n_umis_per_cell) %>% summarize(batch = paste0("batch_", batch) %>% factor, log_n_umis = log(n_umis), log_n_gRNA_umis = log(tot_gRNA_umis))
head(covariate_model_matrix)
# Determine which cells will be included in the analysis; for now, we exclude cells with 0 gRNA UMIs
cell_subset <- which(!is.na(covariate_model_matrix$log_n_gRNA_umis))
cell_subset
# Next, determine which gene-gRNA pairs to analyze
gRNA_indic_mat <- read.fst(paste0(processed_dir, "/gRNA_indicator_matrix.fst"))
head(gRNA_indic_mat)
gRNA_id <- colnames(gRNA_indic_mat)
gRNA_id
gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gene_ids
exp_mat <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm()
gene_expression_p <- big_apply(exp_mat, function(X, ind) colMeans(X[,ind] >= 1)) %>% unlist()
head(gene_expression_p)
highly_expressed_genes <- gene_ids[which(gene_expression_p >= 0.08)] %>% unique()
highly_expressed_genes
gRNA_gene_pairs <- tibble(gene_id = highly_expressed_genes, gRNA_id = gRNA_id)
gRNA_gene_pairs <- expand_grid(gene_id = highly_expressed_genes, gRNA_id = gRNA_id)
head(gRNA_gene_pairs)
gRNA_gene_pairs
gRNA_gene_pairs <- expand_grid(gene_id = highly_expressed_genes, gRNA_id = gRNA_id) %>% mutate(gene_id = factor(gene_id), gRNA_id = factor(gRNA_id))
head(gRNA_gene_pairs)
gRNA_gene_pairs
gRNA_gene_pairs <- expand_grid(gene_id = highly_expressed_genes, gRNA_id = gRNA_id) %>% mutate(gene_id = factor(gene_id), gRNA_id = factor(gRNA_id))
write.fst(gRNA_gene_pairs, paste0(processed_dir, "/gRNA_gene_pairs.fst"))
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
gRNA_names <- readRDS(paste0(processed_dir, "/bulk_region_names.rds"))
gRNA_names
filter(gRNA_names, targeted_gene == "ARL15") %>% pull(region)
arl15_region <- filter(gRNA_names, targeted_gene == "ARL15") %>% pull(region)
arl15_region
head(gRNA_gene_pairs)
arl15_region
filter(gRNA_gene_pairs, gRNA_id == arl15_region)
?simulate_crispr_screen_data
require(sceptre)
?simulate_crispr_screen_data
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/gasperini/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/gasperini/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 200, pair = 200)
storage_location <- c(gene_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gene"), gRNA_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gRNA"), results_dir = paste0(offsite_dir, "/results/gasperini/sceptre"), log_dir = paste0(offsite_dir, "/logs/gasperini"))
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gRNA_precomp_dir <- storage_location[["gRNA_precomp_dir"]]
results_dir <- storage_location[["results_dir"]]
log_dir <- storage_location[["log_dir"]]
expressions <- cell_gene_expression_matrix[,1]
expressions
expressoins
expressions
pod_id
pod_id <- 1
gene_precomp_dir
gRNA_precomp_dir
results_dir
cell_gene_expression_matrix
ordered_gene_ids
gRNA_indicator_matrix_fp
covariate_matrix
regularization_amount
cell_subset
seed
log_dir
B
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
i <- 1
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
regularized_gene_sizes
regularization_amount
if (regularization_amount > 0) regularized_gene_sizes <- readRDS(gene_dict$size_reg_file[1] %>% as.character())[as.character(results_dict$gene_id)]
regularized_gene_sizes
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
expressions
gRNA_indicators
gRNA_precomp
gene_precomp_size
gene_precomp_offsets
B
seed
if (!is.null(seed)) set.seed(seed)
seed
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators == 1])
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
# resample B times
t_nulls <- sapply(1:B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", B, ".\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
tryCatch({
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]},
error = function(e) return(NA),
warning = function(w) return(NA)
)
})
t_nulls
t_nulls <- t_nulls[!is.na(t_nulls)]
t_nulls
hist(t_nulls)
# Fit a skew-t distribution and obtain a p-value
p_value_skew_t <- NA
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
skew_t_fit
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
if (class(skew_t_fit) == "selm") { # If the fit worked,
dp <- skew_t_fit@param$dp # then extract the parameters.
if (!any(is.na(dp))) { # If all the fitted parameters are numbers,
p_value_skew_t <- pst(x = t_star, dp = dp) # then compute the skew t-based p-value.
}
}
skew_t_fit
p_value_skew_t
skew_t_fit
p_value_skew_t
is.na(p_value_skew_t)
# check if the skew-t fit worked
skew_t_fit_success <- !is.na(p_value_skew_t)
skew_t_fit_success
p_value_skew_t
t_nulls
out_p <- p_value_skew_t
out_p <- mean(c(-Inf, t_nulls) <= t_star)
out_p
out_p <- p_value_skew_t
out_p
dp
skew_t_mle <- dp
skew_t_mle
out_p
skew_t_mle
skew_t_mle <- c(xi = NA, omega = NA, alpha = NA, nu = NA)
data.frame(p_val = out_p, skew_t_fit)
data.frame(p_val = out_p, skew_t_mle)
c(p_val, skew_t_mle)
c(out_p, skew_t_mle)
c(p_val = out_p, skew_t_mle)
data.frame(skew_t_mle)
data.frame(c(p_val = out_p, skew_t_mle))
data.frame(p_val =  out_p, skew_t_fit_success = skew_t_fit_success )
data.frame(p_val =  out_p, skew_t_fit_success = skew_t_fit_success)
skew_t_mle[xi]
skew_t_mle <- c(xi = NA, omega = NA, alpha = NA, nu = NA)
skew_t_mle
skew_t_mle["xi"]
out <- data.frame(p_val =  out_p, skew_t_fit_success = skew_t_fit_success, xi = skew_t_mle[["xi"]], omega = skew_t_mle[["omega"]], alpha = skew_t_mle[["alpha"]], nu = skew_t_mle[["nu"]])
out
p_val
list(p_val = out_p,
skew_t_mle = skew_t_mle)
list(p_val = out_p,
skew_t_fit_success = skew_t_fit_success,
skew_t_mle = skew_t_mle)
out <- list(p_val = out_p,
skew_t_fit_success = skew_t_fit_success,
skew_t_mle = skew_t_mle,
z_value = t_star,
resampled_z_values = t_nulls)
out
out <- data.frame(p_val =  out_p, skew_t_fit_success = skew_t_fit_success, xi = skew_t_mle[["xi"]], omega = skew_t_mle[["omega"]], alpha = skew_t_mle[["alpha"]], nu = skew_t_mle[["nu"]])
out
out <- list(p_val = out_p,
skew_t_fit_success = skew_t_fit_success,
skew_t_mle = skew_t_mle,
z_value = t_star,
resampled_z_values = t_nulls)
out
head(out)
out$p_val
out$skew_t_fit_success
out$skew_t_mle
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/gasperini/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/gasperini/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 200, pair = 200)
storage_location <- c(gene_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gene"), gRNA_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gRNA"), results_dir = paste0(offsite_dir, "/results/gasperini/sceptre"), log_dir = paste0(offsite_dir, "/logs/gasperini"))
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gRNA_precomp_dir <- storage_location[["gRNA_precomp_dir"]]
results_dir <- storage_location[["results_dir"]]
log_dir <- storage_location[["log_dir"]]
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, c(1:10, 6001:6010))
}
pod_id
pod_id <- 1
gene_precomp_dir
gRNA_precomp_dir
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
if (regularization_amount > 0) regularized_gene_sizes <- readRDS(gene_dict$size_reg_file[1] %>% as.character())[as.character(results_dict$gene_id)]
1:nrow(results_dict)
p_vals <- sapply(1:nrow(results_dict), function(i) {
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
})
results_dict
results_dict <- results_dict[1:3,]
results_dict
p_vals <- sapply(1:nrow(results_dict), function(i) {
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
})
p_vals
class(p_vals)
dim(p_vals)
p_vals <- map_dfr(1:nrow(results_dict), function(i) {
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
})
p_vals
# Create and save the result dataframe
out <- results_dict %>% summarize(gene_id = gene_id, gRNA_id = gRNA_id) %>% mutate(p_value = p_vals)
out
results_dict
results_dict %>% select(gene_id = gene_id, gRNA_id = gRNA_id)
# Create and save the result dataframe
out <- results_dict %>% select(gene_id = gene_id, gRNA_id = gRNA_id) %>% mutate(p_vals)
out
gRNA_gene_pairs
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/gasperini/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/gasperini/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 200, pair = 200)
storage_location <- c(gene_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gene"), gRNA_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gRNA"), results_dir = paste0(offsite_dir, "/results/gasperini/sceptre"), log_dir = paste0(offsite_dir, "/logs/gasperini"))
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gRNA_precomp_dir <- storage_location[["gRNA_precomp_dir"]]
results_dir <- storage_location[["results_dir"]]
log_dir <- storage_location[["log_dir"]]
gRNA_gene_pairs
set.seed(1)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(x = 1:nrow(gRNA_gene_pairs), size = 60, replace = FALSE))
gRNA_gene_pairs
gRNA_gene_pairs$gRNA_id %>% unique()
gRNA_gene_pairs$gRNA_id %>% unique() %>% length()
pod_sizes <- c(gene = 10, gRNA = 10, pair = 10)
set.seed(1)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(x = 1:nrow(gRNA_gene_pairs), size = 60, replace = FALSE))
gRNA_gene_pairs
small_example
gRNA_gene_pairs
gRNA_gene_pairs$gene_id
gRNA_gene_pairs$gRNA_id %>% length
