storage_location <- c(gene_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gene"), gRNA_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gRNA"), results_dir = paste0(offsite_dir, "/results/gasperini/sceptre"), log_dir = paste0(offsite_dir, "/logs/gasperini"))
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gRNA_precomp_dir <- storage_location[["gRNA_precomp_dir"]]
results_dir <- storage_location[["results_dir"]]
log_dir <- storage_location[["log_dir"]]
expressions <- cell_gene_expression_matrix[,1]
expressions
expressoins
expressions
pod_id
pod_id <- 1
gene_precomp_dir
gRNA_precomp_dir
results_dir
cell_gene_expression_matrix
ordered_gene_ids
gRNA_indicator_matrix_fp
covariate_matrix
regularization_amount
cell_subset
seed
log_dir
B
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
i <- 1
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
regularized_gene_sizes
regularization_amount
if (regularization_amount > 0) regularized_gene_sizes <- readRDS(gene_dict$size_reg_file[1] %>% as.character())[as.character(results_dict$gene_id)]
regularized_gene_sizes
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
expressions
gRNA_indicators
gRNA_precomp
gene_precomp_size
gene_precomp_offsets
B
seed
if (!is.null(seed)) set.seed(seed)
seed
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators == 1])
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
# resample B times
t_nulls <- sapply(1:B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", B, ".\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
tryCatch({
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]},
error = function(e) return(NA),
warning = function(w) return(NA)
)
})
t_nulls
t_nulls <- t_nulls[!is.na(t_nulls)]
t_nulls
hist(t_nulls)
# Fit a skew-t distribution and obtain a p-value
p_value_skew_t <- NA
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
skew_t_fit
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
if (class(skew_t_fit) == "selm") { # If the fit worked,
dp <- skew_t_fit@param$dp # then extract the parameters.
if (!any(is.na(dp))) { # If all the fitted parameters are numbers,
p_value_skew_t <- pst(x = t_star, dp = dp) # then compute the skew t-based p-value.
}
}
skew_t_fit
p_value_skew_t
skew_t_fit
p_value_skew_t
is.na(p_value_skew_t)
# check if the skew-t fit worked
skew_t_fit_success <- !is.na(p_value_skew_t)
skew_t_fit_success
p_value_skew_t
t_nulls
out_p <- p_value_skew_t
out_p <- mean(c(-Inf, t_nulls) <= t_star)
out_p
out_p <- p_value_skew_t
out_p
dp
skew_t_mle <- dp
skew_t_mle
out_p
skew_t_mle
skew_t_mle <- c(xi = NA, omega = NA, alpha = NA, nu = NA)
data.frame(p_val = out_p, skew_t_fit)
data.frame(p_val = out_p, skew_t_mle)
c(p_val, skew_t_mle)
c(out_p, skew_t_mle)
c(p_val = out_p, skew_t_mle)
data.frame(skew_t_mle)
data.frame(c(p_val = out_p, skew_t_mle))
data.frame(p_val =  out_p, skew_t_fit_success = skew_t_fit_success )
data.frame(p_val =  out_p, skew_t_fit_success = skew_t_fit_success)
skew_t_mle[xi]
skew_t_mle <- c(xi = NA, omega = NA, alpha = NA, nu = NA)
skew_t_mle
skew_t_mle["xi"]
out <- data.frame(p_val =  out_p, skew_t_fit_success = skew_t_fit_success, xi = skew_t_mle[["xi"]], omega = skew_t_mle[["omega"]], alpha = skew_t_mle[["alpha"]], nu = skew_t_mle[["nu"]])
out
p_val
list(p_val = out_p,
skew_t_mle = skew_t_mle)
list(p_val = out_p,
skew_t_fit_success = skew_t_fit_success,
skew_t_mle = skew_t_mle)
out <- list(p_val = out_p,
skew_t_fit_success = skew_t_fit_success,
skew_t_mle = skew_t_mle,
z_value = t_star,
resampled_z_values = t_nulls)
out
out <- data.frame(p_val =  out_p, skew_t_fit_success = skew_t_fit_success, xi = skew_t_mle[["xi"]], omega = skew_t_mle[["omega"]], alpha = skew_t_mle[["alpha"]], nu = skew_t_mle[["nu"]])
out
out <- list(p_val = out_p,
skew_t_fit_success = skew_t_fit_success,
skew_t_mle = skew_t_mle,
z_value = t_star,
resampled_z_values = t_nulls)
out
head(out)
out$p_val
out$skew_t_fit_success
out$skew_t_mle
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/gasperini/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/gasperini/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 200, pair = 200)
storage_location <- c(gene_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gene"), gRNA_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gRNA"), results_dir = paste0(offsite_dir, "/results/gasperini/sceptre"), log_dir = paste0(offsite_dir, "/logs/gasperini"))
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gRNA_precomp_dir <- storage_location[["gRNA_precomp_dir"]]
results_dir <- storage_location[["results_dir"]]
log_dir <- storage_location[["log_dir"]]
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, c(1:10, 6001:6010))
}
pod_id
pod_id <- 1
gene_precomp_dir
gRNA_precomp_dir
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
if (regularization_amount > 0) regularized_gene_sizes <- readRDS(gene_dict$size_reg_file[1] %>% as.character())[as.character(results_dict$gene_id)]
1:nrow(results_dict)
p_vals <- sapply(1:nrow(results_dict), function(i) {
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
})
results_dict
results_dict <- results_dict[1:3,]
results_dict
p_vals <- sapply(1:nrow(results_dict), function(i) {
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
})
p_vals
class(p_vals)
dim(p_vals)
p_vals <- map_dfr(1:nrow(results_dict), function(i) {
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
if (regularization_amount > 0) {
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
} else {
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
}
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
})
p_vals
# Create and save the result dataframe
out <- results_dict %>% summarize(gene_id = gene_id, gRNA_id = gRNA_id) %>% mutate(p_value = p_vals)
out
results_dict
results_dict %>% select(gene_id = gene_id, gRNA_id = gRNA_id)
# Create and save the result dataframe
out <- results_dict %>% select(gene_id = gene_id, gRNA_id = gRNA_id) %>% mutate(p_vals)
out
gRNA_gene_pairs
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/gasperini/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/gasperini/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 200, pair = 200)
storage_location <- c(gene_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gene"), gRNA_precomp_dir = paste0(offsite_dir, "/data/gasperini/precomp/gRNA"), results_dir = paste0(offsite_dir, "/results/gasperini/sceptre"), log_dir = paste0(offsite_dir, "/logs/gasperini"))
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gRNA_precomp_dir <- storage_location[["gRNA_precomp_dir"]]
results_dir <- storage_location[["results_dir"]]
log_dir <- storage_location[["log_dir"]]
gRNA_gene_pairs
set.seed(1)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(x = 1:nrow(gRNA_gene_pairs), size = 60, replace = FALSE))
gRNA_gene_pairs
gRNA_gene_pairs$gRNA_id %>% unique()
gRNA_gene_pairs$gRNA_id %>% unique() %>% length()
pod_sizes <- c(gene = 10, gRNA = 10, pair = 10)
set.seed(1)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(x = 1:nrow(gRNA_gene_pairs), size = 60, replace = FALSE))
gRNA_gene_pairs
small_example
gRNA_gene_pairs
gRNA_gene_pairs$gene_id
gRNA_gene_pairs$gRNA_id %>% length
library(sceptre)
library(sceptre)
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions,
gRNA_indicators = gRNA_indicators,
covariate_matrix = covariate_matrix)
library(sceptre)
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[,1]
length(expressions)
expressions <- cell_gene_expression_matrix[,1][cell_subset]
length(expressions)
gRNA_indicators <- read.fst(gRNA_indicator_matrix_fp, columns = 1)
bulk_regions
read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045")[cell_subset]
read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045")
read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045") %>% pull() %>% as.integer() %>% slice(cell_subset)
(read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix
nrow(covariate_matrix)
covariate_matrix <- if (nrow(covariate_matrix) == 106664) covariate_matrix else covariate_matrix[cell_subset,]
covariate_matrix <- if (nrow(covariate_matrix) == 106664) covariate_matrix else covariate_matrix[cell_subset,]
nrow(covariate_matrix)
nrow(covariate_matrix)
covariate_matrix <- if (nrow(covariate_matrix) == 106664) covariate_matrix else covariate_matrix[cell_subset,]
nrow(covariate_matrix)
length(expressions)
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
?run_sceptre_gRNA_gene_pair
library(sceptre)
?run_sceptre_gRNA_gene_pair
library(sceptre)
?run_sceptre_gRNA_gene_pair
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[,1][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- if (nrow(covariate_matrix) == 106664) covariate_matrix else covariate_matrix[cell_subset,]
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
warnings()
cell_subset
length(cell_subset)
cell_gene_expression_matrix[,1] %>% length
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[,2][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045") %>% pull() %>% as.integer())[cell_subset]
length(gRNA_indicators)
covariate_matrix <- if (nrow(covariate_matrix) == 106666) covariate_matrix else covariate_matrix[cell_subset,]
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
require(katsevich2020)
require(scales)
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
source(paste0(code_dir, "/sup_analyses/xie_sup_analyses/aux_objects.R"))
p_vals_sceptre <- paste0(results_dir, "/all_results.fst") %>% read.fst() %>% filter(enh_names == "ARL15-enh")
p_vals_nb <- paste0(results_dir_negative_binomial, "/all_results.fst") %>% read.fst() %>% filter(gRNA_id == as.character(p_vals_sceptre$gRNA_id[1]))
p_vals_hypergeo <- paste0(processed_dir, "/hypergeometric_arl15enh_pvals_down.rds") %>% readRDS()
paste0(processed_dir, "/xie_p_values.rds") %>% readRDS()
p_vals_hypergeo <- paste0(processed_dir, "/xie_p_values.rds") %>% readRDS() %>% pluck("ARL15_enh")
head(p_vals_hypergeo)
x <- paste0(processed_dir, "/xie_p_values.rds") %>% readRDS()
p_vals_hypergeo <- paste0(processed_dir, "/xie_p_values.rds") %>% readRDS() %>% pluck("arl15_enh")
p_vals_hypergeo
p_vals_hypergeo <- p_vals_hypergeo[names(p_vals_hypergeo) %in% p_vals_sceptre$gene_id]
to_plot <- tibble(method = rep(x = c("SCEPTRE", "NB regression", "Hypergeometric"), each = length(p_vals_hypergeo)) %>% factor(), p_value = c(p_vals_sceptre$p_value, p_vals_nb$p_value, set_names(p_vals_hypergeo, NULL) ), gene = c(as.character(p_vals_sceptre$gene_id), as.character(p_vals_nb$gene_id), names(p_vals_hypergeo)))
ci <- 0.95
truncate_thresh <- 1e-9
qq_data <- to_plot %>%
rename(pvalue = p_value) %>%
group_by(method) %>%
mutate(r = rank(pvalue), expected = ppoints(n())[r],
clower = qbeta(p=(1-ci)/2, shape1 = r, shape2 = n()+1-r),
cupper = qbeta(p=(1+ci)/2, shape1 = r, shape2 = n()+1-r)) %>% ungroup()
min_expected_p <- min(qq_data$expected)
sorted_methods_rightmost_pnt <- filter(qq_data, expected == min_expected_p) %>% arrange(pvalue) %>% pull(method) %>% as.character()
qq_data <- mutate(qq_data, pvalue = ifelse(pvalue <= truncate_thresh, truncate_thresh, pvalue))
for (i in 1:length(sorted_methods_rightmost_pnt)) {
curr_method <- sorted_methods_rightmost_pnt[i]
shift <- (i - 1) * 1e-9 * 3/4
curr_p <- qq_data[qq_data$method == curr_method & qq_data$expected == min_expected_p, "pvalue"] %>% pull()
qq_data[qq_data$method == curr_method & qq_data$expected == min_expected_p, "pvalue"] <- curr_p + shift
}
annotation_df <- filter(qq_data, gene == filter(p_vals_sceptre, gene_names == "ARL15") %>% pull(gene_id) %>% as.character())
arrow_coords <- tibble(x1 = 4e-4, x2 = annotation_df$expected + 1e-5, y1 = 1e-8, y2 = annotation_df$pvalue)
p <- qq_data %>%
ggplot(aes(x = expected, y = pvalue, group = method, ymin = clower, ymax = cupper)) +
geom_point(aes(color = method), size = 1, alpha = 0.5) +
geom_ribbon(alpha = 0.2) +
geom_abline(intercept = 0, slope = 1) +
scale_colour_manual(values = setNames(plot_colors[c("hypergeometric", "improved_nb", "sceptre")], NULL), name = "Method") +
xlab("Expected null p-value") +
ylab("Observed p-value") +
guides(color = guide_legend(override.aes = list(alpha = 1))) +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() + theme(legend.position = c(0.25,0.8), text = element_text(size = 12),
legend.background = element_rect(fill = "transparent", colour = NA),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.line = element_line()) +
annotate(geom = "text", x = 10e-4, y = 1e-8, label = "ARL15", col = "firebrick3") +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), lwd = 0.2, data = arrow_coords, arrow = arrow(length=unit(0.2,"cm")), inherit.aes = FALSE, col = "grey40")
p
# Bulk RNA-seq
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
code_dir
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
source(paste0(code_dir, "/sup_analyses/xie_sup_analyses/aux_objects.R"))
library(edgeR)
gene_ids_in_use <- paste0(processed_dir, "/gRNA_gene_pairs.fst") %>% read.fst() %>% pull(gene_id) %>% as.character() %>% unique()
head(gene_ids_in_use)
all_gene_names <- paste0(processed_dir, "/ordered_genes.RDS") %>% readRDS()
all_gene_ids <- paste0(processed_dir, "/ordered_gene_ids.RDS") %>% readRDS()
gene_names_in_use <- all_gene_names[all_gene_ids %in% gene_ids_in_use]
bulk_data <- paste0(processed_dir, "/bulk_RNAseq.fst") %>% read.fst() %>% select(-Chr, -Start, -End, -Strand, -Length) %>% filter(Geneid %in% gene_names_in_use)
paste0(processed_dir, "/bulk_RNAseq.rds") %>% readRDS()
?pluck
x <- paste0(processed_dir, "/bulk_RNAseq.rds") %>% readRDS()
paste0(processed_dir, "/bulk_RNAseq.rds") %>% readRDS() %>% pluck(data, arl15_enh)
paste0(processed_dir, "/bulk_RNAseq.rds") %>% readRDS() %>% pluck("data", "arl15_enh")
bulk_data <- paste0(processed_dir, "/bulk_RNAseq.rds") %>% readRDS() %>% pluck("data", "arl15_enh") %>% select(-Chr, -Start, -End, -Strand, -Length) %>% filter(Geneid %in% gene_names_in_use)
bulk_info <- paste0(processed_dir, "/bulk_RNAseq_info.fst") %>% read.fst()
bulk_info <- paste0(processed_dir, "/bulk_RNAseq.rds") %>% readRDS() %>% pluck("info", "arl15_enh")
head
head(bulk_info)
group <- factor(bulk_info$region)
y <- DGEList(counts = select(bulk_data, -Geneid) %>% as.matrix, group = group)
y <- calcNormFactors(y)
design <- model.matrix(~group)
y <- estimateDisp(y, design)
fit <- glmQLFit(y, design)
qlf <- glmQLFTest(fit, coef = 2)
genes_ordered <- topTags(qlf, n = nrow(bulk_data))
p_vals <- data.frame(gene_id = bulk_data$Geneid[row.names(genes_ordered) %>% as.integer()], p_value = genes_ordered$table$PValue, p_value_adj = genes_ordered$table$FDR)
p_Vals
p_vals
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
library(katsevich2020)
library(scales)
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
source(paste0(code_dir, "/sup_analyses/xie_sup_analyses/aux_objects.R"))
p_vals_sceptre <- paste0(results_dir, "/all_results.fst") %>% read.fst() %>% as_tibble() %>% filter(enh_names == "ARL15-enh") %>% select(p_value, gene_names) %>% mutate(p_value_adj = p.adjust(p_value, method = "BH"))
p_vals_bulk <- paste0(offsite_dir, "/results/xie/bulk_rna_seq/pvals_arl15_enh.rds") %>% readRDS() %>% as_tibble() %>% rename(gene_names = gene_id)
to_plot <- inner_join(p_vals_bulk, p_vals_sceptre, by = "gene_names") %>% rename(bulk_pval_adj = p_value_adj.x, bulk_pval = p_value.x, sceptre_pval_adj = p_value_adj.y, sceptre_pval = p_value.y) %>% mutate(is_arl15 = (gene_names == "ARL15"))
p <- ggplot(data = to_plot, mapping = aes(x = bulk_pval, y = sceptre_pval, col = is_arl15)) +
geom_point(alpha = 0.5) +
scale_colour_manual(values = c("grey60", "firebrick3")) +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() + theme(text = element_text(size = 12),
legend.background = element_rect(fill = "transparent", color = NA),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.line = element_line(), legend.position = "none") +
xlab("Bulk RNA-seq p-value") + ylab("SCEPTRE p-value") +
geom_point(mapping = aes(x = bulk_pval, y = sceptre_pval), data = filter(to_plot, is_arl15), size = 2) +
annotate(geom = "text", x = 1e-12, y = 1e-12, label = "ARL15", col = "firebrick3")
p
