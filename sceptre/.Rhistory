source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(ravel))
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
head(enh_targets_df)
filter(enh_targets_df, gene_names == "ARL15")
filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
arl15_region <- filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1)
head(guide_seqs)
filter(.data = guide_seqs, region.pos.(hg38) == arl15_region)
guide_seqs %>% rename(hg38_enh_region = "region.pos.(hg38)")
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
head(guide_seqs)
filter(guide_seqs, hg38_enh_region == arl15_region)
filter(guide_seqs, hg38_enh_region == arl15_region) %>% pull(spacer.sequence)
arl15_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region == arl15_region) %>% pull(spacer.sequence)
arl15_gRNA_spacer_seqs
# Next, we create a data frame containing UMI counts for these gRNAs
read_tsv(file = paste0(raw_data_dir, "/GSM3722737_sgRNA-enrichment_5K-sgRNAs_Batch_4_1_sgRNA_UMI.txt"))
# Next, we create a data frame containing UMI counts for these gRNAs
read_tsv(file = paste0(raw_data_dir, "/GSM3722737_sgRNA-enrichment_5K-sgRNAs_Batch_4_1_sgRNA_UMI.txt"), col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "UMI_counts"))
# Next, we create a data frame containing UMI counts for these gRNAs
read_tsv(file = paste0(raw_data_dir, "/GSM3722737_sgRNA-enrichment_5K-sgRNAs_Batch_4_1_sgRNA_UMI.txt"), col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "UMI_counts"), col_types = "ciiccc")
# Next, we create a data frame containing UMI counts for these gRNAs
curr_gRNA_counts <- read_tsv(file = paste0(raw_data_dir, "/GSM3722737_sgRNA-enrichment_5K-sgRNAs_Batch_4_1_sgRNA_UMI.txt"), col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "UMI_counts"), col_types = "ciiccc")
# Next, we create a data frame containing UMI counts for these gRNAs
curr_gRNA_counts <- read_tsv(file = paste0(raw_data_dir, "/GSM3722737_sgRNA-enrichment_5K-sgRNAs_Batch_4_1_sgRNA_UMI.txt"), col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "UMI_counts"), col_types = "ciiccc") %>% select(cell_barcode, total_umi_count, gRNA_spacer_seqs, UMI_counts))
# Next, we create a data frame containing UMI counts for these gRNAs
curr_gRNA_counts <- read_tsv(file = paste0(raw_data_dir, "/GSM3722737_sgRNA-enrichment_5K-sgRNAs_Batch_4_1_sgRNA_UMI.txt"), col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "UMI_counts"), col_types = "ciiccc") %>% select(cell_barcode, total_umi_count, gRNA_spacer_seqs, UMI_counts)
curr_gRNA_counts
r <- curr_gRNA_counts[1,]
r
r$gRNA_spacer_seqs
str_split(r$gRNA_spacer_seqs, pattern = ";")
str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
match(x = arl15_gRNA_spacer_seqs, table = spacers)
r <- curr_gRNA_counts[2,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
match(x = arl15_gRNA_spacer_seqs, table = spacers)
r <- curr_gRNA_counts[3,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
match(x = arl15_gRNA_spacer_seqs, table = spacers)
r <- curr_gRNA_counts[10,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
match(x = arl15_gRNA_spacer_seqs, table = spacers)
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
spacers
arl15_gRNA_spacer_seqs
match(x = arl15_gRNA_spacer_seqs, table = spacers)
spacers[10]
arl15_gRNA_spacer_seqs[7]
match(x = arl15_gRNA_spacer_seqs, table = spacers)
source('~/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/pre_process_data_3.R', echo=TRUE)
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
umi_locs
str_split(r$UMI_counts, pattern = ";") %>% unlist()
umi_counts <- str_split(r$UMI_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_counts
umi_counts[i]
i
sapply(umi_locs, function(i) {
out <- if (is.na(i)) 0 else umi_counts[i]
})
sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
curr_barcode <- r$cell_barcode
curr_barcode
curr_counts
out <- tibble(curr_barcode, curr_counts)
out
curr_barcode
curr_counts
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
curr_gRNA_counts
curr_gRNA_counts$cell_barcode
curr_counts
curr_gRNA_counts
row_id <- 10
r <- curr_gRNA_counts[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
spacers
umi_counts <- str_split(r$UMI_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_counts
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
umi_locs
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
curr_counts
curr_barcode <- r$cell_barcode
curr_barcode
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_counts), FUN = function(row_id) {
r <- curr_gRNA_counts[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$UMI_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
})
curr_batch_gRNA_umi_counts
head(curr_batch_gRNA_umi_counts)
dim(curr_batch_gRNA_umi_counts)
curr_batch_gRNA_umi_counts
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_counts), FUN = function(row_id) {
r <- curr_gRNA_counts[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$UMI_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
curr_batch_gRNA_umi_counts
head(curr_batch_gRNA_umi_counts)
tail(curr_batch_gRNA_umi_counts)
colSums(curr_batch_gRNA_umi_counts)
curr_gRNA_counts
# Next, we create a data frame containing UMI counts for these gRNAs
list.files(raw_data_dir)
# Next, we create a data frame containing UMI counts for these gRNAs
raw_fs <- list.files(raw_data_dir)
raw_fs
grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs)
grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE)
# Next, we create a data frame containing UMI counts for these gRNAs
raw_fs <- list.files(raw_data_dir)
gRNA_files <- grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE)
gRNA_files
gRNA_files <- paste0(raw_data_dir, grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
gRNA_files
curr_file <- gRNA_files[1]
curr_file
paste0("Working on file", curr_file)
print(paste("Working on file", curr_file))
raw_fs
gRNA_files
print(paste("Working on file", curr_file))
read_tsv(file = curr_file)
print(paste("Working on file", curr_file))
# Next, we create a data frame containing UMI counts for these gRNAs
raw_fs <- list.files(raw_data_dir)
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
gRNA_files
gRNA_files
print(paste("Working on file", curr_file))
curr_file
curr_gRNA_count_matrix <- read_tsv(file = curr_file)
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
curr_file <- gRNA_files[1]
curr_gRNA_count_matrix <- read_tsv(file = curr_file)
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("ciicii"))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"))
curr_gRNA_count_matrix
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("ciicii"))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc"))
curr_gRNA_count_matrix
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts)
curr_gRNA_count_matrix
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts)
curr_gRNA_count_matrix
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
cell_barcodes
cell_barcodes
map(.x = gRNA_files, .f = function(curr_file) {
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$UMI_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
})
warnings()
curr_gRNA_count_matrix
row_id <- 1
r <- curr_gRNA_count_matrix[row_id,]
r
row_id
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
spacers
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
curr_batch_gRNA_umi_counts
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
arl15_region <- filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
arl15_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region == arl15_region) %>% pull(spacer.sequence)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(ravel))
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
arl15_region <- filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
arl15_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region == arl15_region) %>% pull(spacer.sequence)
# Next, we create a data frame containing UMI counts for these gRNAs
raw_fs <- list.files(raw_data_dir)
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
res <- map(.x = gRNA_files, .f = function(curr_file) {
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
list(cell_barcodes = cell_barcodes, umi_count_matrix = curr_batch_gRNA_umi_counts)
})
res[[1]]
res[[2]]
x <- res[[1]]
map(.x = res, .f = function(x) x$umi_count_matrix)
map(.x = res, .f = function(x) x$umi_count_matrix) %>% reduce(.f = rbind)
gRNA_count_matrix <- map(.x = res, .f = function(x) x$umi_count_matrix) %>% reduce(.f = rbind)
dim(gRNA_count_matrix)
gRNA_count_matrix[1:100]
gRNA_count_matrix[1:100,]
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
cell_barcodes
length(cell_barcodes)
nrow(gRNA_count_matrix)
head(gRNA_count_matrix)
column >= 0
column <- gRNA_count_matrix[,1]
column
column >= 0
column >= 1
v <- sum(column >= 1)
v
U <- sum(column)
U
column/U > 1/v
sum(column/U > 1/v)
sum(column >= 1)
apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
# Now, we modify the gRNA UMI count matrix to threshold the data; we use the formula proposed by xie;
gRNA_count_matrix_thresh <- apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
gRNA_count_matrix_thresh
apply(X = gRNA_count_matrix_thresh, MARGIN = 1, FUN = function(r) any(r))
apply(X = gRNA_count_matrix_thresh, MARGIN = 1, FUN = function(r) any(r)) %>% sum()
gRNA_indic <- apply(X = gRNA_count_matrix_thresh, MARGIN = 1, FUN = function(r) any(r))
gRNA_indic
data.frame(arl15_enh = gRNA_indic)
data.frame(arl15_enh = gRNA_indic) %>% head()
gRNA_indic_matrix <- data.frame(arl15_enh = gRNA_indic) %>% head()
head(gRNA_indic)
head(gRNA_indic)
gRNA_indic_matrix <- data.frame(arl15_enh = gRNA_indic) %>% head()
head(gRNA_indic_matrix)
write.fst(x = gRNA_indic_matrix, path = paste0(processed_dir, "/gRNA_indicator_matrix.fst"))
cell_barcodes
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix.
read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
head(cell_covariate_matrix)
pull(cell_covariate_matrix, ordered_cell_barcodes)
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes) %>% gsub(pattern = "-1", replacement = "")
head(cell_barcodes_to_check)
head(cell_barcodes)
gRNA_indic_matrix
cell_barcodes_to_check
head(cell_barcodes_to_check)
head(cell_barcodes)
match(x = cell_barcodes, table = cell_barcodes_to_check)
m <- match(x = cell_barcodes, table = cell_barcodes_to_check)
head(m)
cell_barcodes[5794]
head(cell_barcodes_to_check)
m <- match(x = cell_barcodes_to_check, table = cell_barcodes)
m
head(m)
m[2527]
cell_barcodes[2527]
head(cell_barcodes_to_check)
head(cell_barcodes[m])
cell_barcodes[1]
cell_barcodes[m]
head(cell_barcodes[m])
head(cell_barcodes_to_check)
gRNA_indic_ordered <- gRNA_indic[m]
head(gRNA_indic_ordered)
# Put into data frame form
gRNA_indic_matrix <- data.frame(arl15_enh = gRNA_indic_ordered)
write.fst(x = gRNA_indic_matrix, path = paste0(processed_dir, "/gRNA_indicator_matrix.fst"))
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes)
head(cell_barcodes_to_check)
dest <- paste0(raw_data_dir, "/bulk_rna_info.xlsx")
# Download data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(R.utils))
dest <- paste0(raw_data_dir, "/bulk_rna_info.xlsx")
download.file(url = "https://ars.els-cdn.com/content/image/1-s2.0-S2211124719313956-mmc5.xlsx", destfile = dest)
dest <- paste0(raw_data_dir, "/bulk_rna_info.xlsx")
download.file(url = "https://ars.els-cdn.com/content/image/1-s2.0-S2211124719313956-mmc3.xlsx", destfile = dest)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(ravel))
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(ravel))
##############
# Bulk RNA-seq
##############
bulk_info <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/bulk_rna_info.xlsx"))
bulk_info
##############
# Bulk RNA-seq
##############
bulk_info <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/bulk_rna_info.xlsx"), sheet = 3)
head(bulk_info)
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"))
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiii")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiii")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778_1")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778_1" = "PZ778")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778" = "PZ778_1")
bulk_df <- read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778" = "PZ778_1")
head(buld_df)
head(bulk_df)
# We will use only the protein-coding genes in this analysis; load them.
gene_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/Genes.xlsx"), sheet = 1)
all_protein_coding_genes <- gene_df$Gene_Symbol
rm(gene_df)
head(all_protein_coding_genes)
filter(bulk_df, Geneid %in% all_protein_coding_genes)
head(bulk_info)
tail(bulk_info)
bulk_info
slice(bulk_info, 1:25)
slice(bulk_info, 1:25) %>% select(Library.Name )
slice(bulk_info, 1:25) %>% select(library_name = Library.Name)
slice(bulk_info, 1:25) %>% select(library_name = Library.Name, gRNA = sgRNA, region = Region, biological_duplicate = Biological.Duplicate)
bulk_df
bulk_info <- slice(bulk_info, 1:25) %>% select(library_name = Library.Name, gRNA = sgRNA, region = Region, biological_duplicate = Biological.Duplicate)
bulk_info
head(bulk_df)
bulk_df
bulk_df <- read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778" = "PZ778_1")
##############
# Bulk RNA-seq
##############
bulk_info <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/bulk_rna_info.xlsx"), sheet = 3)
bulk_info <- slice(bulk_info, 1:25) %>% select(library_name = Library.Name, gRNA = sgRNA, region = Region, biological_duplicate = Biological.Duplicate)
bulk_df <- read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778" = "PZ778_1")
bulk_df <- filter(bulk_df, Geneid %in% all_protein_coding_genes)
bulk_df
bulk_df
bulk_info
bulk_info
write.fst(x = bulk_info, path = paste0(processed_dir, "/bulk_RNAseq_info.fst"))
write.fst(x = bulk_df, path = paste0(processed_dir, "/bulk_RNAseq.fst"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
exp_mat_t_metadata <- list(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", backingfile = paste0(processed_dir, "/expression_matrix_t"))
# First, we determine the number of cells and number of genes across all the batches
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
out <- as.integer(dim)
H5Fclose(h5_handle)
return(out)
}) %>% t()
row.names(dims_across_h5s) <- NULL
all(dims_across_h5s[,1] == dims_across_h5s[1,1]) # Verify n genes consistent across files
n_cells_total <- sum(dims_across_h5s[,2])
n_genes_total <- dims_across_h5s[1,1]
# We will use only the protein-coding genes in this analysis; load them.
gene_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/Genes.xlsx"), sheet = 1)
all_protein_coding_genes <- gene_df$Gene_Symbol
rm(gene_df)
h5_file <- h5_files[1]
h5_handle <- H5Fopen(h5_file)
all_sequenced_genes <- h5_handle$"/refgenome_hg38_CROP-Guide-MS2-2.1.0/gene_names"
genes_in_use <- all_sequenced_genes[which(all_sequenced_genes %in% all_protein_coding_genes)]
n_genes_in_use <- length(genes_in_use)
H5Fclose(h5_handle)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(ravel))
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
out <- as.integer(dim)
H5Fclose(h5_handle)
return(out)
}) %>% t()
row.names(dims_across_h5s) <- NULL
all(dims_across_h5s[,1] == dims_across_h5s[1,1]) # Verify n genes consistent across files
n_cells_total <- sum(dims_across_h5s[,2])
n_genes_total <- dims_across_h5s[1,1]
gene_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/Genes.xlsx"), sheet = 1)
all_protein_coding_genes <- gene_df$Gene_Symbol
rm(gene_df)
h5_file <- h5_files[1]
h5_handle <- H5Fopen(h5_file)
all_sequenced_genes <- h5_handle$"/refgenome_hg38_CROP-Guide-MS2-2.1.0/gene_names"
genes_in_use <- all_sequenced_genes[which(all_sequenced_genes %in% all_protein_coding_genes)]
n_genes_in_use <- length(genes_in_use)
H5Fclose(h5_handle)
exp_mat_t_metadata <- list(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", backingfile = paste0(processed_dir, "/expression_matrix_t"))
exp_mat_t_metadata
saveRDS(object = exp_mat_t_metadata, file = paste0(processed_dir, "exp_mat_t_metadata.rds"))
exp_mat_metadata <- list(nrow = n_cells_total, ncol = n_genes_in_use, type = "unsigned short", backingfile = paste0(processed_dir, "/expression_matrix"))
saveRDS(object = exp_mat_metadata, file = paste0(processed_dir, "exp_mat_metadata.rds"))
saveRDS(object = exp_mat_t_metadata, file = paste0(processed_dir, "/exp_mat_t_metadata.rds"))
saveRDS(object = exp_mat_metadata, file = paste0(processed_dir, "/exp_mat_metadata.rds"))
# Download the Genes.xlsx file from this url: https://osf.io/edjzv/ (source: Human protein-coding genes and gene feature statistics in 2019 by Piovesan et al in BMC Research Notes)
dest <- paste0(raw_data_dir, "/Genes_2.xlsx")
download.file(url = "https://app.box.com/s/lyr9ojwos6gd01popxwmmxf81zbaovh2", destfile = dest)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
readRDS(paste0(processed_dir, "/exp_mat_t.rds"))
processed_dir
readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds"))
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
exp_mat_t[,1]
exp_mat_t[,100000]
?big_apply
n_genes_per_cell <- big_apply(exp_mat_t, function(X, ind) {colSums(X[,ind] > 0)}) %>% unlist()
head(n_genes_per_cell)
n_umis_per_cell <- big_apply(exp_mat_t, function(X, ind) {colSums(X[,ind])}) %>% unlist()
head(n_umis_per_cell)
covariate_matrix <- read.fst(processed_dir, "/covariate_matrix.fst")
covariate_matrix <- read.fst(processed_dir, "/cell_covariate_matrix.fst")
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
head(covariate_matrix)
nrow(covariate_matrix)
length(n_umis_per_cell)
length(n_genes_per_cell)
covariate_matrix %>% mutate(n_umis = n_umis_per_cell, n_genes = n_genes_per_cell)
covariate_matrix <- covariate_matrix %>% mutate(n_umis = n_umis_per_cell, n_genes = n_genes_per_cell)
head(covariate_matrix)
summarize(covariate_matrix, batch = paste0("batch_", batch) %>% factor, log_n_umis = log(n_umis))
covariate_model_matrix <- summarize(covariate_matrix, batch = paste0("batch_", batch) %>% factor, log_n_umis = log(n_umis))
head(covariate_model_matrix)
covariate_model_matrix$batch
write.fst(x = covariate_model_matrix, path = paste0(processed_dir, "/covariate_model_matrix.fst"))
packs <- c("rhdf5", "stringr", "openxlsx", "ravel")
library(devtools)
install_github(repo="Timothy-Barry/ravel")
