gene_precomp$gene_precomp_offsets
gene_precomp$gene_precomp_size
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, NULL, gene_precomp$gene_precomp_offsets)
gene_precomp$gene_precomp_size
gene_precomp$gene_precomp_offsets
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, NULL, NULL)
gene_precomp$gene_precomp_offsets
gene_precomp$gene_precomp_size
library(sceptre)
library(sceptre)
library(sceptre)
?run_gene_precomputation
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
covariate_matrix <- sim_dat$covariate_df
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, NULL, NULL)
gene_precomp$gene_precomp_offsets
gene_precomp$gene_precomp_dispersion
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
library(sceptre)
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
gRNA_precomp = NULL; gene_precomp_dispersion = NULL; gene_precomp_offsets = NULL; B = 500; seed = NULL
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gRNA_precomp
if (is.null(gene_precomp_dispersion) || is.null(gene_precomp_offsets)) gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, gene_precomp_dispersion, gene_precomp_offsets)
gene_precomp
library(sceptre)
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
if (!is.null(seed)) set.seed(seed)
seed <- 1234
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators == 1])
expressions = expressions; gRNA_indicators = gRNA_indicators; gRNA_precomp = gRNA_precomp; gene_precomp_dispersion = gene_precomp$gene_precomp_dispersion; gene_precomp_offsets = gene_precomp$gene_precomp_offsets; B = B; seed = seed
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gRNA_precomp = NULL; gene_precomp_dispersion = NULL; gene_precomp_offsets = NULL; B = 500; seed = NULL
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
if (is.null(gene_precomp_dispersion) || is.null(gene_precomp_offsets)) gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, gene_precomp_dispersion, gene_precomp_offsets)
expressions = expressions; gRNA_indicators = gRNA_indicators; gRNA_precomp = gRNA_precomp; gene_precomp_dispersion = gene_precomp$gene_precomp_dispersion; gene_precomp_offsets = gene_precomp$gene_precomp_offsets; B = B; seed = seed
if (!is.null(seed)) set.seed(seed)
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators == 1])
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
t_star
# resample B times
t_nulls <- sapply(1:B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", B, "\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]
})
# Fit a skew-t distribution and obtain a p-value
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
library(sceptre)
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
# set the expression vector, gRNA indicator vector, and covariate matrix.
expressions <- df$gene_exp
gRNA_indicators <- df$grna_group_indicator
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = factor(prep_batch), total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
expressions
gRNA_indicators
covariate_matrix
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
expressions <- df$gene_exp
gRNA_indicators <- df$grna_group_indicator
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = factor(prep_batch), total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
p <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = size, seed = 1234)
p
random_pair_results
random_pair_results$corrected_pvalue_st
p <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = NULL, seed = 1234)
p
library(sceptre)
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
# set the expression vector, gRNA indicator vector, and covariate matrix.
expressions <- df$gene_exp
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
require(sceptre)
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
# set the expression vector, gRNA indicator vector, and covariate matrix.
expressions <- df$gene_exp
gRNA_indicators <- df$grna_group_indicator
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = factor(prep_batch), total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
p <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = NULL, seed = 1234)
p
result  <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = size, seed = 1234)
result
random_pair_results
# check that the results match
abs(result$p_value_raw - random_pair_results$corrected_pvalue_raw)
abs(result$p_value_skew_t - random_pair_results$corrected_pvalue_st)
abs(result$z_value_star - random_pair_results$original_zvalue)
# check that the results match
abs(result$p_value_raw - random_pair_results$corrected_pvalue_raw) < 1e-5
abs(result$p_value_skew_t - random_pair_results$corrected_pvalue_st) < 1e-5
abs(result$z_value_star - random_pair_results$original_zvalue) < 1e-5
1e-5
0.000001
0.00001
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = prep_batch, total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
result <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = size, seed = 1234)
result
# check that the results match
abs(result$p_value_raw - random_pair_results$corrected_pvalue_raw) < 1e-5
abs(result$p_value_skew_t - random_pair_results$corrected_pvalue_st) < 1e-5
abs(result$z_value_star - random_pair_results$original_zvalue) < 1e-5
result$p_value_raw - random_pair_results$corrected_pvalue_raw
result$p_value_skew_t - random_pair_results$corrected_pvalue_st
result$z_value_star - random_pair_results$original_zvalue
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
require(sceptre)
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
load("/Users/timbarry/Box/SCEPTRE/other_code/drivers_simple/single_pair.Rda")
head*df
head(df)
head(rrandom_pair_results)
example_data <- df
head(example_data)
?use_data
require(usethis)
?use_data
use_data(example_data, example_data)
load(example_data)
data(example_data)
library(sceptre)
rm(list = ls())
library(sceptre)
rm(list = ls())
data("example_data")
library(sceptre)
library(sceptre)
library(sceptre)
library(sceptre)
data("example_data")
head(example_data)
dim(example_data)
library(sceptre)
library(sceptre)
library(sceptre)
expressions <- df$gene_exp
expressions <- example_data$gene_exp
gRNA_indicators <- example_data$grna_group_indicator
covariate_matrix <- summarize(example_data,
percent.mito = percent.mito,
prep_batch = factor(prep_batch),
total_umis = log(total_umis),
guide_count = log(guide_count),
gene_count = log(gene_count))
expressions
gRNA_indicators
covariate_matrix
?run_sceptre_gRNA_gene_pair
library(sceptre)
library(sceptre)
library(sceptre)
data("example_data")
head(example_data)
dim(example_data)
expressions <- example_data$gene_exp
expressions[1:5]
gRNA_indicators <- example_data$grna_group_indicator
gRNA_indicators[1:5]
covariate_matrix <- summarize(example_data,
percent.mito = percent.mito,
prep_batch = factor(prep_batch),
total_umis = log(total_umis),
guide_count = log(guide_count),
gene_count = log(gene_count))
head(covariate_matrix)
p_value <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, seed = 1234)
library(sceptre)
library(sceptre)
?run_sceptre_gRNA_gene_pair
library(sceptre)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0.1,
neg_binom_size = 2)
map(simulated_data, head)
function(x) log(rpois(x, 1000))
f <- function(x) log(rpois(x, 1000))
f(50)
f(1)
f(1)
f(1)
f(1)
f(1)
f <- function(x) log(rnegbin(x, 1000, 2))
f(10)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 1000, 2)),
p_mito = function(x) runif(x, 0, 2)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0.0,
neg_binom_size = 2)
simulated_data
library(sceptre)
library(sceptre)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 5000, 2)),
p_mito = function(x) runif(x, 0, 2)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0.0,
neg_binom_size = 2,
seed = 1234)
map(simulated_data, head)
p_value <- run_sceptre_gRNA_gene_pair(expressions = simulated_data$Y,
gRNA_indicators = simulated_data$X,
covariate_matrix = simulated_data$covariate_df,
seed = 1234)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 5000, 2)),
p_mito = function(x) runif(x, 0, 2)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(1, 0.5),
zero_inflation = 0.0,
neg_binom_size = 1,
seed = 1234)
map(simulated_data, head)
p_value <- run_sceptre_gRNA_gene_pair(expressions = simulated_data$Y,
gRNA_indicators = simulated_data$X,
covariate_matrix = simulated_data$covariate_df,
seed = 1234)
p_value
p_mito = function(x) runif(x, 0, 2)
p_mito((100))
p_mito(100)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 5000, 2)),
p_mito = function(x) runif(x, 0, 2)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(1, 0.1),
zero_inflation = 0.0,
neg_binom_size = 1,
seed = 1234)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 5000, 2)),
p_mito = function(x) runif(x, 0, 2)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(1, 0.1),
zero_inflation = 0.0,
neg_binom_size = 2,
seed = 1234)
map(simulated_data, head)
p_value <- run_sceptre_gRNA_gene_pair(expressions = simulated_data$Y,
gRNA_indicators = simulated_data$X,
covariate_matrix = simulated_data$covariate_df,
seed = 1234)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 1000, 3)),
p_mito = function(x) runif(x, 0, 1)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(1, 0.1),
zero_inflation = 0.0,
neg_binom_size = 2,
seed = 1234)
expressions = simulated_data$Y
gRNA_indicators = simulated_data$X
covariate_matrix = simulated_data$covariate_df
gRNA_indicators
glm(formula = gRNA_indicators ~ ., family = "binomial", data = covariate_matrix)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 1000, 3)),
p_mito = function(x) runif(x, 0, 1)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(1, 0.1),
zero_inflation = 0.0,
neg_binom_size = 2,
seed = 1234)
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 1000, 2.5)),
p_mito = function(x) runif(x, 0, 1)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(1, 0.1),
zero_inflation = 0.0,
neg_binom_size = 2,
seed = 1234)
simulated_data
simulated_data <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(total_umis = function(x) log(rnegbin(x, 1000, 2.5)),
p_mito = function(x) runif(x, 0, 1)),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(-1, 0.1),
zero_inflation = 0.0,
neg_binom_size = 2,
seed = 1234)
simulated_data
require(usethis)
use_vignette("simulations")
library(sceptre)
data("example_data")
example_data
example_data <- mutate(example_data, gRNA_indic = grna_group_indicator, grna_group_indicator = NULL)
example_data
library(sceptre)
data("example_data")
library(sceptre)
library(sceptre)
example_data
rename(example_data, gRNA_indic = grna_group_indicator)
rename(example_data, gRNA_indic = grna_group_indicator, p_mito = percent.mito)
example_data <- rename(example_data, gRNA_indic = grna_group_indicator, p_mito = percent.mito)
usethis::use_data(example_data, example_data)
usethis::use_data(example_data, example_data, overwrite = TRUE)
library(sceptre)
data("example_data")
example_data
example_data <- rename(example_data, gRNA_indic = grna_group_indicator, p_mito = percent.mito)
example_data
usethis::use_data(example_data, example_data)
data("example_data")
example_data
library(sceptre)
data("example_data")
head(example_data)
library(sceptre)
data("example_data")
head(example_data)
ex_data <- rename(example_data, gRNA_indic = grna_group_indicator, p_mito = percent.mito)
ex_data
colnames(ex_data)
ex_data
require(usethis)
use_data(ex_data, ex_data)
library(sceptre)
data("ex_data")
data("ex_data.rda")
data("example_data")
head(example_data)
library(sceptre)
data("example_data")
example_data <- rename(example_data, gRNA_indic = grna_group_indicator, p_mito = percent.mito)
head(example_data)
covariate_matrix <- summarize(example_data,
p_mito = p_mito,
prep_batch = factor(prep_batch),
lg_total_umis = log(total_umis),
lg_guide_count = log(guide_count),
lg_gene_count = log(gene_count))
library(sceptre)
data("example_data")
example_data <- rename(example_data, gRNA_indic = grna_group_indicator, p_mito = percent.mito)
head(example_data)
expressions <- example_data$gene_exp
expressions[1:5]
gRNA_indicators <- example_data$gRNA_indic
gRNA_indicators[1:5]
covariate_matrix <- summarize(example_data,
p_mito = p_mito,
prep_batch = factor(prep_batch),
lg_total_umis = log(total_umis),
lg_guide_count = log(guide_count),
lg_gene_count = log(gene_count))
head(covariate_matrix)
library(sceptre)
data("example_data")
example_data <- rename(example_data, gRNA_indic = grna_group_indicator, p_mito = percent.mito)
head(example_data)
expressions <- example_data$gene_exp
expressions[1:5]
gRNA_indicators <- example_data$gRNA_indic
gRNA_indicators[1:5]
covariate_matrix <- summarize(example_data,
p_mito = p_mito,
prep_batch = factor(prep_batch),
lg_total_umis = log(total_umis),
lg_guide_count = log(guide_count),
lg_gene_count = log(gene_count))
head(covariate_matrix)
p_value <- run_sceptre_gRNA_gene_pair(expressions = expressions,
gRNA_indicators = gRNA_indicators,
covariate_matrix = covariate_matrix,
seed = 1234)
p_value
library(sceptre)
data("example_data")
example_data <- rename(example_data, gRNA_indic = grna_group_indicator, p_mito = percent.mito)
example_data
