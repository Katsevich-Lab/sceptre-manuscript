covariate_model_matrix <- summarize(covariate_matrix, batch = paste0("batch_", batch) %>% factor, log_n_umis = log(n_umis))
head(covariate_model_matrix)
covariate_model_matrix$batch
write.fst(x = covariate_model_matrix, path = paste0(processed_dir, "/covariate_model_matrix.fst"))
packs <- c("rhdf5", "stringr", "openxlsx", "ravel")
library(devtools)
install_github(repo="Timothy-Barry/ravel")
installed.packages()
rownames(installed.packages())
my_packs <- rownames(installed.packages())
my_packs
rep("CRAN", 8)
data.frame(packages = packages, locs = locs)
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "ravel", "rhdf5")
locs <- c(rep("CRAN", 8), "Bioc", "github")
data.frame(packages = packages, locs = locs)
data.frame(package = packages, loc = locs)
df <- data.frame(package = packages, loc = locs)
github_repo <- c( rep(NA, 9), "Timothy-Barry/ravel")
github_repo
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo)
df
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "ravel", "rhdf5", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo
github_repo_subdir <- c(rep(NA, 10), "sceptre")
github_repo_subdir
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
i <- 1
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
my_packs <- rownames(installed.packages())
df[i, "package"]
curr_package <- df[i, "package"]
curr_package
curr_package %in% my_packs
curr_package
curr_loc <- df[i, "loc"]
curr_loc
if (curr_loc == "CRAN")  {
install.packages(curr_package)
}
!requireNamespace("BiocManager", quietly = TRUE)
"BiocManager" %in% my_packs
if (!("BiocManager" %in% my_packs)) install.packages("BiocManager")
curr_loc
i <- 10
curr_package <- df[i, "package"]
curr_loc <- df[i, "loc"]
curr_loc
dir
df[i,]
git_dir <- df[i, "github_repo"]
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
git_dir
git_subdir
if (!("devtools" %in% my_packs)) install.packages("devtools")
"devtools" %in% my_packs
library(BiocManager)
git_subdir
git_dir
install_github(repo = git_dir, subdir = git_subdir)
library(devtools)
install_github(repo = git_dir, subdir = git_subdir)
?install_github
git_subdir
verify_all_packages_available <- function(df) {
my_packs <- rownames(installed.packages())
for (i in 1:nrow(df)) {
curr_package <- df[i, "package"]
if(!(curr_package %in% my_packs)) {
curr_loc <- df[i, "loc"]
if (curr_loc == "CRAN")  {
install.packages(curr_package)
} else if (curr_loc == "Bioc") {
if (!("BiocManager" %in% my_packs)) install.packages("BiocManager")
library(BiocManager)
BiocManager::install(curr_package)
} else if (curr_loc == "github") {
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
if (!("devtools" %in% my_packs)) install.packages("devtools")
library(devtools)
if (is.na(git_subdir)) install_github(repo = git_dir) else install_github(repo = git_dir, subdir = git_subdir)
}
}
}
}
verify_all_packages_available <- function(df) {
my_packs <- rownames(installed.packages())
for (i in 1:nrow(df)) {
curr_package <- df[i, "package"]
cat(paste("Checking", curr_package))
if(!(curr_package %in% my_packs)) {
curr_loc <- df[i, "loc"]
if (curr_loc == "CRAN")  {
install.packages(curr_package)
} else if (curr_loc == "Bioc") {
if (!("BiocManager" %in% my_packs)) install.packages("BiocManager")
library(BiocManager)
BiocManager::install(curr_package)
} else if (curr_loc == "github") {
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
if (!("devtools" %in% my_packs)) install.packages("devtools")
library(devtools)
if (is.na(git_subdir)) install_github(repo = git_dir) else install_github(repo = git_dir, subdir = git_subdir)
}
}
}
}
verify_all_packages_available(df)
verify_all_packages_available <- function(df) {
my_packs <- rownames(installed.packages())
for (i in 1:nrow(df)) {
curr_package <- df[i, "package"]
cat(paste("Checking", curr_package, "\n"))
if(!(curr_package %in% my_packs)) {
curr_loc <- df[i, "loc"]
if (curr_loc == "CRAN")  {
install.packages(curr_package)
} else if (curr_loc == "Bioc") {
if (!("BiocManager" %in% my_packs)) install.packages("BiocManager")
library(BiocManager)
BiocManager::install(curr_package)
} else if (curr_loc == "github") {
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
if (!("devtools" %in% my_packs)) install.packages("devtools")
library(devtools)
if (is.na(git_subdir)) install_github(repo = git_dir) else install_github(repo = git_dir, subdir = git_subdir)
}
}
}
}
verify_all_packages_available(df)
df
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "ravel", "rhdf5", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
# This script verifies that all packages required for the Xie analysis are available.
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
code_dir
source(paste0(code_dir, "/utilities/verify_all_packages_available.R"))
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
# This script verifies that all packages required for the Xie analysis are available.
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/utilities/verify_all_packages_available.R"))
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
verify_all_packages_available(df)
ls
print(code_dir)
args[1]
# This script verifies that all packages required for the Xie analysis are available.
args <- commandArgs(trailingOnly = TRUE)
args
args[1]
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
packages
locs
length(packages)
length(locs)
length(github_repo)
length(github_repo_subdir)
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
df
verify_all_packages_available
i <- 10
my_packs <- rownames(installed.packages())
curr_package <- df[i, "package"]
curr_package
cat(paste("Checking", curr_package, "\n"))
curr_loc <- df[i, "loc"]
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
if (!("devtools" %in% my_packs)) install.packages("devtools")
library(devtools)
install_github
if (is.na(git_subdir)) install_github(repo = git_dir) else install_github(repo = git_dir, subdir = git_subdir)
git_subdir
git_dir
i
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
git_dir
git_subdir
install_github
git_subdir
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/utilities/verify_all_packages_available.R"))
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
find.package("sceptre")
# This script verifies that all packages required for the Xie analysis are available.
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/utilities/verify_all_packages_available.R"))
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
verify_all_packages_available(df)
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df[1,"package"]
df[[1,"package"]]
require(sceptre)
create_parent_directories
create_parent_directories
s <- "data/xie/raw"
str_split(string = s, pattern = "/")
unlist(str_split(string = s, pattern = "/"))
dirs <- unlist(str_split(string = s, pattern = "/"))
1:length(dirs)
map(.x = 1:length(dirs), .f = function(i) {
paste0(dirs[1:i], collapse = "/")
})
out <- map(.x = 1:length(dirs), .f = function(i) {
paste0(dirs[1:i], collapse = "/")
})
unlist(out)
create_parent_directories("data/xie/raw")
create_parent_directories <- function(s) {
dirs <- unlist(str_split(string = s, pattern = "/"))
out <- map(.x = 1:length(dirs), .f = function(i) {
paste0(dirs[1:i], collapse = "/")
})
return(unlist(out))
}
create_parent_directories("data/xie/raw")
# Hardcode the directories to create.
sub_dirs <- c(create_parent_directories("data/xie/raw"), create_parent_directories("data/xie/precomp/gRNA"), "data/xie/precomp/gene", "data/xie/processed",
create_parent_directories("results/xie"), "figures", create_parent_directories("logs/xie")) %>% unique()
dirs_to_create <- paste0(offsite_dir, "/", sub_dirs)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
offsite_dir
dirs_to_create <- paste0(offsite_dir, "/", sub_dirs)
dirs_to_create
paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R")
paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
source(paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R")))
to_source <- paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
to_source <- paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
for (f_to_source in to_source) source(f_to_source)
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
# Hardcode the directories to create.
sub_dirs <- c(create_parent_directories("data/xie/raw"), create_parent_directories("data/xie/precomp/gRNA"), "data/xie/precomp/gene", "data/xie/processed",
create_parent_directories("results/xie"), "figures", create_parent_directories("logs/xie")) %>% unique()
dirs_to_create <- paste0(offsite_dir, "/", sub_dirs)
for (directory in dirs_to_create) {
if (!dir.exists(directory)) {
dir.create(directory)
}
}
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_gasp/file_paths_to_dirs.R"))
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
# Hardcode the directories to create.
sub_dirs <- c(create_parent_directories("data/gasperini/raw"), create_parent_directories("data/gasperini/precomp/gRNA"), "data/gasperini/precomp/gene", "data/gasperini/processed",
create_parent_directories("data/functional"), "data/functional/HIC", "data/functional/ChIP-seq", "data/functional/GeneHancer",
create_parent_directories("results/gasperini"), "results/simulations",
"figures", create_parent_directories("logs/gasperini")) %>% unique()
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
code_dir
to_source <- paste0(code_dir, c("/analysis_drivers_gasp/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
to_source
for (f_to_source in to_source) source(f_to_source)
code_dir
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
to_source <- paste0(code_dir, c("analysis_drivers_gasp/paths_to_dirs.R", "utilities/verify_all_packages_available.R"))
to_source
for (f_to_source in to_source) source(f_to_source)
to_source <- paste0(code_dir, c("analysis_drivers_gasp/file_paths_to_dirs.R", "utilities/verify_all_packages_available.R"))
for (f_to_source in to_source) source(f_to_source)
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
# Hardcode the directories to create.
sub_dirs <- c(create_parent_directories("data/gasperini/raw"), create_parent_directories("data/gasperini/precomp/gRNA"), "data/gasperini/precomp/gene", "data/gasperini/processed",
create_parent_directories("data/functional"), "data/functional/HIC", "data/functional/ChIP-seq", "data/functional/GeneHancer",
create_parent_directories("results/gasperini"), "results/simulations",
"figures", create_parent_directories("logs/gasperini")) %>% unique()
library(R.utils)
packages <- c("R.utils", "fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
?install.packages
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
code_dir
# Source the parameter file; file paths can be defined in terms of "offsite_dir"
param_file_rel <- if(is.na(args[3])) "/analysis_drivers_xie/sceptre_function_args.R" else args[3]
param_file_rel
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
# Source the parameter file; file paths can be defined in terms of "offsite_dir"
param_file_rel <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
code_dir
param_file_rel
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
# Source the parameter file; file paths can be defined in terms of "offsite_dir"
param_file_rel <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
code_dir
offsite_dir
param_file_rel
code_dir
offsite_dir
param_file_rel
param_file_rel
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
to_source <- paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
to_source
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
# Source the parameter file; file paths can be defined in terms of "offsite_dir"
param_file_rel <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
code_Dir
code_dir
offsite_dir
param_file_rel
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[3]
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[3]
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
paste0(code_dir, param_file)
paste0(code_dir, "/",param_file)
paste0(code_dir, "/",param_file)
args <- commandArgs(trailingOnly = TRUE)
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/",param_file))
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
cell_subset <- NULL
seed <- 1234
B <- 500
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst")) %>% slice(1:10)
gRNA_gene_pairs
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
dicts <- create_and_store_dictionaries(gRNA_gene_pairs = gRNA_gene_pairs, gene_precomp_dir = gene_precomp_dir, gRNA_precomp_dir = gRNA_precomp_dir, results_dir = results_dir, pod_sizes = )
dicts <- create_and_store_dictionaries(gRNA_gene_pairs = gRNA_gene_pairs, gene_precomp_dir = gene_precomp_dir, gRNA_precomp_dir = gRNA_precomp_dir, results_dir = results_dir, pod_sizes = pod_sizes)
dicts
paste(dicts$n_pods[["gene"]], dicts$n_pods[["gRNA"]], dicts$n_pods[["pairs"]]) %>% cat
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
pod_id <- 1
pod_id
gene_precomp_dir
cell_gene_expression_matrix
ordered_gene_ids
covariate_matrix
cell_subset
select_sizes
select_sizes <- NULL
select_sizes
log_dir
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
collect_results(results_dir = results_dir, save_to_disk = TRUE)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[3]
offsite_dir
param_file
# source the function arguments
source(param_file)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(param_file)
