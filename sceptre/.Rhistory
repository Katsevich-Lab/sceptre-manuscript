#'
#' @param Xm
#' @param Ym
#' @param lambda
#' @param npermutation
#'
#' @return
#' @export
#'
#' @examples
getsolvedmatrix_with_permutation_cell_label <- function(Xm, Ym, lambda = 0.01, npermutation = 1000) {
Amat_ret = getsolvedmatrix(Xm, Ym, lambda = lambda)
Amat_ret_higher = matrix(rep(0, ncol(Amat_ret) * nrow(Amat_ret)), nrow = nrow(Amat_ret))
rownames(Amat_ret_higher) = rownames(Amat_ret)
colnames(Amat_ret_higher) = colnames(Amat_ret)
# permute N times randomly shuffle cell labels
for (npm in 1:npermutation) {
if (npm%%100 == 0) {
message(paste("Permutation:", npm, "/", npermutation, "..."))
}
cells_shu = sample(rownames(Ym), nrow(Ym))
Xm_s = Xm[cells_shu, ]
Ym_s = Ym  # [cells_shu,]
rownames(Ym_s) = cells_shu
Amat_random = getsolvedmatrix(Xm_s, Ym_s, lambda = lambda)
Amat_ret_higher = Amat_ret_higher + (abs(Amat_random) > abs(Amat_ret)) * 1
# browser()
}
Amat_ret_higher = Amat_ret_higher/npermutation
return(list(Amat_ret, Amat_ret_higher))
}
#' Get solved matrix
#'
#' @param Xm
#' @param Ym
#' @param lambda
#'
#' @return
#' @export
#'
#' @examples
getsolvedmatrix <- function(Xm, Ym, lambda = 0.01) {
# Amat=solve(Xmat,Ymat) # solve AX=B, or Xmat * A =Ymat
TMmat_g = (t(Xm) %*% Xm) + lambda * diag(ncol(Xm))
Amat_g = solve(TMmat_g) %*% t(Xm) %*% Ym
return(Amat_g)
}
#' Get solved matrix
#'
#' @param Xm
#' @param Ym
#' @param lambda
#'
#' @return
#' @export
#'
#' @examples
getsolvedmatrix <- function(Xm, Ym, lambda = 0.01) {
# Amat=solve(Xmat,Ymat) # solve AX=B, or Xmat * A =Ymat
TMmat_g = (t(Xm) %*% Xm) + lambda * diag(ncol(Xm))
Amat_g = solve(TMmat_g) %*% t(Xm) %*% Ym
return(Amat_g)
}
ind_matrix <- frame2indmatrix(bc_dox, targetobj)
ind_matrix
message(paste("Index matrix dimension:", nrow(ind_matrix),
",", ncol(ind_matrix)))
# SELECT_GENE <- NULL
SELECT_GENE <- c("STK11", "CDH1")
GENE_FRAC <- 0.01
targetobj
mat_for_single_reg = single_gene_matrix_regression(targetobj,
selected_genes_list = SELECT_GENE, ngctrlgene = ngctrlgenelist,
indmatrix = ind_matrix, high_gene_frac = GENE_FRAC)
Xmat = mat_for_single_reg[[1]] # The gRNA indicator matrix;
Ymat = mat_for_single_reg[[2]] # %>% t (transpose needed for 1 gene)
Xmat
Ymat
Xmat
ngctrlgenelist
mat_for_single_reg = single_gene_matrix_regression(targetobj,
selected_genes_list = SELECT_GENE, ngctrlgene = NULL,
indmatrix = ind_matrix, high_gene_frac = GENE_FRAC)
Xmat
Ymat
LAMBDA <- 0.01
Amat_pm_lst = getsolvedmatrix_with_permutation_cell_label(Xmat, Ymat, lambda = LAMBDA, npermutation = n_permutation)
Amat = Amat_pm_lst[[1]]
Amat_pval = Amat_pm_lst[[2]]
Amat_pval
Xmat
colnames(Xmat)
colnames(Xmat) != "NegCtrl"
Xmat[colnames(Xmat) != "NegCtrl",]
Xmat <- Xmat[,colnames(Xmat) != "NegCtrl"]
Ymat = mat_for_single_reg[[2]] # %>% t (transpose needed for 1 gene)
LAMBDA <- 0.01
Amat_pm_lst = getsolvedmatrix_with_permutation_cell_label(Xmat, Ymat, lambda = LAMBDA, npermutation = n_permutation)
Amat = Amat_pm_lst[[1]]
Amat_pval = Amat_pm_lst[[2]]
Amat_pval
# path to store raw data
# raw_data_dir = sprintf("%s/data/raw")
raw_data_dir <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw"
# URL of data
remote = "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE120861&format=file&file="
# Gasperini et al results
all_deg_results_filename = "GSE120861_all_deg_results.at_scale.txt"
# names of genes
genes_filename = "GSE120861_at_scale_screen.genes.txt"
# names of cells
cells_filename = "GSE120861_at_scale_screen.cells.txt"
# "reference cells" used by Gasperini et al for computational purposes
reference_cells_filename = "GSE120861_50k_reference_cells.rds"
# all (gRNA, gene) pairs
gRNAgroup_pair_table_filename = "GSE120861_gene_gRNAgroup_pair_table.at_scale.txt"
# list of gRNA groups used
gRNA_groups_filename = "GSE120861_grna_groups.at_scale.txt"
# Monocle Cell Data Set object with all data
cds_filename = "GSE120861_at_scale_screen.cds.rds"
# Expression data
expression_filename = "GSE120861_at_scale_screen.exprs.mtx"
# list of files to download
filenames = c(
all_deg_results_filename,
genes_filename,
cells_filename,
reference_cells_filename,
cds_filename,
expression_filename,
gRNAgroup_pair_table_filename,
gRNA_groups_filename
)
filenames
filename <- filenames[1]
filename
filename <- filenames[2]
cat(sprintf("Downloading %s...\n", filename))
sprintf("%s%s.gz", remote, filename)
sprintf("%s/CRISPR/%s.gz", raw_data_dir, filename)
cat(sprintf("Downloading %s...\n", filename))
download.file(sprintf("%s%s.gz", remote, filename), sprintf("%s/CRISPR/%s.gz", raw_data_dir, filename))
!file.exists(sprintf("%s/%s", raw_data_dir, filename))
raw_data_dir
path_to_mtx <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx"
path_to_mtx
header = read.table(path_to_mtx, nrows = 1, skip = 1, header=FALSE, fill=TRUE)
header
header = read.table(path_to_mtx, nrows = 1, skip = 1, header=FALSE, fill=TRUE)
n_genes <- header[1]
n_cells <- header[2]
n_genes
n_cells
dest_folder
dest_folder <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed"
dest_folder <- dest_folder <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed"
dest_folder
require(stringr)
str_split(string = path_to_mtx, pattern = "/")
gsub(pattern = "/[^/]*$", replacement = "", x = path_to_mtx)
path_to_mtx
grep(pattern = "/[^/]*$", x = path_to_mtx)
grepl(pattern = "/[^/]*$", x = path_to_mtx)
grep(pattern = "/[^/]*$", x = path_to_mtx)
path_to_mtx
grep(pattern = "/[^/]*$", x = path_to_mtx, value = TRUE)
grep(pattern = "[^/]+$", x = path_to_mtx, value = TRUE)
path_to_mtx
grep(pattern = "[^/]+$", x = path_to_mtx, value = TRUE)
path_to_mtx
grep(pattern = "([^\/]+$)", x = path_to_mtx, value = TRUE)
grep(pattern = "[^\/]+$", x = path_to_mtx, value = TRUE)
grep(pattern = "[^//]+$", x = path_to_mtx, value = TRUE)
grep(pattern = "[^/]+$", x = path_to_mtx, value = TRUE)
grepl(pattern = "[^/]+$", x = path_to_mtx, value = TRUE)
?grep
path_to_mtx
path_to_mtx
dest_folder
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header=FALSE, fill=TRUE)
n_genes <- header[1]
n_cells <- header[2]
path_to_mtx <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx"
dest_folder <- dest_folder <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/GSE120861_at_scale_screen.exprs.fbm"
path_to_mtx <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx"
dest_folder <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/GSE120861_at_scale_screen.exprs.fbm"
dest_folder
dest_folder
path_to_mtx
FBM
require(bigstatsr)
num_genes
n_genes <- header[1]
n_cells <- header[2]
expression_transpose_filename
path_to_dest
path_to_dest <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/GSE120861_at_scale_screen.exprs.fbm"
path_to_dest
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header=FALSE, fill=TRUE)
n_genes <- header[1]
n_cells <- header[2]
n_genes
n_cells
header[[1]]
n_genes <- header[[1]]
n_cells <- header[[2]]
n_genes
n_cells
?FBM
path_to_dest
expression_FBM_transpose <- FBM(n_genes, n_cells, type = "unsigned short",
backingfile = path_to_dest,
create_bk = TRUE)
expression_FBM_transpose
cat("Creating a file-backed matrix on disk.")
cat("Creating a file-backed matrix on disk. \n")
expression_FBM_transpose <- FBM(n_genes, n_cells, type = "unsigned short",
backingfile = path_to_dest,
create_bk = TRUE, is_read_only = TRUE)
chunk_size <- 1000000
chunk_size
?read_delim_chunked
readr
require(tidyverse)
?read_delim_chunked
chunk <- read.table(path_to_mtx, nrows = 10, skip = 2, header=FALSE, fill=TRUE)
chunk
class(chunk)
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header=FALSE, fill=TRUE)
chunk
chunk_size <- 1000000
chunk
chunk %>% pull(cell)
?read_delim_chunked
SideEffectChunkCallback$new(write_to_FBM)
write_to_FBM <- function(chunk, pos) {
cells_in_chunk = chunk %>% pull(cell) %>% unique() %>% sort()
print(sprintf("Processing cells %d to %d...", head(cells_in_chunk,1), tail(cells_in_chunk,1)))
for (cell in cells_in_chunk) {
expressions_per_cell = chunk %>% filter(cell == !!cell)
expression_FBM_transpose[expressions_per_cell %>% pull(gene),cell] = expressions_per_cell %>% pull(expression)
}
}
SideEffectChunkCallback$new(write_to_FBM)
SideEffectChunkCallback$new(write_to_FBM) %>% class()
chunk
colnames(chunk) <- c("gene", "cell", "expression")
chunk
chunk
cells_in_chunk = chunk %>% pull(cell) %>% unique() %>% sort()
cells_in_chunk
cells_in_chunk
chunk <- read.table(path_to_mtx, nrows = 10000, skip = 2, header=FALSE, fill=TRUE)
chunk
tail(chunj)
tail(chunk)
chunk
colnames(chunk) <- c("gene", "cell", "expression")
chunk
chunk
cells_in_chunk = chunk %>% pull(cell) %>% unique() %>% sort()
cells_in_chunk
paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)])
paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)], " of ", n_cells, ". \n")
cat(paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)], " of ", n_cells, ".\n"))
cell <- 1
cell
chunk %>% filter(cell == !!cell)
expressions_per_cell %>% pull(expression)
expressions_per_cell = chunk %>% filter(cell == !!cell)
expressions_per_cell %>% pull(expression)
expressions_per_cell %>% pull(gene)
cell
expressions_per_cell %>% pull(gene)
expressions_per_cell %>% pull(expression)
cell
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header=FALSE, fill=TRUE)
header
n_genes <- header[[1]]
n_cells <- header[[2]]
n_cells
cat("Creating a file-backed matrix on disk. \n")
expression_FBM_transpose <- FBM(n_genes, n_cells, type = "unsigned short",
backingfile = path_to_dest,
create_bk = TRUE, is_read_only = TRUE, init = 0)
cells_in_chunk
chunk %>% pull(cell) %>% unique() %>% sort()
chunk
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
cat(paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)], " of ", n_cells, ".\n"))
expressions_per_cell
chunk %>% filter(cell == !!cell)
expressions_per_cell <- chunk %>% filter(cell == !!cell)
expressions_per_cell
expressions_per_cell %>% pull(gene)
path_to_mtx <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx"
path_to_dest <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/GSE120861_at_scale_screen.exprs.fbm"
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header=FALSE, fill=TRUE)
n_genes <- header[[1]]
n_cells <- header[[2]]
n_genes
n_cells
cat("Creating a file-backed matrix on disk. \n")
expression_FBM <- FBM(n_cells, n_genes, type = "unsigned short",
backingfile = path_to_dest,
create_bk = TRUE, is_read_only = TRUE, init = 0)
expression_FBM <- FBM(n_cells, n_genes, type = "unsigned short",
backingfile = path_to_dest,
create_bk = TRUE, is_read_only = TRUE, init = 0)
expression_FBM[1,1]
expression_FBM[1,]
expression_FBM[,1]
expression_FBM$nrow
expression_FBM$ncol
expression_FBM[,1]
expression_FBM$ncol
expression_FBM[1,1:10] <- 1:10
expression_FBM
expression_FBM[,1]
expression_FBM[1:10,1]
expression_FBM[,1:10]
expression_FBM[1:10,1]
expressions_per_cell %>% pull(gene)
cell <- 1
expressions_per_cell = expression_data_chunk %>% filter(cell == !!cell)
expression_data_chunk
expression_FBM
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header = FALSE, fill = TRUE)
n_genes <- header[[1]]
path_to_mtx <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx"
path_to_dest <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/GSE120861_at_scale_screen.exprs.fbm"
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header = FALSE, fill = TRUE)
n_genes <- header[[1]]
n_cells <- header[[2]]
header
n_genes
n_cells
cat("Creating a file-backed matrix on disk. \n")
expression_FBM <- FBM(n_cells, n_genes, type = "unsigned short",
backingfile = path_to_dest,
create_bk = TRUE, is_read_only = FALSE, init = 0)
GSE120861_at_scale_screen.exprs.fbm.bk
chunk
chunk <- read.table(path_to_mtx, nrows = 1000000, skip = 1, header = FALSE, fill = TRUE)
chunk
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
colnames(chunk) <- c("gene", "cell", "expression")
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
cat(paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)], " of ", n_cells, ".\n"))
cells_in_chunk
chunk
chunk <- read.table(path_to_mtx, nrows = 1000000, skip = 2, header = FALSE, fill = TRUE)
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
cat(paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)], " of ", n_cells, ".\n"))
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
colnames(chunk) <- c("gene", "cell", "expression")
head(chunk)
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
cat(paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)], " of ", n_cells, ".\n"))
cells
chunk
tail(chunk)
order(cell$chunk)
chunk$cell
chunk$cell %>% order
expressions_per_cell <- chunk %>% filter(cell == !!cell)
cell <- 1
expressions_per_cell <- chunk %>% filter(cell == !!cell)
expressions_per_cell
head(expressions_per_cell)
cell
expression_FBM[cell, expressions_per_cell %>% pull(gene)] <- expressions_per_cell %>% pull(expression)
expression_FBM
expressions_per_cell %>% pull(gene)
expression_FBM[1,1:!0]
expression_FBM[1,1:10]
expression_FBM[1:10, 1]
expression_FBM[1:10, 1]
expression_FBM[1,1:10]
expression_FBM[1,1:10]
expression_FBM[1, 5:100]
expression_FBM[5:100, 1]
expression_FBM[5:100, 1]
expression_FBM[5:100, 1]
?big_transpose
path_to_mtx <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx"
path_to_dest <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/GSE120861_at_scale_screen.exprs.fbm"
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header = FALSE, fill = TRUE)
n_genes <- header[[1]]
n_cells <- header[[2]]
cat("Creating a file-backed matrix on disk. \n")
expression_FBM_t <- FBM(n_genes, n_cells, type = "unsigned short",
backingfile = path_to_dest,
create_bk = TRUE, is_read_only = FALSE, init = 0)
expression_FBM_t
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
chunk <- read.table(path_to_mtx, nrows = 100000, skip = 2, header = FALSE, fill = TRUE)
chunk
colnames(chunk) <- c("gene", "cell", "expression")
chunk
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
cat(paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)], " of ", n_cells, ".\n"))
cell <- 1
expressions_per_cell <- chunk %>% filter(cell == !!cell)
expression_FBM_t[expressions_per_cell %>% pull(gene), cell] <- expressions_per_cell %>% pull(expression)
cell
expression_FBM_t
write_to_FBM <- function(chunk, pos) {
cells_in_chunk <- chunk %>% pull(cell) %>% unique() %>% sort()
cat(paste0("Processing cells ", cells_in_chunk[1], "-", cells_in_chunk[length(cells_in_chunk)], " of ", n_cells, ".\n"))
for (cell in cells_in_chunk) {
expressions_per_cell <- chunk %>% filter(cell == !!cell)
expression_FBM_t[expressions_per_cell %>% pull(gene), cell] <- expressions_per_cell %>% pull(expression)
}
}
read_delim_chunked(file = path_to_mtx, delim = " ",
callback = SideEffectChunkCallback$new(write_to_FBM),
skip = 2,
chunk_size = 1000000,
col_names = c("gene", "cell", "expression"),
col_types = "iii",
progress = FALSE)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
# 1. Create a file-backed matrix for the expression matrix
path_to_mtx <- paste0(offsite_dir, "/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx")
path_to_mtx
file.exists(path_to_mtx)
"/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed"
# 1. Create a file-backed matrix for the expression matrix
path_to_mtx <- paste0(offsite_dir, "/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx")
dest_folder <- paste0(offsite_dir, "/data/gasperini/processed")
dir.exists(dest_folder)
file.exists(path_to_mtx)
require(bigstatsr)
library(sceptre)
library(sceptre)
library(sceptre)
library(sceptre)
# 1. Create a file-backed matrix for the .mtx expression matrix
path_to_mtx <- paste0(offsite_dir, "/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx")
dest_folder <- paste0(offsite_dir, "/data/gasperini/processed")
create_fbm_from_mtx(path_to_mtx, dest_folder)
library(sceptre)
# 1. Create a file-backed matrix for the .mtx expression matrix
path_to_mtx <- paste0(offsite_dir, "/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx")
dest_folder <- paste0(offsite_dir, "/data/gasperini/processed")
create_fbm_from_mtx(path_to_mtx, dest_folder)
file.exists(c(fbms))
fbms <- create_fbm_from_mtx(path_to_mtx, dest_folder)
file.exists(c(fbms))
c(fbms)
backingfile
library(sceptre)
# 1. Create a file-backed matrix for the .mtx expression matrix
path_to_mtx <- paste0(offsite_dir, "/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx")
dest_folder <- paste0(offsite_dir, "/data/gasperini/processed")
fbms <- create_fbm_from_mtx(path_to_mtx, dest_folder)
fbms
file.exists(c(fbms))
all(file.exists(c(fbms)))
(!all(file.exists(c(fbms))))
if (!all(file.exists(c(fbms)))) stop("file-backed matrices not on disk.")
?big_apply
6598 + 18
path_to_rds <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.cds.rds"
"/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed"
path_to_rds <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.cds.rds"
dest_folder <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed"
df <- readRDS("/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.cds.rds")
install.packages("monocole")
require(sceptre)
df <- readRDS("/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.cds.rds")
BiocManager::install("monocle")
require(monocle)
df <- readRDS("/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.cds.rds")
path_to_mtx <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/raw/GSE120861_at_scale_screen.exprs.mtx"
dest_folder <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed"
if (is.null(dest_folder)) {
backingfile_t <- gsub(".mtx", "_t", path_to_mtx)
backingfile <- gsub(".mtx", "", path_to_mtx)
} else {
file_name <- tail(strsplit(path_to_mtx, "/")[[1]], 1)
file_name <- gsub(".mtx", "", file_name)
backingfile_t <- paste0(dest_folder, "/", file_name, "_t")
backingfile <- paste0(dest_folder, "/", file_name)
}
file_name
file_name
backingfile_t
backingfile
header <- read.table(path_to_mtx, nrows = 1, skip = 1, header = FALSE, fill = TRUE)
n_genes <- header[[1]]
n_cells <- header[[2]]
n_genes
n_cells
expression_FBM_t <- FBM(n_genes, n_cells, type = "unsigned short",
backingfile = backingfile_t,
create_bk = FALSE, is_read_only = TRUE)
require(sceptre)
expression_FBM_t <- FBM(n_genes, n_cells, type = "unsigned short",
backingfile = backingfile_t,
create_bk = FALSE, is_read_only = TRUE)
expression_FBM_t[1:10,10]
expression_FBM_t[1:10,100]
expression_FBM_t[1:100,100]
expression_FBM_t_metadata <- list(nrow = n_genes, ncol = n_cells, type = "unsigned short", backingfile = backingfile_t)
expression_FBM_t_metadata
expression_FBM_metadata <- list(nrow = n_cells, ncol = n_genes, type = "unsigned short", backingfile = backingfile)
expression_FBM_metadata
require(fst)
3000/100
6000/100
