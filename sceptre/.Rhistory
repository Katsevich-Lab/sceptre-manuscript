covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
u
out <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indicators, gRNA_precomp = gRNA_precomp, gene_precomp = gene_precomp, B = B)
out
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
if (is.null(gene_precomp)) gene_precomp <- run_gene_precomputation(expressions, covariate_matrix)
out <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indicators, gRNA_precomp = gRNA_precomp, gene_precomp = gene_precomp, B = B)
out
library(sceptre)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
run_sceptre_using_precomp
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gRNA_precomp = NULL, gene_precomp = NULL, B = 200)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix)
out <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indicators, gRNA_precomp = gRNA_precomp, gene_precomp = gene_precomp, B = B)
library(sceptre)
?run_sceptre_using_precomp
require(Seurat)
SCTransform
out <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indicators, gRNA_precomp = gRNA_precomp, gene_precomp = gene_precomp, B = B)
dispersion <- gene_precomp$dispersion
offsets <- gene_precomp$offsets
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(dispersion), offset = offsets[gRNA_indicators == 1])
t_star <- coefficients(summary(fit_star))["(Intercept)", "z value"]
t_star
dispersion <- gene_precomp$dispersion
offsets <- gene_precomp$offsets
dispersion
offsets
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(dispersion), offset = offsets[gRNA_indicators == 1])
t_star <- coefficients(summary(fit_star))["(Intercept)", "z value"]
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
if (is.null(gene_precomp)) gene_precomp <- run_gene_precomputation(expressions, covariate_matrix)
gRNA_precomp
gene_precomp
fit_model_gene <- glm.nb(expressions ~ ., data = covariate_matrix)
dispersion <- fit_model_gene$theta
offsets <- log(fit_model_gene$fitted.values)
offsets
fit_model_gene$fitted.values
fit_model_gene$fitted.values %>% as.numeric()
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
dispersion <- theta.ml(expressions, pois_fit$fitted.values)[1]
nb_fit <- vglm(formula = expressions ~ ., family = negbinomial.size(dispersion), data = covariate_matrix)
offsets <- log(nb_fit$fitted.values)
offsets
nb_fit
nb_fit$fitted.values
nb_fit
fitted(nb_fit)
head(offsets)
offsets <- log(as.numeric(fit_model_gene$fitted.values))
head(offsets)
offsets <- log(nb_fit$fitted.values)
head(nb_fit$fitted.values)
nb_fit
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
dispersion <- theta.ml(expressions, pois_fit$fitted.values)[1]
nb_fit <- vglm(formula = expressions ~ ., family = negbinomial.size(dispersion), data = covariate_matrix)
nb_fit
nb_fit@fitted.values
nb_fit@fitted.values[,1]
fitted(nb_fit)[,1]
as.numeric(fitted(nb_fit)[,1])
as.numeric(fitted(nb_fit)[,1]) %>% head
log(as.numeric(fitted(nb_fit)[,1])) %>% head
head(offsets)
log(as.numeric(nb_fit$fitted.values))
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
dispersion <- theta.ml(expressions, pois_fit$fitted.values)[1]
nb_fit <- vglm(formula = expressions ~ ., family = negbinomial.size(dispersion), data = covariate_matrix)
offsets <- log(as.numeric(fitted(nb_fit)))
offsets
offsets <- log(as.numeric(fit_model_gene$fitted.values))
offsets
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
fitted(fit_model_grna)
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
out <- as.numeric(fitted(fit_model_grna))
out
library(sceptre)
run_sceptre_gRNA_gene_pair
require(crisprscreen)
?run_sceptre_gRNA_gene_pair
?run_sceptre_gRNA_gene_pair
require(sceptre)
?run_sceptre_gRNA_gene_pair
require(sceptre)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
run_sceptre_using_precomp <- function(expressions, gRNA_indicators, gRNA_precomp, gene_precomp, B) {
dispersion <- gene_precomp$dispersion
offsets <- gene_precomp$offsets
print("point 1")
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(dispersion), offset = offsets[gRNA_indicators == 1])
t_star <- coefficients(summary(fit_star))["(Intercept)", "z value"]
# resample B times
t_nulls <- sapply(1:B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", B, "\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(dispersion), offset = offsets[gRNA_indicators_null == 1])
coefficients(summary(fit_null))["(Intercept)", "z value"]
})
# Fit a skew-t distribution and obtain a p-value
p_value_out <- NA
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA))
if (class(skew_t_fit) == "selm") { # If the fit worked,
dp <- skew_t_fit@param$dp # then extract the parameters.
if (!any(is.na(dp))) { # If all the fitted parameters are numbers,
p_value_out <- pst(x = t_star, dp = dp) # then compute the skew t-based p-value.
}
}
if (is.na(p_value_out)) { # If the skew-t procedure failed,
p_value_out <- mean(c(-Inf, t_nulls) <= t_star) # then return the empirical p-value.
}
return(p_value_out)
}
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gRNA_precomp = NULL; gene_precomp = NULL
B = 500
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
if (is.null(gene_precomp)) gene_precomp <- run_gene_precomputation(expressions, covariate_matrix)
gRNA_precomp
gene_precomp
out <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indicators, gRNA_precomp = gRNA_precomp, gene_precomp = gene_precomp, B = B)
cat("point 1")
library(sceptre)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
print( paste0("expressions: ", head(expressions)) )
print( paste0("expressions: "), head(expressions) )
print(paste0("expressions: ", head(expressions)))
print(paste0("expressions: ", head(expressions), collapse = T))
print(paste0("expressions: ", head(expressions), collapse = ","))
print("expressions"); print(expressions[1:5])
print("gRNA_indicators"); print(gRNA_indicators[1:5])
print("dispersion"); print(dispersion)
dispersion <- gene_precomp$dispersion
print("offsets"); print(offsets[1:5])
library(sceptre)
require(sceptre)
?run_sceptre_using_precomp
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
library(sceptre)
im_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
out <- as.numeric(fitted(fit_model_grna))
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
dispersion <- theta.ml(expressions, pois_fit$fitted.values)[1]
nb_fit <- vglm(formula = expressions ~ ., family = negbinomial.size(dispersion), data = covariate_matrix)
nb_fit
summaryvglm(nb_fit)
summaryvglm(nb_fit)$Coefficients
summaryvglm(nb_fit)@Coefficients
s <- summaryvglm(nb_fit)
s
class(s)
str(s)
s <- summaryvglm(nb_fit)
s
s@df
s@predictors
s@coefficients
nb_fit
coef.vlm(nb_fit)
coef(nb_fit)
Coefficients(nb_fit)
summary.rrvglm(git)
summary.rrvglm(nb_fit)
summary(nb_fit)
summary(nb_Fit)
summary(nb_fit)
s <- summary(nb_fit)
s
s@correlation
s@sigma
s@effects
s@coef3
s@coef4lrt0
s@coef4score0
s@coef3
s@coef3["(Intercept)", "z value"]
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix)
print("point 1")
dispersion <- gene_precomp$dispersion
print("point 2")
offsets <- gene_precomp$offsets
print("point 3")
print("expressions"); print(expressions[1:5])
print("gRNA_indicators"); print(gRNA_indicators[1:5])
print("dispersion"); print(dispersion)
print("offsets"); print(offsets[1:5])
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(dispersion), offset = offsets[gRNA_indicators == 1])
print("fit"); print(fit_star)
summary(fit_star)@coef3["(Intercept)", "z value"]
t_star <- summary(fit_star)@coef3["(Intercept)", "z value"]
summary(fit_star)
t_star
library(sceptre)
require(sceptre)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
library(sceptre)
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
install.packages("VGAM")
install.packages("VGAM")
install.packages("VGAM")
library(sceptre)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
library(sceptre)
sim_dat
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix)
out <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indicators, gRNA_precomp = gRNA_precomp, gene_precomp = gene_precomp, B = B)
B = 500
out <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indicators, gRNA_precomp = gRNA_precomp, gene_precomp = gene_precomp, B = B)
out
dispersion <- gene_precomp$dispersion
offsets <- gene_precomp$offsets
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(dispersion), offset = offsets[gRNA_indicators == 1])
fit_star
summary(fit_star)
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
t_star
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
cat(paste0("Replicate ", i))
i <- 1
cat(paste0("Replicate ", i))
n_rep <- 100
res <- sapply(1:n_rep, function(i) {
cat(paste0("Replicate ", i))
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
})
require(crisprscreen)
n_rep <- 100
res <- sapply(1:n_rep, function(i) {
cat(paste0("Replicate ", i, "\n"))
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
})
# simulate data
res
hist(res)
hist(res, breaks = 20)
hist(res)
qqplot(runif, res)
qqplot(runif(100), res)
abline(a = 0, b = 1, col = "red")
punif
punif(0.4)
ks.test(x = res, y = punif)
?ks.test
res
mean(res < 0.05)
mean(res <= 0.05)
# simulate data
saveRDS(res)
# simulate data
saveRDS(res, "null_p_vals.rds")
# simulate data
qqplot(runif(1000), res)
# simulate data
qqplot(res, runif(1000))
# simulate data
qqplot(res, runif(1000), pch = 19)
# simulate data
qqplot(res, runif(1000), pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "red")
?qqplot
# simulate data
qqplot(res, runif(1000), pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "red")
hist(res)
res
hist(res, main = "p-values under null")
hist(res, main = "p-values under null", xlab = "")
# simulate data
qqplot(res, runif(1000), pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "red")
ks.test(res, punif)
library(stringr, quietly = TRUE)
args
args <- commandArgs(trailingOnly = TRUE)
base_directory <- args[1]
data_directory <- args[1]
data_directory
data_directory <- "/Volumes/tims_new_drive/work/sceptre_data"
data_res_directory <- "/Volumes/tims_new_drive/work/sceptre_data"
data_res_directory
data_res_sub_directories <- c("data", "data/raw", "data/raw/CRISPR", "data/raw/ChIP-seq",
"data/raw/HIC", "data/raw/GeneHancer", "data/processed", "precomp",
"results", "results/pvalues", "results/resampled_zvalues",
"figures")
data_res_sub_directories
data_res_directory
paste0(data_res_directory, c("/logs", "/data"))
data_res_directory
paste0(data_res_directory, c("/logs", "/data"))
paste0(data_res_directory, c("/logs", "/data", "/results"))
paste0(data_res_directory, c("/logs", "/data", "/results", "/precomp"))
paste0(data_res_directory, c("/logs", "/data", "/results", "/precomp"))
sub_dirs <- paste0(data_res_directory, c("/logs", "/data", "/results", "/precomp"))
sub_dirs
c(paste0("logs"), "hi" )
sub_dirs <- paste0(data_res_directory, c("/logs",
"/data",
"/results",
"/precomp"))
sub_dirs
data_res_directory
paste0("logs", c("hi", "me"))
paste0("logs", c("/hi", "/me"))
paste0("logs", c("/hi", "/me", ""))
paste0("logs", c("", "/hi", "/me"))
sub_dirs <- paste0(data_res_directory, c(paste0("logs", c("", "/hi", "/me")),
"/data",
"/results",
"/precomp"))
sub_dirs
sub_dirs <- paste0(data_res_directory, c(paste0("/logs", c("", "/hi", "/me")),
"/data",
"/results",
"/precomp"))
sub_dirs
c(paste0("/logs", c("", "/Gasperini", "/Xie")),
paste0("/data", c("", "/Gasperini", "/Xie"),
"/results",
"/precomp"))
sub_dirs <- paste0(data_res_directory, c(paste0("/logs", c("", "/Gasperini", "/Xie")),
paste0("/data", c("", "/Gasperini", "/Xie")),
"/results",
"/precomp")
)
sub_dirs
