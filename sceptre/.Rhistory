source(param_file)
run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
r <- run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
r <- run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
covariate_matrix <- covariate_matrix[cell_subset,]
which(ordered_gene_ids == "CUL2")
expressions <- cell_gene_expression_matrix[cell_subset, which(ordered_gene_ids == "CUL2") ]
expressions
run_gene_precomputation(expressions, covariate_matrix)
run_gene_precomputation(expressions, covariate_matrix, NULL)
run_gene_precomputation(expressions, covariate_matrix, NULL)
run_gene_precomputation
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
warnings()
hist(expressions)
table(expressions)
pois_fit <- glm(expressions ~ ., data = covariate_matrix,
family = poisson())
pois_fit
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values)[1]
?theta.ml
expressions
pois_fit$fitted.values
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 20)[1]
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 50)
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 50)
gene_precomp_size_out
theta.mm(expressions, pois_fit$fitted.values, limit = 50)
gene_precomp_size_out <- theta.md(expressions, pois_fit$fitted.values, limit = 50)
theta.ml(expressions, pois_fit$fitted.values, limit = 50)
.Machine$double.eps^0.25
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 50)
gene_precomp_size_out
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
gene_precomp_size_out
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
vglm(formula = expressions ~ ., data = covariate_matrix, family = negbinomial.size(Inf))
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
nb_fit <- vglm(formula = expressions ~ ., data = covariate_matrix, family = negbinomial.size(Inf))
pois_fit
nb_fit
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
gene_precomp_size_out
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 5)
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
nb_fit <- vglm(formula = expressions ~ ., data = covariate_matrix, family = negbinomial.size(70))
nb_fit
pois_fit$df.residual
pois_fit$df.residual
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
expressions
covariate_matrix
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
pois_fit
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
gene_precomp_size_out
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
tryCatch({
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(), warning = function(w) backup_2())
backup_2 <- function() {
}
tryCatch({
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(), warning = function(w) backup_2())
backup_2 <- function() {
x <- 10
}
tryCatch({
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(), warning = function(w) backup_2())
x
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
gene_precomp_size_out
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
gene_precomp_size_out
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 50)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
gene_precomp_size_out
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
gene_precomp_size_out
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
warnings()
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size_out), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(fit_nb))
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
result
fitted_vals <- result$fitted_vals; gene_precomp_size_out <- gene_precomp_size_out
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size_out), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(fit_nb))
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
result$gene_precomp_size_out
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 50)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size_out), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(fit_nb))
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
r <- run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
res <- tryCatch({
x <- 10
})
x
x <- res$x
res <- tryCatch({
x <- 10
})
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
r <- run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
r
library(sceptre)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
packs <- c("rhdf5", "stringr", "openxlsx", "ravel")
for (pack in packs) suppressPackageStartupMessages(library(pack, character.only = TRUE))
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
arl15_region <- filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
arl15_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region == arl15_region) %>% pull(spacer.sequence)
arl15_gRNA_spacer_seqs
# Next, we create a data frame containing UMI counts for these gRNAs
raw_fs <- list.files(raw_data_dir)
raw_fs
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
gRNA_files
res
gRNA_files
curr_file <- gRNA_files[1]
curr_file
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts)
head(curr_gRNA_count_matrix)
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
head(curr_gRNA_count_matrix)
curr_gRNA_count_matrix
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
cell_barcodes
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
curr_batch_gRNA_umi_counts
head(cell_barcodes)
curr_gRNA_count_matrix
curr_gRNA_count_matrix$total_umi_count
as.integer(curr_gRNA_count_matrix$total_umi_count)
as.integer(curr_gRNA_count_matrix$total_umi_count)
head(curr_batch_gRNA_umi_counts)
res <- map(.x = gRNA_files, .f = function(curr_file) {
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
list(cell_barcodes = cell_barcodes, umi_count_matrix = curr_batch_gRNA_umi_counts, total_umis = as.integer(curr_gRNA_count_matrix$total_umi_count))
})
res
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
head(cell_gRNA_umi_counts)
cell_gRNA_umi_counts
gRNA_count_matrix_thresh <- apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
gRNA_count_matrix <- map(.x = res, .f = function(x) x$umi_count_matrix) %>% reduce(.f = rbind)
gRNA_count_matrix_thresh <- apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
gRNA_indic <- apply(X = gRNA_count_matrix_thresh, MARGIN = 1, FUN = function(r) any(r))
head9gRNA_indic
head(gRNA_indic)
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix. Also, append the gRNA UMI count to the cell covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
head(cell_covariate_matrix)
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes) %>% gsub(pattern = "-1", replacement = "")
m <- match(x = cell_barcodes_to_check, table = cell_barcodes)
gRNA_indic_ordered <- gRNA_indic[m]
gRNA_indic
head(cell_covariate_matrix)
cell_barcodes_to_check
m <- match(x = cell_barcodes_to_check, table = cell_barcodes)
head(m)
gRNA_indic_ordered <- gRNA_indic[m]
cell_gRNA_umi_counts <- cell_gRNA_umi_counts[m]
head(cell_gRNA_umi_counts)
# Put into data frame form
gRNA_indic_matrix <- data.frame(arl15_enh = gRNA_indic_ordered)
write.fst(x = gRNA_indic_matrix, path = paste0(processed_dir, "/gRNA_indicator_matrix.fst"))
cell_covariate_matrix
head(cell_covariate_matrix)
# Append the gRNA UMI counts to the cell-specific covariate matrix.
cell_covariate_matrix <- mutate(cell_covariate_matrix, tot_gRNA_umis = cell_gRNA_umi_counts)
head(cell_covariate_matrix)
head(m)
cell_barcodes_to_check[m] %>% head()
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix. Also, append the gRNA UMI count to the cell covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes) %>% gsub(pattern = "-1", replacement = "")
head(cell_barcodes_to_check)
head(cell_barcodes)
m <- match(x = cell_barcodes_to_check, table = cell_barcodes)
cell_barcodes[m] %>% head()
head(cell_barcodes_to_check)
gRNA_indic_ordered <- gRNA_indic[m]
cell_gRNA_umi_counts <- cell_gRNA_umi_counts[m]
# Append the gRNA UMI counts to the cell-specific covariate matrix.
cell_covariate_matrix <- mutate(cell_covariate_matrix, tot_gRNA_umis = cell_gRNA_umi_counts)
head(cell_covariate_matrix)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
packs <- c("rhdf5", "stringr", "openxlsx", "ravel")
for (pack in packs) suppressPackageStartupMessages(library(pack, character.only = TRUE))
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
packs <- c("rhdf5", "stringr", "openxlsx", "ravel")
for (pack in packs) suppressPackageStartupMessages(library(pack, character.only = TRUE))
# Load the gRNA identification information; we extract information on all guides targeting ARL15.
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
arl15_region <- filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
arl15_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region == arl15_region) %>% pull(spacer.sequence)
# Next, we create a data frame containing UMI counts for these gRNAs
raw_fs <- list.files(raw_data_dir)
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
res <- map(.x = gRNA_files, .f = function(curr_file) {
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
list(cell_barcodes = cell_barcodes, umi_count_matrix = curr_batch_gRNA_umi_counts, total_umis = as.integer(curr_gRNA_count_matrix$total_umi_count))
})
gRNA_count_matrix <- map(.x = res, .f = function(x) x$umi_count_matrix) %>% reduce(.f = rbind)
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
# Now, we modify the gRNA UMI count matrix to threshold the data; we use the method proposed by xie;
gRNA_count_matrix_thresh <- apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
gRNA_indic <- apply(X = gRNA_count_matrix_thresh, MARGIN = 1, FUN = function(r) any(r))
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix. Also, append the gRNA UMI count to the cell covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes) %>% gsub(pattern = "-1", replacement = "")
m <- match(x = cell_barcodes_to_check, table = cell_barcodes)
gRNA_indic_ordered <- gRNA_indic[m]
cell_gRNA_umi_counts <- cell_gRNA_umi_counts[m]
# Put into data frame form and save
gRNA_indic_matrix <- data.frame(arl15_enh = gRNA_indic_ordered)
write.fst(x = gRNA_indic_matrix, path = paste0(processed_dir, "/gRNA_indicator_matrix.fst"))
# Append the gRNA UMI counts to the cell-specific covariate matrix.
cell_covariate_matrix <- mutate(cell_covariate_matrix, tot_gRNA_umis = cell_gRNA_umi_counts)
write.fst(cell_covariate_matrix, paste0(processed_dir, "/cell_covariate_matrix.fst"))
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix. Also, append the gRNA UMI count to the cell covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
head(cell_covariate_matrix)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
# First, save the model covariate matrix
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
# n_genes_per_cell <- big_apply(exp_mat_t, function(X, ind) {colSums(X[,ind] > 0)}) %>% unlist()
n_umis_per_cell <- big_apply(exp_mat_t, function(X, ind) {colSums(X[,ind])}) %>% unlist()
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
head(covariate_matrix)
covariate_model_matrix <- covariate_matrix %>% mutate(n_umis = n_umis_per_cell) %>% summarize(batch = paste0("batch_", batch) %>% factor, log_n_umis = log(n_umis), log_n_gRNA_umis = log(tot_gRNA_umis))
head(covariate_model_matrix)
filter(covariate_model_matrix, batch == "batch_4")
filter(covariate_model_matrix, batch == "batch_4") %>% ggplot(data = ., mapping = aes(x = log_n_umis, y = log_n_gRNA_umis))
filter(covariate_model_matrix, batch == "batch_4") %>% ggplot(data = ., mapping = aes(x = log_n_umis, y = log_n_gRNA_umis)) + geom_point()
filter(covariate_model_matrix, batch == "batch_4") %>% select(log_n_umis, log_n_gRNA_umis)
filter(covariate_model_matrix, batch == "batch_4") %>% select(log_n_umis, log_n_gRNA_umis) %>% cor()
covariate_model_matrix$log_n_gRNA_umis
covariate_matrix
covariate_matrix$tot_gRNA_umis == 0
sum(covariate_matrix$tot_gRNA_umis == 0)
covariate_matrix$tot_gRNA_umis
table(covariate_matrix$tot_gRNA_umis)
covariate_matrix$tot_gRNA_umis
covariate_matrix$tot_gRNA_umis %>% hist()
covariate_matrix$tot_gRNA_umis %>% mean()
covariate_matrix$tot_gRNA_umis
is.na(covariate_matrix$tot_gRNA_umis)
is.na(covariate_matrix$tot_gRNA_umis) %>% sum
which(covariate_model_matrix$tot_gRNA_umis %>% is.na)
is.na(covariate_model_matrix$tot_gRNA_umis)
covariate_model_matrix$tot_gRNA_umis
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
covariate_matrix$tot_gRNA_umis
is.na(covariate_matrix$tot_gRNA_umis)
sum(is.na(covariate_matrix$tot_gRNA_umis))
which(is.na(covariate_matrix$tot_gRNA_umis))
covariate_matrix[6193,]
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
packs <- c("rhdf5", "stringr", "openxlsx", "ravel")
for (pack in packs) suppressPackageStartupMessages(library(pack, character.only = TRUE))
# Load the gRNA identification information; we extract information on all guides targeting ARL15.
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
arl15_region <- filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
arl15_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region == arl15_region) %>% pull(spacer.sequence)
# Next, we create a data frame containing UMI counts for these gRNAs
raw_fs <- list.files(raw_data_dir)
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
gRNA_files
print(paste("Working on file", curr_file))
curr_file <- gRNA_files[1]
curr_file
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
curr_gRNA_count_matrix
curr_gRNA_count_matrix$cell_barcode
filter(curr_gRNA_count_matrix, cell_barcode == "TAAGTGCAGCGATAGC")
curr_file <- gRNA_files[2]
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
curr_gRNA_count_matrix
filter(curr_gRNA_count_matrix, cell_barcode = "TAAGTGCAGCGATAGC")
filter(curr_gRNA_count_matrix, cell_barcode == "TAAGTGCAGCGATAGC")
res <- map(.x = gRNA_files, .f = function(curr_file) {
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
list(cell_barcodes = cell_barcodes, umi_count_matrix = curr_batch_gRNA_umi_counts, total_umis = as.integer(curr_gRNA_count_matrix$total_umi_count))
})
gRNA_count_matrix <- map(.x = res, .f = function(x) x$umi_count_matrix) %>% reduce(.f = rbind)
head(gRNA_count_matrix)
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
head(cell_barcodes)
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
head(cell_gRNA_umi_counts)
gRNA_count_matrix_thresh <- apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
gRNA_indic <- apply(X = gRNA_count_matrix_thresh, MARGIN = 1, FUN = function(r) any(r))
nrow(gRNA_count_matrix)
head(gRNA_count_matrix)
head(cell_barcodes)
sum(cell_barcodes %in% "TAAGTGCAGCGATAGC")
gRNA_count_matrix <- map(.x = res, .f = function(x) x$umi_count_matrix) %>% reduce(.f = rbind)
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
cell_gRNA_umi_counts
length(cell_gRNA_umi_counts)
gRNA_count_matrix_thresh <- apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
gRNA_indic <- apply(X = gRNA_count_matrix_thresh, MARGIN = 1, FUN = function(r) any(r))
head(gRNA_indic)
gRNA_indic
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix. Also, append the gRNA UMI count to the cell covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes) %>% gsub(pattern = "-1", replacement = "")
cell_barcodes_to_check
cell_barcodes_to_check %in% "TAAGTGCAGCGATAGC"
sum(cell_barcodes_to_check %in% "TAAGTGCAGCGATAGC")
length(cell_barcodes_to_check)
nrow(cell_barcodes_to_check)
nrow(cell_covariate_matrix)
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix. Also, append the gRNA UMI count to the cell covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes) %>% gsub(pattern = "-1", replacement = "")
m <- match(x = cell_barcodes_to_check, table = cell_barcodes)
m
length(m)
is.na(m)
is.na(m) %>% sum
gRNA_indic_ordered <- gRNA_indic[m]
cell_gRNA_umi_counts <- cell_gRNA_umi_counts[m]
head(cell_barcodes)
length(cell_barcodes_to_check)
m <- match(x = cell_barcodes_to_check, table = cell_barcodes) # There will be some na's.
m
cell_barcodes[m] %>% head()
head(cell_barcodes_to_check)
