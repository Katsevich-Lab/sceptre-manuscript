# source files containing functions
source("analysis/run_one_experiment.R")
setwd
setwd("/Users/timbarry/Box/SCEPTRE/sceptre_source/analysis")
setwd("/Users/timbarry/Box/SCEPTRE/sceptre_source")
# source files containing functions
source("analysis/run_one_experiment.R")
source("analysis/run_one_precomputation.R")
source("plotting/aux_plotting.R")
run_one_experiment
!!
TRUE
!!TRUE
cat(sprintf("skew-t fit did not work, returning NA for now...\n"))
# fixed simulation parameters
num_cells = 1000
grna_avg_prob = 0.05
mean_expression = 5
size = 1
reps = 500
B = 250
num_cells
grna_avg_prob
mean_expression
size
reps
B
parameters = rbind(
list(
estimated_size = c(0.2, 1, 5),
method = c("NB", "MP", "CR"),
rep = 1:reps,
size = 1,
grna_effect = 0,
zero_inflation = 0
) %>%
cross_df(),
list(
estimated_size = c(1),
method = c("NB", "MP", "CR"),
rep = 1:reps,
size = 1,
grna_effect = 0,
zero_inflation = 0.25
) %>%
cross_df()
) %>%
mutate(row_idx = row_number())
require(tidyverse)
parameters = rbind(
list(
estimated_size = c(0.2, 1, 5),
method = c("NB", "MP", "CR"),
rep = 1:reps,
size = 1,
grna_effect = 0,
zero_inflation = 0
) %>%
cross_df(),
list(
estimated_size = c(1),
method = c("NB", "MP", "CR"),
rep = 1:reps,
size = 1,
grna_effect = 0,
zero_inflation = 0.25
) %>%
cross_df()
) %>%
mutate(row_idx = row_number())
parameters
results = tibble(pvalue = rep(NA, nrow(parameters)), zvalue = rep(NA, nrow(parameters)))
results
unique_simulation_params = parameters %>% select(size, grna_effect, zero_inflation) %>% unique()
unique_simulation_params
sim_par_idx <- 1
1:nrow(unique_simulation_params)
unique_simulation_params = parameters %>% select(size, grna_effect, zero_inflation) %>% unique()
unique_simulation_params
size = unique_simulation_params$size[sim_par_idx]
grna_effect = unique_simulation_params$grna_effect[sim_par_idx]
zero_inflation = unique_simulation_params$zero_inflation[sim_par_idx]
size
grna_effect = unique_simulation_params$grna_effect[sim_par_idx]
zero_inflation = unique_simulation_params$zero_inflation[sim_par_idx]
grna_effect
zero_inflation
parameters_sim = parameters %>%
filter(size == !!size,
grna_effect == !!grna_effect,
zero_inflation == !!zero_inflation)
parameters_sim
parameters_sim = parameters %>%
filter(size == !!size,
grna_effect == !!grna_effect,
zero_inflation == !!zero_inflation)
reps_sim = parameters_sim %>% pull(rep) %>% unique()
reps_sim
rep <- 1
rep
cat(sprintf("Working on rep %d/%d...\n", rep, max(reps_sim)))
# generate data
Z = rnorm(num_cells)
Z
head(Z)
num_cells
pi_true =  1 / (1 + exp(-(logit(grna_avg_prob) + 4*Z)))
packages = c("R.utils", "reshape2", "MASS", "bigstatsr",
"VGAM", "sn", "GenomicRanges", "plyranges",
"ggrepel", "readxl", "scales", "kableExtra",
"gridExtra", "tidyverse")
for(package in packages){
suppressPackageStartupMessages(library(package, character.only = TRUE))
}
install.packages("R.utils")
packages = c("R.utils", "reshape2", "MASS", "bigstatsr",
"VGAM", "sn", "GenomicRanges", "plyranges",
"ggrepel", "readxl", "scales", "kableExtra",
"gridExtra", "tidyverse")
for(package in packages){
suppressPackageStartupMessages(library(package, character.only = TRUE))
}
install.packages("sn")
packages = c("R.utils", "reshape2", "MASS", "bigstatsr",
"VGAM", "sn", "GenomicRanges", "plyranges",
"ggrepel", "readxl", "scales", "kableExtra",
"gridExtra", "tidyverse")
for (package in packages){
suppressPackageStartupMessages(library(package, character.only = TRUE))
}
install.packages("plyranges")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("plyranges")
install.packages("sctransform")
packages = c("R.utils", "reshape2", "MASS", "bigstatsr",
"VGAM", "sn", "GenomicRanges", "plyranges",
"ggrepel", "readxl", "scales", "kableExtra",
"gridExtra", "tidyverse")
for (package in packages){
suppressPackageStartupMessages(library(package, character.only = TRUE))
}
install.packages("kableExtra")
packages = c("R.utils", "reshape2", "MASS", "bigstatsr",
"VGAM", "sn", "GenomicRanges", "plyranges",
"ggrepel", "readxl", "scales", "kableExtra",
"gridExtra", "tidyverse")
for (package in packages){
suppressPackageStartupMessages(library(package, character.only = TRUE))
}
# generate data
Z = rnorm(num_cells)
pi_true =  1 / (1 + exp(-(logit(grna_avg_prob) + 4*Z)))
logit
logit
logitlink
pi_true =  1 / (1 + exp(-(logitlink(grna_avg_prob) + 4*Z)))
pi_true
# generate data
Z = rnorm(num_cells)
pi_true =  1 / (1 + exp(-(logitlink(grna_avg_prob) + 4*Z)))
head(pi_true)
hist(pi_true)
# generate data
Z = rnorm(num_cells)
pi_true =  1 / (1 + exp(-(logitlink(grna_avg_prob) + 4*Z)))
pi_true
X = rbinom(n = num_cells, size = 1, prob = pi_true)
X
Y = rnbinom(n = num_cells,
size = size,
mu = exp(log(mean_expression) + 4*Z - grna_effect * X))
Y
Y = Y * rbinom(n = num_cells,
size = 1,
prob = 1 - zero_inflation)
Y
rep
parameters_sim
rep
methods_sim = parameters_sim %>% filter(rep == !!rep) %>% select(estimated_size, method, row_idx)
methods_sim
# negative binomial
estimated_sizes = methods_sim %>% filter(method == "NB") %>% pull(estimated_size)
estimated_sizes
for (estimated_size in estimated_sizes) {
# negative binomial regression
cat(
sprintf(
"Running negative binomial regression for estimated size %0.1f...\n",
estimated_size
)
)
estimated_size <- 0.3
estimated_size <- 0.2
estimated_size <- 0.2
# negative binomial regression
cat(
sprintf(
"Running negative binomial regression for estimated size %0.1f...\n",
estimated_size
)
)
nb_fit = vglm(Y ~ X + Z,
family = negbinomial.size(size = estimated_size),
data = tibble(X, Y, Z))
nb_fit
row_idx = methods_sim %>% filter(method == "NB", estimated_size == !!estimated_size) %>% pull(row_idx)
results[[row_idx, "zvalue"]] = coefficients(summary(nb_fit))["X", "z value"]
results[[row_idx, "pvalue"]] = pnorm(results[[row_idx, "zvalue"]])
nb_fit = vglm(Y ~ X + Z,
family = negbinomial.size(size = estimated_size),
data = tibble(X, Y, Z))
nb_fit
row_idx = methods_sim %>% filter(method == "NB", estimated_size == !!estimated_size) %>% pull(row_idx)
results[[row_idx, "zvalue"]] = coefficients(summary(nb_fit))["X", "z value"]
results
coefficients(summary(nb_fit))["X", "z value"]
row_idx
results = tibble(pvalue = rep(NA, nrow(parameters)), zvalue = rep(0, nrow(parameters)))
row_idx = methods_sim %>% filter(method == "NB", estimated_size == !!estimated_size) %>% pull(row_idx)
results[[row_idx, "zvalue"]] = coefficients(summary(nb_fit))["X", "z value"]
results[[row_idx, "pvalue"]] = pnorm(results[[row_idx, "zvalue"]])
results = tibble(pvalue = rep(0, nrow(parameters)), zvalue = rep(0, nrow(parameters)))
results[[row_idx, "zvalue"]] = coefficients(summary(nb_fit))["X", "z value"]
results[[row_idx, "pvalue"]] = pnorm(results[[row_idx, "zvalue"]])
result
results
for (estimated_size in estimated_sizes) {
# negative binomial regression
cat(
sprintf(
"Running negative binomial regression for estimated size %0.1f...\n",
estimated_size
)
)
nb_fit = vglm(Y ~ X + Z,
family = negbinomial.size(size = estimated_size),
data = tibble(X, Y, Z))
row_idx = methods_sim %>% filter(method == "NB", estimated_size == !!estimated_size) %>% pull(row_idx)
results[[row_idx, "zvalue"]] = coefficients(summary(nb_fit))["X", "z value"]
results[[row_idx, "pvalue"]] = pnorm(results[[row_idx, "zvalue"]])
}
results
# resampling methods
estimated_sizes = methods_sim %>% filter(method != "NB") %>% pull(estimated_size) %>% unique()
estimated_sizes
estimated_size <- 0.2
cat(
sprintf(
"Working on resampling methods for estimated size %0.1f...\n",
estimated_size
)
)
# distilled NB test statistic
nb_loco_fit = vglm(Y ~ Z,
family = negbinomial.size(size = estimated_size),
data = tibble(Y, Z))
nb_loco_fit
offsets = log(nb_loco_fit@fitted.values)
offsets
offsets[X == 1]
nb_distilled_fit = vglm(
Y ~ 1,
offset = offsets[X == 1],
family = negbinomial.size(size = estimated_size),
data = tibble(Y = Y[X == 1])
)
nb_distilled_fit
row_idx = methods_sim %>% filter(method != "NB", estimated_size == !!estimated_size) %>% pull(row_idx)
results[row_idx, "zvalue"] = coefficients(summary(nb_distilled_fit))["(Intercept)", "z value"]
results
# logistic regression for conditional permutation
log_reg_fit = glm(X ~ Z, family = "binomial", data = tibble(X, Z))
pi_hat = log_reg_fit$fitted.values
filter(method %in% c("CP", "MP", "CR")
method
methods_sim
for (method in methods_sim %>% filter(method %in% c("CP", "MP", "CR"),
estimated_size == !!estimated_size) %>% pull(method)) {
cat(sprintf("Running %s...\n", method))
resampled_zvalues = numeric(B)
for (b in 1:B) {
if (method == "MP") {
cells_with_grna = sample.int(num_cells, size = sum(X))
}
if(method == "CR"){
cells_with_grna = as.logical(rbinom(n = num_cells, size = 1, prob = pi_hat))
}
nb_distilled_fit = vglm(
Y ~ 1,
offset = offsets[cells_with_grna],
family = negbinomial.size(size = estimated_size),
data = tibble(Y = Y[cells_with_grna])
)
resampled_zvalues[b] = coefficients(summary(nb_distilled_fit))["(Intercept)", "z value"]
}
dp = selm(y ~ 1,
family = "ST",
data = tibble(y = resampled_zvalues))@param$dp
row_idx = methods_sim %>% filter(method == !!method, estimated_size == !!estimated_size) %>% pull(row_idx)
results[[row_idx, "pvalue"]] = pst(x = results[[row_idx, "zvalue"]], dp = dp)
}
results
selm
?selm
pst
?pst
library(devtools)
install_github(repo="Timothy-Barry/sceptre_paper", subdir="sceptre")
install_github(repo="Timothy-Barry/sceptre_paper", subdir="sceptre")
browseVignettes("sceptre")
browseVignettes("dyplr")
browseVignettes("purrr")
usethis::use_vignette("Sceptre basics")
usethis::use_vignette("sceptre-basics")
library(sceptre)
browseVignettes("sceptre")
library(sceptre)
?simulate_crispr_screen_data
require(sceptre)
?simulate_crispr_screen_data
num_cells <- 1000
grna_mean_prob <- 0.2
covariate_sampler <- list(
cell_size = runif,
cell_cycle = function(x) {runif(n = x, min = 0, max = 1)}
)
mRNA_mean_expression <- 40
gRNA_effect <- 4
covariate_effects <- c(2, 1)
zero_inflation <- 0
neg_binom_size <- 2
simulated_data <- simulate_crispr_screen_data(num_cells, grna_mean_prob, covariate_sampler, mRNA_mean_expression, gRNA_effect, covariate_effects, zero_inflation, neg_binom_size)
library(sceptre)
require(sceptre)
require(sceptre)
?simulate_crispr_screen_data
num_cells <- 1000
grna_mean_prob <- 0.2
covariate_sampler <- list(
cell_size = runif,
cell_cycle = function(x) {runif(n = x, min = 0, max = 1)}
)
mRNA_mean_expression <- 40
gRNA_effect <- 4
covariate_effects <- c(2, 1)
zero_inflation <- 0
neg_binom_size <- 2
simulated_data <- simulate_crispr_screen_data(num_cells, grna_mean_prob, covariate_sampler, mRNA_mean_expression, gRNA_effect, covariate_effects, zero_inflation, neg_binom_size)
require(VGAM)
library(sceptre)
library(sceptre)
