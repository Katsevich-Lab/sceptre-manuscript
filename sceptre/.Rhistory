n_gene_pods <- dicts$n_pods[["gene"]]
n_gene_pods
install.packages(future)
install.packages("future.apply")
# Load the parallel packages
library("future.apply")
plan(multisession)
gene_precomp_dir
cell_gene_expression_matrix
ordered_gene_ids
head(covariate_matrix)
cell_subset
gene_dispersions
log_dir
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
pod_sizes <- c(gene = 10, gRNA = 10, pair = 10)
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
#
gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(1:nrow(gRNA_gene_pairs), 20, FALSE))
# Do the computation in parallel using future package
library("future.apply")
plan(multisession)
# First, create file dictionaries
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
# Next, run the gene precomputation over all gene pods
n_gene_pods <- dicts$n_pods[["gene"]]
run_gene_precomputation_at_scale
log_dir <- NULL; gene_dispersions <- NULL
future_lapply(X = 1:n_gene_pods, function(i) {
run_gene_precomputation_at_scale(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, cell_subset, log_dir, gene_dispersions)
})
# Run the precomputation over all gRNA pods
n_gRNA_pods <- dicts$n_pods[["gRNA"]]
n_gRNA_pods
run_gRNA_precomputation_at_scale
n_gRNA_pods <- dicts$n_pods[["gRNA"]]
x <- future_lapply(X = 1:n_gRNA_pods, function(i) {
run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir)
})
run_gRNA_precomputation_at_scale
i <- 1
run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir)
gRNA_indicator_matrix_fp
pod_id <- 1
gene_precomp_dir
pod_id
gRNA_precomp_dir
gRNA_indicator_matrix_fp
head(covariate_matrix)
cell_subset
log_dir
if (!is.null(log_dir)) activate_sink(paste0(log_dir, "/gRNA_precomp_", pod_id, ".Rout"))
# subset covariate matrix according to cell subset
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
# determine the gRNAs on which to run the precomputation
gRNA_dictionary <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gRNA_ids <- gRNA_dictionary %>% pull(id)
out <- sapply(gRNA_ids, function(gRNA_id) {
cat(paste0("Running precomputation for gRNA ", gRNA_id, ".\n"))
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull() %>% as.integer()
if (!is.null(cell_subset)) gRNA_indicators <- gRNA_indicators[cell_subset]
run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
}) %>% as_tibble()
gRNA_ids
gRNA_ids <- gRNA_dictionary %>% pull(id) %>% as.character()
# run the precomputation for each of these gRNAs
out <- sapply(gRNA_ids, function(gRNA_id) {
cat(paste0("Running precomputation for gRNA ", gRNA_id, ".\n"))
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull() %>% as.integer()
if (!is.null(cell_subset)) gRNA_indicators <- gRNA_indicators[cell_subset]
run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
}) %>% as_tibble()
if (!is.null(log_dir)) activate_sink(paste0(log_dir, "/gene_precomp_", pod_id, ".Rout"))
# subset covariate matrix by rows
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
# obtain the genes on which to preform the precomputation
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id)
head(gene_ids)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
integer_ids <- sapply(gene_ids, function(i) which(i == ordered_gene_ids)) %>% as.integer()
integer_ids
if (!is.null(log_dir)) activate_sink(paste0(log_dir, "/result_", pod_id, ".Rout"))
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
i <- 1
curr_gene <- results_dict[[i, "gene_id"]]
curr_gRNA <- results_dict[[i, "gRNA_id"]]
curr_gene
curr_gRNA
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
curr_gRNA
curr_gene
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
pod_sizes <- c(gene = 10, gRNA = 10, pair = 10)
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(1:nrow(gRNA_gene_pairs), 20, FALSE))
log_dir <- NULL; gene_dispersions <- NULL
# Do the computation in parallel using future package
library("future.apply")
plan(multisession)
# First, create file dictionaries
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
dicts
# Next, run the gene precomputation over all gene pods
n_gene_pods <- dicts$n_pods[["gene"]]
x <- future_lapply(X = 1:n_gene_pods, function(i) {
run_gene_precomputation_at_scale(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, cell_subset, log_dir, gene_dispersions)
})
n_gRNA_pods <- dicts$n_pods[["gRNA"]]
x <- future_lapply(X = 1:n_gRNA_pods, function(i) {
run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir)
})
n_gRNA_pods <- dicts$n_pods[["gRNA"]]
x <- lapply(X = 1:n_gRNA_pods, function(i) {
run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir)
})
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
pod_sizes <- c(gene = 10, gRNA = 10, pair = 10)
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- slice(gRNA_gene_pairs, sample(1:nrow(gRNA_gene_pairs), 20, FALSE))
log_dir <- NULL; gene_dispersions <- NULL
# First, create file dictionaries
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
dicts
# Next, run the gene precomputation over all gene pods
n_gene_pods <- dicts$n_pods[["gene"]]
x <- lapply(X = 1:n_gene_pods, function(i) {
run_gene_precomputation_at_scale(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, cell_subset, log_dir, gene_dispersions)
})
n_gRNA_pods <- dicts$n_pods[["gRNA"]]
x <- lapply(X = 1:n_gRNA_pods, function(i) {
run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir)
})
# Run the gene-gRNA pair analysis over all pair pods
n_pair_pods <- dicts$n_pods[["pair"]]
# Run the gene-gRNA pair analysis over all pair pods
n_pair_pods <- dicts$n_pods[["pairs"]]
n_pair_pods
B
B = 500
log_dir
seed
seed <- 1234
cell_subset
covariate_matrix
gRNA_indicator_matrix_fp
ordered_gene_ids
cell_gene_expression_matrix
results_dir
gRNA_precomp_dir
gene_precomp_dir
i
x <- lapply(X = 1:n_pair_pods, function(i) {
run_gRNA_gene_pair_analysis_at_scale(i, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, seed, log_dir, B)
})
out
# Collate and return the results
out <- collect_results(results_dir)
out
library(future.apply)
plan(multisession)
my_apply <- future_lapply
library(sceptre)
library(sceptre)
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
?run_sceptre_at_scale
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
library(sceptre)
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
res <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs,
gene_precomp_dir = gene_precomp_dir,
gRNA_precomp_dir = gRNA_precomp_dir,
results_dir = results_dir,
cell_gene_expression_matrix = cell_gene_expression_matrix,
ordered_gene_ids = ordered_gene_ids,
gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp,
covariate_matrix = covariate_matrix,
cell_subset = cell_subset,
pod_sizes = c(gene = 10, gRNA = 10, pair = 10),
seed = 1234,
log_dir = NULL,
multi_processor = TRUE)
gRNA_gene_pairs
gene_precomp_dir
gRNA_precomp_dir
results_dir
cell_gene_expression_matrix
ordered_gene_ids
gRNA_indicator_matrix_fp
covariate_matrix
cell_subset
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
head(gRNA_gene_pairs)
res <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs,
gene_precomp_dir = gene_precomp_dir,
gRNA_precomp_dir = gRNA_precomp_dir,
results_dir = results_dir,
cell_gene_expression_matrix = cell_gene_expression_matrix,
ordered_gene_ids = ordered_gene_ids,
gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp,
covariate_matrix = covariate_matrix,
cell_subset = cell_subset,
pod_sizes = c(gene = 10, gRNA = 10, pair = 10),
seed = 1234,
log_dir = NULL,
multi_processor = TRUE)
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
gRNA_gene_pairs
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
res <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs,
gene_precomp_dir = gene_precomp_dir,
gRNA_precomp_dir = gRNA_precomp_dir,
results_dir = results_dir,
cell_gene_expression_matrix = cell_gene_expression_matrix,
ordered_gene_ids = ordered_gene_ids,
gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp,
covariate_matrix = covariate_matrix,
cell_subset = cell_subset,
pod_sizes = c(gene = 5, gRNA = 5, pair = 5),
seed = 1234,
log_dir = log_dir,
multi_processor = TRUE)
res
# Aggregate and return the results
cat("Aggregating and returning results.\n")
out <- collect_results(results_dir)
results_dir
file_names <- list.files(results_dir)
to_load <- paste0(results_dir, "/", file_names[file_names != "results_dictionary.fst"])
to_load
all_results <- map(to_load, read.fst) %>% reduce(rbind) %>% mutate(p_value_adj = p.adjust(p_value, method = "BH"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
gRNA_gene_pairs
cell_gene_expression_matrix
ordered_gene_ids %>% head()
gRNA_indicator_matrix_fp
head(covariate_matrix)
head(cell_subset)
c(gene = 5, gRNA = 5, pair = 5)
res <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs,
gene_precomp_dir = gene_precomp_dir,
gRNA_precomp_dir = gRNA_precomp_dir,
results_dir = results_dir,
cell_gene_expression_matrix = cell_gene_expression_matrix,
ordered_gene_ids = ordered_gene_ids,
gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp,
covariate_matrix = covariate_matrix,
cell_subset = cell_subset,
pod_sizes = c(gene = 5, gRNA = 5, pair = 5),
seed = 1234,
log_dir = log_dir,
multi_processor = TRUE)
result_1.Rout
res
x <- read.fst(paste0(processed_dir, "disp_table.fst"))
x <- read.fst(paste0(processed_dir, "/disp_table.fst"))
head(x)
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
results_dir
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
file_names <- list.files(results_dir)
file_names
file_names
grep(pattern = 'result_[0-9]+.fst', x = file_names)
file_names <- list.files(results_dir)
to_load <- grep(pattern = 'result_[0-9]+.fst', x = file_names)
file_names
to_load <- grep(pattern = 'result_[0-9]+.fst', x = file_names)
to_load
to_load <- grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE)
to_load
to_load
results_dir %>%  paste0(to_load)
esults_dir %>%  paste0("/", to_load)
results_dir %>%  paste0("/", to_load)
all_results <- results_dir %>% paste0("/", to_load) %>% map(read.fst) %>% reduce(rbind)
all_results
all_results$gene_id
multi_processor
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
multi_processor
multi_processor = TRUE
log_dir = log_dir
seed = 1234
pod_sizes = c(gene = 5, gRNA = 5, pair = 5)
pod_sizes
multi_processor
multi_processor
library(future.apply)
plan(multisession)
my_apply <- future_lapply
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
# Next, run the gene precomputation over all gene pods
cat("Running precomputation over genes.\n")
n_gene_pods <- dicts$n_pods[["gene"]]
# Run the precomputation over all gRNA pods
cat("Running precomputation over gRNAs.\n")
n_gRNA_pods <- dicts$n_pods[["gRNA"]]
x <- my_apply(X = 1:n_gRNA_pods, FUN = function(i) {
run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir)
})
x
my_apply
?future_lapply
my_apply
if (multi_processor) {
library(future.apply)
plan(multisession)
my_apply <- future_lapply
} else {
my_apply <- lapply
}
n_gRNA_pods
cat("Running precomputation over gRNAs.\n")
n_gRNA_pods <- dicts$n_pods[["gRNA"]]
x <- my_apply(X = 1:n_gRNA_pods, FUN = function(i) {
run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir)
})
library(sceptre)
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
res <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs,
gene_precomp_dir = gene_precomp_dir,
gRNA_precomp_dir = gRNA_precomp_dir,
results_dir = results_dir,
cell_gene_expression_matrix = cell_gene_expression_matrix,
ordered_gene_ids = ordered_gene_ids,
gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp,
covariate_matrix = covariate_matrix,
cell_subset = cell_subset,
pod_sizes = c(gene = 5, gRNA = 5, pair = 5),
seed = 1234,
log_dir = log_dir,
multi_processor = TRUE)
# Run the gene-gRNA pair analysis over all pair pods
cat("Running distilled CRT over gene-gRNA pairs.\n")
n_pair_pods <- dicts$n_pods[["pairs"]]
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
gRNA_gene_pairs <- gRNA_gene_pairs %>% slice(sample(1:nrow(gRNA_gene_pairs), 10))
seed = 1234
log_dir
multi_processor = TRUE
multi_processor
log_dir
seed
pod_sizes
pod_sizes = c(gene = 5, gRNA = 5, pair = 5)
cell_subset
# Do the computation in parallel using the future package
if (multi_processor) {
library(future.apply)
plan(multisession)
my_apply <- future_lapply
} else {
my_apply <- lapply
}
cat("Running distilled CRT over gene-gRNA pairs.\n")
n_pair_pods <- dicts$n_pods[["pairs"]]
x <- my_apply(X = 1:n_pair_pods, FUN = function(i) {
run_gRNA_gene_pair_analysis_at_scale(i, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, seed, log_dir, B)
})
# Next, run the gene precomputation over all gene pods
cat("Running precomputation over genes.\n")
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
cat("Running distilled CRT over gene-gRNA pairs.\n")
n_pair_pods <- dicts$n_pods[["pairs"]]
x <- my_apply(X = 1:n_pair_pods, FUN = function(i) {
run_gRNA_gene_pair_analysis_at_scale(i, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, seed, log_dir, B)
})
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
# Next, run the gene precomputation over all gene pods
cat("Running precomputation over genes.\n")
n_gene_pods <- dicts$n_pods[["gene"]]
x <- my_apply(X = 1:n_gene_pods, FUN = function(i) {
run_gene_precomputation_at_scale(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, cell_subset, log_dir, gene_dispersions)
})
# Run the precomputation over all gRNA pods
cat("Running precomputation over gRNAs.\n")
n_gRNA_pods <- dicts$n_pods[["gRNA"]]
x <- my_apply(X = 1:n_gRNA_pods, FUN = function(i) {
run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir)
})
lapply(1:5, function(x) x+1 )
lapply(1:5, function(x) x+1, seed=TRUE)
lapply(1:5, function(x){x+1}, seed = TRUE)
lapply(1:5, function(x){x+1}, seed = TRUE)
future_lapply(1:5, function(x) {x+1}, seed = TRUE)
future_lapply(X = 1:5, FUN = function(x) {x+1}, future.seed = TRUE)
lapply(X = 1:5, FUN = function(x) {x+1}, future.seed = TRUE)
do.call(what = my_amm)
if (multi_processor) {
library(future.apply)
plan(multisession)
my_apply <- future_lapply
} else {
my_apply <- lapply
}
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
if (multi_processor) {
library(future.apply)
plan(multisession)
my_apply <- future_lapply
} else {
my_apply <- lapply
}
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
cat("Running precomputation over genes.\n")
n_gene_pods <- dicts$n_pods[["gene"]]
x <- my_apply(X = 1:n_gene_pods, FUN = function(i) {
run_gene_precomputation_at_scale(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, cell_subset, log_dir, gene_dispersions)
})
gene_dispersions = NULL
multi_processor = TRUE
B = 500
log_dir = NULL
seed = NULL
pod_sizes = c(gene = 100, gRNA = 500, pair = 200)
covariate_matrix
cell_subset = NULL
multi_processor
if (multi_processor) {
library(future.apply)
plan(multisession)
my_apply <- future_lapply
} else {
my_apply <- lapply
}
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
dicts
