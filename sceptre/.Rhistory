covariate_matrix <- if (nrow(covariate_matrix) == 106666) covariate_matrix else covariate_matrix[cell_subset,]
gene_precomp_size = NULL; B = 500; seed = NULL
cat(paste0("Running gRNA precomputation.\n"))
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
cat(paste0("Running gene precomputation.\n"))
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, gene_precomp_size)
gene_precomp
gRNA_precomp = gRNA_precomp; gene_precomp_size = gene_precomp$gene_precomp_size; gene_precomp_offsets = gene_precomp$gene_precomp_offsets
fit_skew_t <- function(t_nulls) {
p_value_skew_t <- NA
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
if (class(skew_t_fit) == "selm") { # If the fit worked,
dp <- skew_t_fit@param$dp # then extract the parameters.
if (!any(is.na(dp))) { # If all the fitted parameters are numbers,
p_value_skew_t <- pmax(.Machine$double.eps, pst(x = t_star, dp = dp, method = 2, rel.tol = .Machine$double.eps)) # then compute the skew t-based p-value. pst(x = t_star, dp = dp)
}
}
# check if the skew-t fit worked
skew_t_fit_success <- !is.na(p_value_skew_t)
if (skew_t_fit_success) {
out_p <- p_value_skew_t
skew_t_mle <- dp
} else {
out_p <- mean(c(-Inf, t_nulls) <= t_star)
skew_t_mle <- c(xi = NA, omega = NA, alpha = NA, nu = NA)
}
return(list(skew_t_fit_success = skew_t_fit_success, out_p = out_p, skew_t_mle = skew_t_mle))
}
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators == 1])
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
# Define a closure to resample B times (omitting the NAs)
resample_B_times <- function(my_B) {
t_nulls <- sapply(1:my_B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", my_B, ".\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
tryCatch({
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]},
error = function(e) return(NA),
warning = function(w) return(NA)
)
})
t_nulls[!is.na(t_nulls)]
}
# resample B times
t_nulls <- resample_B_times(B)
t_nulls
# obtain a p-value
skew_t_fit <- fit_skew_t(t_nulls)
skew_t_fit
# obtain a p-value
skew_t_fit <- fit_skew_t(t_nulls)
skew_t_fit
skew_t_fit$skew_t_fit_success <- FALSE
!skew_t_fit$skew_t_fit_success
!skew_t_fit$skew_t_fit_success
t_nulls_second_set <- resample_B_times(9 * B)
hist( c(t_nulls, t_nulls_second_set))
t_nulls_combined <- c(t_nulls, t_nulls_second_set)
length(t_nulls_combined)
1/4984
t_nulls_second_set <- resample_B_times(10 * B)
t_nulls_combined <- c(t_nulls, t_nulls_second_set)
length(t_nulls_combined)
skew_t_fit <- fit_skew_t(t_nulls_combined)
skew_t_fit
data.frame(p_value =  skew_t_fit$out_p, skew_t_fit_success = skew_t_fit$skew_t_fit_success, xi = skew_t_fit$skew_t_mle[["xi"]], omega = skew_t_fit$skew_t_mle[["omega"]], alpha = skew_t_fit$skew_t_mle[["alpha"]], nu = skew_t_fit$skew_t_mle[["nu"]], z_value = t_star)
out_p
skew_t_fit$out_p
skew_t_fit$skew_t_fit_success
out <- list(p_value = skew_t_fit$out_p,
skew_t_fit_success = skew_t_fit$skew_t_fit_success,
skew_t_mle = skew_t_fit$skew_t_mle,
z_value = t_star,
resampled_z_values = t_nulls)
out
out$p_value
out$skew_t_fit_success
out$skew_t_mle
out$z_value
out$resampled_z_values
out <- data.frame(p_value = skew_t_fit$out_p, skew_t_fit_success = skew_t_fit$skew_t_fit_success, xi = skew_t_fit$skew_t_mle[["xi"]], omega = skew_t_fit$skew_t_mle[["omega"]], alpha = skew_t_fit$skew_t_mle[["alpha"]], nu = skew_t_fit$skew_t_mle[["nu"]], z_value = t_star)
out
out <- list(p_value = skew_t_fit$out_p,
skew_t_fit_success = skew_t_fit$skew_t_fit_success,
skew_t_mle = skew_t_fit$skew_t_mle,
z_value = t_star,
resampled_z_values = t_nulls)
out$z_value
out$resampled_z_values
out <- data.frame(p_value = skew_t_fit$out_p, skew_t_fit_success = skew_t_fit$skew_t_fit_success, xi = skew_t_fit$skew_t_mle[["xi"]], omega = skew_t_fit$skew_t_mle[["omega"]], alpha = skew_t_fit$skew_t_mle[["alpha"]], nu = skew_t_fit$skew_t_mle[["nu"]], z_value = t_star)
out
length(t_nulls)
library(sceptre)
?run_sceptre_gRNA_gene_pair
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[,2][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- if (nrow(covariate_matrix) == 106666) covariate_matrix else covariate_matrix[cell_subset,]
r <- run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[,2][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- if (nrow(covariate_matrix) == 106666) covariate_matrix else covariate_matrix[cell_subset,]
r <- run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
r
9/10 * B
0.95 *B
floor(0.95 * B)
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[,2][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "chr5:54325645-54326045") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- if (nrow(covariate_matrix) == 106666) covariate_matrix else covariate_matrix[cell_subset,]
r <- run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
r
sceptre_results <- paste0(results_dir, "/resampling_results.fst") %>% read.fst()
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
require(katsevich2020)
source(paste0(code_dir, "analysis_drivers_gasp/file_paths_to_dirs.R"))
source(paste0(code_dir, "sup_analyses/xie_sup_analyses/aux_objects.R"))
sceptre_results <- paste0(results_dir, "/resampling_results.fst") %>% read.fst()
# Manipulate the SCEPTRE results
sceptre_res <- paste0(results_dir, "/all_results.fst") %>% read.fst()
sceptre_res %>% filter(!skew_t_fit_success)
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
cell_gene_expression_matrix
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
cell_gene_expression_matrix
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids) == "ENSG00000122674"]
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000122674")]
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000122674")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns "ACTB_TSS"))
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ACTB_TSS"))
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ACTB_TSS") %>% pull() %>% as.integer())
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ACTB_TSS") %>% pull() %>% as.integer())[cell_subset]
gRNA_indicators
covariate_matrix
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000122674")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ACTB_TSS") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- if (nrow(covariate_matrix) == 106666) covariate_matrix else covariate_matrix[cell_subset,]
length(expressoins)
length(expressions)
length(gRNA_indicators)
nrow(covariate_matrix)
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
?run_sceptre_gRNA_gene_pair
library(sceptre)
?run_sceptre_gRNA_gene_pair
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000006007")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "bassik_mch") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- if (nrow(covariate_matrix) == 106666) covariate_matrix else covariate_matrix[cell_subset,]
r <- run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix)
r
r <- run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix, gene_precomp_size = 1)
list.files(gene_precomp_dir)
paste0(gene_precomp_dir, /"size_reg_file.rds")
paste0(gene_precomp_dir, ".size_reg_file.rds")
readRDS(paste0(gene_precomp_dir, ".size_reg_file.rds"))
gene_precomp_dir
readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))[["ENSG00000006007"]]
readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_dir
readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))[["ENSG00000006007"]]
sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
sizes
names(sizes)
ordered_gene_ids
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
ordered_gene_ids
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000006007")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "bassik_mch") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
length(ordered_gene_ids)
length(expressions)
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/gene_sizes_file.rds"))
gene_precomp_dir
list.files(gene_precomp_dir)
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_sizes
head(size_reg_file.rds)
head(gene_sizes)
length(size_reg_file.rds)
length(gene_sizes)
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
head(gene_sizes)
size <- gene_sizes[["ENSG00000006007"]]
size
?run_sceptre_gRNA_gene_pair
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000006007")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "bassik_mch") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
size <- gene_sizes[["ENSG00000006007"]]
r <- run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix, size)
r
resampling_results <- sceptre_res %>% rename(grna_group = gRNA_id) %>% left_join(original_results %>%
select(chr, pair_id,
gene_id, gene_short_name, target_gene.start, target_gene.stop, TSS, outlier_gene,
grna_group, quality_rank_grna, target_site, target_site.start, target_site.stop, site_type),
by = c("gene_id", "grna_group")) %>%
group_by(site_type, quality_rank_grna) %>%
mutate(adjusted_pvalue = ifelse(site_type == "DHS" & quality_rank_grna == "top_two",
p.adjust(p_value, "fdr"), NA),
rejected = ifelse(is.na(adjusted_pvalue), FALSE, adjusted_pvalue <= 0.1)) %>%
ungroup() %>%
select(chr, pair_id, rejected,
gene_id, gene_short_name, target_gene.start, target_gene.stop, TSS, outlier_gene,
grna_group, quality_rank_grna, target_site, target_site.start, target_site.stop, site_type,
p_value, xi, omega, alpha, nu)
# Manipulate the SCEPTRE results
sceptre_res <- paste0(results_dir, "/all_results.fst") %>% read.fst()
sceptre_res %>% filter(skew_t_fit_success == FALSE)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000119638")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ACYP1_TSS") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
size <- gene_sizes[["ENSG00000119638"]]
size
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix, size)
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000171428")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
size <- gene_sizes[["ENSG00000171428"]]
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix, size)
size
gene_precomp_size <- gene_sizes[["ENSG00000171428"]]
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
cat(paste0("Running gene precomputation.\n"))
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, gene_precomp_size)
expressions
gRNA_indicators
gRNA_precomp
gene_precomp_size = gene_precomp$gene_precomp_size; gene_precomp_offsets = gene_precomp$gene_precomp_offsets
B
seed
if (!is.null(seed)) set.seed(seed)
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators == 1])
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
fit_star
t_star
# Define a closure to resample B times (omitting the NAs)
resample_B_times <- function(my_B) {
t_nulls <- sapply(1:my_B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", my_B, ".\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
tryCatch({
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]},
error = function(e) return(NA),
warning = function(w) return(NA)
)
})
t_nulls[!is.na(t_nulls)]
}
# resample B times
t_nulls <- resample_B_times(B)
t_nulls
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
gRNA_indicators_null
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
gene_precomp_size
gRNA_indicators_null
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators == 1])
fit_Star
fit_star
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
t_star
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
length(expressions[gRNA_indicators_null == 1])
length(gene_precomp_offsets[gRNA_indicators_null == 1])
length(expressions)
length(gene_precomp_offsets)
length(expressions)
length(gRNA_indicators)
nrow(covariate_matrix)
expressions
length(expressions)
length(gRNA_indicators)
nrow(covariate_matrix)
gene_precomp_size = NULL
B = 500
seed = NULL
seed <- 1234
cat(paste0("Running gRNA precomputation.\n"))
gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
cat(paste0("Running gene precomputation.\n"))
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, gene_precomp_size)
length(expressions)
length(gRNA_indicators)
length(gRNA_precomp)
length(gRNA_indicators)
nrow(covariate_matrix)
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
out <- as.numeric(fitted(fit_model_grna))
length(fit_model_grna)
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
out <- as.numeric(fitted(fit_model_grna))
length(fit_model_grna)
length(gRNA_indicators)
nrow(covariate_matrix)
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
fit_model_grna
out <- as.numeric(fitted(fit_model_grna))
out
length(fit_model_grna)
length(out)
length(gRNA_indicators)
length(gRNA_indicators)
nrow(covariate_matrix)
out <- as.numeric(fitted(fit_model_grna))
length(out)
is.na(gRNA_indicators)
is.na(gRNA_indicators) %>% sum
out <- as.numeric(fitted(fit_model_grna))
out
length(fit_model_grna)
length(out)
length(gRNA_indicators)
length(covariate_matrix)
nrow(covariate_matrix)
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
fit_model_grna$residuals %>% length
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000171428")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[["ENSG00000171428"]]
gRNA_indicators
length(gRNA_indicators)
nrow(covariate_matrix)
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
out <- as.numeric(fitted(fit_model_grna))
length(covariate_matrix)
length(out)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
library(sceptre)
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000171428")][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[["ENSG00000171428"]]
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, covariate_matrix, gene_precomp_size)
# Manipulate the SCEPTRE results
sceptre_res <- paste0(results_dir, "/all_results.fst") %>% read.fst()
sceptre_res %>% filter(skew_t_fit_success == FALSE)
library(sceptre)
?gene_precomp_offsets
require(sceptre)
?gene_precomp_offsets
?run_sceptre_using_precomp
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
gene_id <- "ENSG00000119650"
gRNA_id <- "ACYP1_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
run_sceptre_gRNA_gene_pair(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
# Manipulate the SCEPTRE results
sceptre_res <- paste0(results_dir, "/all_results.fst") %>% read.fst()
sceptre_res
sceptre_res %>% filter(gene_id == !!gene_id & gRNA_id == !!gRNA_id)
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
sceptre_res %>% filter( skew_t_fit_success == FALSE )
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
gene_id <- "ENSG00000064419"
gRNA_id <- "ATP6V1F_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gRNA_precomp
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
gene_id <- "ENSG00000122674"
gRNA_id <- "ACTB_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234, FALSE)
x <- run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234, FALSE)
x
x$resampled_z_values
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
gene_id <- "ENSG00000119638"
gRNA_id <- "ACYP1_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
gene_id <- "ENSG00000119650"
gRNA_id <- "ACYP1_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
gene_id <- "ENSG00000117153"
gRNA_id <- "ADIPOR1_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
sceptre_res %>% headI()
sceptre_res %>% head()
gene_id <- "ENSG00000008256"
gRNA_id <- "ACTB_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
library(sceptre)
?run_sceptre_using_precomp_old
?run_sceptre_at_scale
?run_sceptre_using_precomp
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
gene_id <- "ENSG00000008256"
gRNA_id <- "ACTB_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
r1 <- run_sceptre_using_precomp_old(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
r1
r2 <- run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
r2
version
set.seed(1234)
rbinom(10, size = 1, prob = .5)
# Manipulate the SCEPTRE results
sceptre_res <- paste0(results_dir, "/all_results.fst") %>% read.fst()
results_dir
head(results_dir)
head(sceptre_res)
gene_id <- "ENSG00000011275"
gRNA_id <- "gRNA_id"
gRNA_id <- "ACTB_TSS"
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)][cell_subset]
gRNA_indicators <- (read.fst(gRNA_indicator_matrix_fp, columns = "ASAH1_TSS") %>% pull() %>% as.integer())[cell_subset]
gene_sizes <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))
gene_precomp_size <- gene_sizes[[gene_id]]
gRNA_precomp <- paste0(gRNA_precomp_dir, "/gRNA_precomp_1.fst") %>% read.fst(columns = gRNA_id) %>% pull()
gene_precomp_offsets <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst(columns = gene_id) %>% pull()
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
run_sceptre_using_precomp_old(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, 500, 1234)
run_gRNA_gene_pair_analysis_at_scale
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_gasp/sceptre_function_args.R")
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
pod_id <- 1
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
if (regularization_amount > 0) regularized_gene_sizes <- readRDS(gene_dict$size_reg_file[1] %>% as.character())[as.character(results_dict$gene_id)]
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
