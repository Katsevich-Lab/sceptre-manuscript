gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
library(sceptre)
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
require(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
run_sceptre_at_scale(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset = )
r1 <- run_sceptre_at_scale(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, regularization_amount, pod_sizes)
regularization_amount
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
dicts
# A quick helper function to run a large computation
run_big_computation <- function(n_pods, big_FUN, multi_processor) {
l <- list(X = 1:n_pods, FUN = big_FUN)
if (multi_processor) l[["future.seed"]] <- FALSE
apply_fun <- if (multi_processor) future_lapply else lapply
x <- suppressWarnings(do.call(what = apply_fun, args = l))
}
# Run the first round of gene precomputations
cat("Running the first round of gene precomputations.\n")
multi_processor
multi_processor <- FALSE
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_1(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
regularize_gene_sizes_at_scale(gene_precomp_dir, regularization_amount, log_dir)
# Run the second round of gene precomputations
cat("Running the second round of gene precomputations.\n")
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_2(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
# Run the precomputation over all gRNA pods
cat("Running precomputation over gRNAs.\n")
run_big_computation(dicts$n_pods[["gRNA"]],
function(i) run_gRNA_precomputation_at_scale(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
# Run the precomputation over all gRNA pods
cat("Running precomputation over gRNAs.\n")
run_big_computation(dicts$n_pods[["gRNA"]],
function(i) run_gRNA_precomputation_at_scale(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
run_gRNA_precomputation_at_scale <- function(pod_id, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir) {
# Activate the sink for the log file
if (!is.null(log_dir)) activate_sink(paste0(log_dir, "/gRNA_precomp_", pod_id, ".Rout"))
# subset covariate matrix according to cell subset
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
# determine the gRNAs on which to run the precomputation
gRNA_dictionary <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gRNA_ids <- gRNA_dictionary %>% pull(id) %>% as.character()
# run the precomputation for each of these gRNAs
out <- sapply(gRNA_ids, function(gRNA_id) {
cat(paste0("Running precomputation for gRNA ", gRNA_id, ".\n"))
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull() %>% as.integer()
if (!is.null(cell_subset)) gRNA_indicators <- gRNA_indicators[cell_subset]
run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
}) %>% as_tibble()
# save the result
precomp_matrix_fp <- (gRNA_dictionary %>% pull(precomp_file))[1] %>% as.character
write.fst(out, precomp_matrix_fp)
if (!is.null(log_dir)) deactivate_sink()
}
run_big_computation(dicts$n_pods[["gRNA"]],
function(i) run_gRNA_precomputation_at_scale(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
cell_subset
log_dir
# Run the precomputation over all gRNA pods
cat("Running precomputation over gRNAs.\n")
run_big_computation(dicts$n_pods[["gRNA"]],
function(i) run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir),
multi_processor)
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
log_dir <- NULL
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
dicts
# A quick helper function to run a large computation
run_big_computation <- function(n_pods, big_FUN, multi_processor) {
l <- list(X = 1:n_pods, FUN = big_FUN)
if (multi_processor) l[["future.seed"]] <- FALSE
apply_fun <- if (multi_processor) future_lapply else lapply
x <- suppressWarnings(do.call(what = apply_fun, args = l))
}
# Run the first round of gene precomputations
cat("Running the first round of gene precomputations.\n")
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_1(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
multi_processor <- FALSE
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_1(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
# Run the size estimate regularization
cat("Regularizing the estimated gene sizes.\n")
regularize_gene_sizes_at_scale(gene_precomp_dir, regularization_amount, log_dir)
# Run the second round of gene precomputations
cat("Running the second round of gene precomputations.\n")
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_2(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
# Run the precomputation over all gRNA pods
cat("Running precomputation over gRNAs.\n")
run_big_computation(dicts$n_pods[["gRNA"]],
function(i) run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir),
multi_processor)
# Run the gene-gRNA pair analysis over all pair pods
cat("Running distilled CRT over gene-gRNA pairs.\n")
run_big_computation(dicts$n_pods[["pairs"]],
function(i) run_gRNA_gene_pair_analysis_at_scale(i, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, regularization_amount, cell_subset, seed, log_dir, B),
multi_processor)
run_gRNA_gene_pair_analysis_at_scale
pod_id <- 1
gene_precomp_dir
gRNA_precomp_dir
results_dir
cell_gene_expression_matrix
ordered_gene_ids
gRNA_indicator_matrix_fp
covariate_matrix
regularization_amount
cell_subset
seed
log_dir
B
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
regularization_amount
if (regularization_amount > 0) regularized_gene_sizes <- readRDS(gene_dict$size_reg_file[1] %>% as.character())[results_dict$gene_id]
regularized_gene_sizes
i <- 1
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
regularization_amount
gene_precomp_size <- regularized_gene_sizes[[curr_gene]]
gene_precomp_size
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
library(sceptre)
?gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset = NULL, regularization_amount = 3, pod_sizes = c(gene = 100, gRNA = 500, pair = 200), seed = 1234, log_dir = NULL, B = 500, multi_processor = TRUE
?run_sceptre_at_scale
library(sceptre)
?run_sceptre_at_scale
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
r <- run_sceptre_at_scale(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, regularization_amount, pod_sizes, seed, log_dir, B, multi_processor = TRUE)
r
r <- run_sceptre_at_scale(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, 0, pod_sizes, seed, log_dir, B, multi_processor = TRUE)
r
storage_location
storage_location <- "/Volumes/tims_new_drive/research/sceptre_files/test"
storage_location
storage_location
dirs <- c("gene_precomp", "gRNA_precomp", "results", "logs")
dirs
paste0(storage_location, "/", dirs)
sub_dirs <- c("gene_precomp", "gRNA_precomp", "results", "logs")
dirs_to_create <- paste0(storage_location, "/", sub_dirs)
dirs_to_create
dir.exists(storage_location)
!dir.exists(storage_location)
storage_location
?dir.create
dir.exists(storage_location)
if (!dir.exists(storage_location)) dir.create(storage_location, recursive = TRUE)
if (!dir.exists(storage_location)) dir.create(storage_location, recursive = TRUE)
storage_location
sub_dirs <- c("gene_precomp", "gRNA_precomp", "results", "logs")
if (!dir.exists(storage_location)) dir.create(storage_location, recursive = TRUE)
sub_dirs <- c("gene_precomp", "gRNA_precomp", "results", "logs")
dirs_to_create <- paste0(storage_location, "/", sub_dirs)
for (dir in dirs_to_create) {
if (! dir.exists(dir)) dir.create(dir)
}
dirs_to_create
c(gene_precomp_dir = sub_dirs[1], gRNA_precomp_dir = sub_dirs[2], results = sub_dirs[3], logs = sub_dirs[4])
c(gene_precomp_dir = dirs_to_create[1], gRNA_precomp_dir = dirs_to_create[2], results = dirs_to_create[3], logs = dirs_to_create[4])
library(sceptre)
# Create offsite directories (if necessary)
storage_location
storage_location
# Create offsite directories (if necessary)
storage_location <- "/Volumes/tims_new_drive/research/sceptre_files/test"
storage_location
storage_location
is.character(storage_location)
is.character( list("a", "b") )
# Create offsite directories (if necessary)
storage_location <- "/Volumes/tims_new_drive/research/sceptre_files/test"
storage_location
storage_location <- initialize_directories(storage_location)
storage_location
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gRNA_precomp_dir <- storage_location[["gRNA_precomp_dir"]]
results_dir <- storage_location[["results_dir"]]
log_dir <- storage_location[["log_dir"]]
?run_sceptre_at_scale
storage_location
x <- c(a=1, b=2)
x
x[["c"]]
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
r <- run_sceptre_at_scale(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, regularization_amount, pod_sizes, seed, log_dir, B, multi_processor = TRUE)
library(sceptre)
?run_sceptre_at_scale
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
r <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp, covariate_matrix = covariate_matrix, storage_location = storage_location, cell_subset = cell_subset, regularization_amount = regularization_amount, pod_sizes = pod_sizes, seed = seed, B = B, multi_processor = TRUE)
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
storage_location <- c(gene_precomp_dir = paste0(offsite_dir, "/data/xie/precomp/gene"), gRNA_precomp_dir = paste0(offsite_dir, "/data/xie/precomp/gRNA"), results_dir = paste0(offsite_dir, "/results/xie/sceptre"), log_dir = paste0(offsite_dir, "/logs/xie"))
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
storage_location <- c(gene_precomp_dir = paste0(offsite_dir, "/data/xie/precomp/gene"), gRNA_precomp_dir = paste0(offsite_dir, "/data/xie/precomp/gRNA"), results_dir = paste0(offsite_dir, "/results/xie/sceptre"), log_dir = paste0(offsite_dir, "/logs/xie"))
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
length(storage_location) == 1
# Create offsite directories (if necessary)
if (length(storage_location) == 1) storage_location <- initialize_directories(storage_location)
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gene_precomp_dir
length(storage_location) == 1
gene_precomp_dir <- storage_location[["gene_precomp_dir"]]
gRNA_precomp_dir <- storage_location[["gRNA_precomp_dir"]]
results_dir <- storage_location[["results_dir"]]
log_dir <- storage_location[["log_dir"]]
dir.exists(gene_precomp_dir)
dir.exists(log_dir)
?run_sceptre_at_scale
require(sceptre)
?run_sceptre_at_scale
run_sceptre_at_scale
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source("/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R")
storage_location <- "/Volumes/tims_new_drive/research/sceptre_files/test"
r <- run_sceptre_at_scale(gRNA_gene_pairs = gRNA_gene_pairs, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, gRNA_indicator_matrix_fp = gRNA_indicator_matrix_fp, covariate_matrix = covariate_matrix, storage_location = storage_location, cell_subset = cell_subset, regularization_amount = regularization_amount, pod_sizes = pod_sizes, seed = seed, B = B, multi_processor = TRUE)
r
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
# source the function arguments
source(param_file)
run_gRNA_precomputation_at_scale
log_dir
if (!is.null(log_dir)) file.remove(list.files(log_dir, full.names = TRUE))
x <- if (!is.null(log_dir)) file.remove(list.files(log_dir, full.names = TRUE))
regularize_gene_sizes_at_scale
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
regularize_gene_sizes_at_scale
regularize_gene_sizes_at_scale(gene_precomp_dir = gene_precomp_dir, regularization_amount = regularization_amount, log_dir = log_dir)
regularize_gene_sizes_at_scale
regularize_gene_sizes_at_scale(gene_precomp_dir = gene_precomp_dir, regularization_amount = regularization_amount, log_dir = log_dir)
regularize_gene_sizes_at_scale(gene_precomp_dir = gene_precomp_dir, regularization_amount = regularization_amount, log_dir = NULL)
gene_precomp_dir
regularization_amount
log_dir
gene_precomp_dir
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
# source the function arguments
source(param_file)
results_dir
x <- paste0(results_dir, "/all_results.fst") %>% read.fst()
x
his(x)
hist(x)
gene_size
expressions
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
cell_gene_expression_matrix
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ARL15")]
gRNA_indicators <- paste0(processed_dir, "/gRNA_indicator_matrix.fst") %>% read.fst() %>% pull()
gRNA_indicators
#' @examples
#' offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
#' processed_dir <- paste0(offsite_dir, "/data/xie/processed")
#' covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
#' ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
#' cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
#' expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ARL15")]
#' gRNA_indicators <- paste0(processed_dir, "/gRNA_indicator_matrix.fst") %>% read.fst() %>% pull()
readRDS(file = paste0(offsite_dir, "data/xie/precomp/gene/gene_size_unreg_2.rds"))
#' @examples
#' offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
#' processed_dir <- paste0(offsite_dir, "/data/xie/processed")
#' covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
#' ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
#' cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
#' expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ARL15")]
#' gRNA_indicators <- paste0(processed_dir, "/gRNA_indicator_matrix.fst") %>% read.fst() %>% pull()
readRDS(file = paste0(offsite_dir, "/data/xie/precomp/gene/gene_size_unreg_2.rds"))
head(expressions)
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
ordered_gene_ids
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
ordered_gene_ids
readRDS(file = paste0(offsite_dir, "/data/xie/precomp/gene/gene_size_unreg_2.rds"))[["ENSG00000134247.9"]]
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000197530.12")]
gRNA_indicators <- paste0(processed_dir, "/gRNA_indicator_matrix.fst") %>% read.fst() %>% pull()
readRDS(file = paste0(offsite_dir, "/data/xie/precomp/gene/gene_size_unreg_2.rds"))[["ENSG00000197530.12"]]
expressions
gRNA_indicators
covariate_matrix
gene_size
gene_size
gene_size <- readRDS(file = paste0(offsite_dir, "/data/xie/precomp/gene/gene_size_unreg_2.rds"))[["ENSG00000197530.12"]]
table(expressions)
expressions
gRNA_indicators
covariate_matrix
gene_size
expressions
fit <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_size), data = covariate_matrix)
fit
full_covariate_matrix <- mutate(covariate_matrix, gRNA_indicator = as.integer(gRNA_indicators))
full_covariate_matrix
head(full_covariate_matrix)
fit <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_size), data = full_covariate_matrix)
fit
summaryvglm(fit_star)@coef3["gRNA_indicator", "z value"]
summaryvglm(fit)@coef3["gRNA_indicator", "z value"]
fit
summaryvglm(fit)@coef3["gRNA_indicator", "z value"]
summaryvglm(fit)@coef3["gRNA_indicator", "z value"]
z_val <- summaryvglm(fit)@coef3["gRNA_indicator", "z value"]
fit
p <- pnorm(q = z_val, lower.tail = TRUE)
p
library(sceptre)
