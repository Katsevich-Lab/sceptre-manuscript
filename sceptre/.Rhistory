code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
pod_id <- args[3] # pod_id input
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
log_dir = paste0(offsite_dir, "/logs"
log_dir
log_dir
log_dir
log_dir
log_dir = paste0(offsite_dir, "/logs")
log_Dir
log_dir
pod_id
pod_id <- 1
log_fp <- paste0(log_dir, "/gRNA_precomp_", pod_id, ".Rout")
log_fp
log_dir = NULL
paste0(log_dir, "/gRNA_precomp_", pod_id, ".Rout")
library(sceptre)
source('~/Box/SCEPTRE/sceptre_paper/sceptre/R/scaling_up_functions.R', echo=TRUE)
gene_precomp_dir <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/precomp"
pod_id <- 1
gene_precomp_dir <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/precomp"
cell_gene_expression_matrix_metadata <- readRDS("/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/expression_FBM_metadata.rds")
cell_gene_expression_matrix_metadata
cell_gene_expression_matrix <- load_fbm(cell_gene_expression_matrix_metadata)
cell_gene_expression_matrix[,1]
cell_gene_expression_matrix[,10]
covariate_matrix <- read.fst("/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/cell_covariate_model_matrix.fst")
cell_subset <- readRDS("/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/cells_to_keep.rds")
log_dir = NULL
ordered_gene_ids <- readRDS("/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/cells_to_keep.rds")
ordered_gene_ids
ordered_gene_ids <- readRDS("/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/ordered_gene_ids.RDS")
head(ordered_gene_ids)
if (!is.null(log_dir)) activate_sink(paste0(log_dir, "/gene_precomp_", pod_id, ".Rout"))
covariate_matrix
# subset covariate matrix by rows
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
cell_subset
genes_to_precompute
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_precomp_dir
gene_precomp_dir <- "/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/precomp/gene/"
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
head(gene_dictionary)
tail(gene_dictionary)
gRNA_ids <- gRNA_dictionary %>% pull(id)
gene_ids <- gene_dictionary %>% pull(id)
head(gene_ids)
gene_ids
integer_ids <- sapply(gene_ids, function(i) which(i == ordered_gene_ids)) %>% as.integer()
integer_ids
gene_ids <- gene_dictionary %>% pull(id)
integer_ids <- sapply(gene_ids, function(i) which(i == ordered_gene_ids)) %>% as.integer()
integer_ids
1:length(gene_ids)
gene_ids <- gene_ids[1:5]
gene_ids
NULL[1]
i < -1
i <- 1
cat(paste0("Running precomputation for gene ", gene_ids[i] ,".\n"))
integer_id <- integer_ids[i]
integer_id
expressions <- exp_matrix[,integer_id]
expressions <- cell_gene_expression_matrix[,integer_id]
head(expressions)
expressions
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
expressions
covariate_matrix
gene_dispersions
gene_dispersions[i]
gene_dispersions <- NULL
run_gene_precomputation
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_dispersion = gene_dispersions[i])
precomps <- map(1:length(gene_ids), function(i) {
cat(paste0("Running precomputation for gene ", gene_ids[i] ,".\n"))
integer_id <- integer_ids[i]
expressions <- cell_gene_expression_matrix[,integer_id]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_dispersion = gene_dispersions[i])
})
names(precomps) <- gene_ids
gene_ids
out_offsets <- map_dfc(precomps, function(l) l$gene_precomp_offsets)
out_dispersions <- map_dbl(precomps, function(l) l$gene_precomp_dispersion)
out_offsets
out_dispersions
offset_save_fp
dispersion_save_fp
gene_dictionary
gene_dictionary$offset_file
(gene_dictionary %>% pull(offset_file))[1] %>% as.character()
head(gene_dictionary)
dispersion_save_fp <- (gene_dictionary %>% pull(dispersion_file))[1] %>% as.character()
dispersion_save_fp
offset_save_fp
# save the precomputations
offset_save_fp <- (gene_dictionary %>% pull(offset_file))[1] %>% as.character()
offset_save_fp
dispersion_save_fp <- (gene_dictionary %>% pull(dispersion_file))[1] %>% as.character()
dispersion_save_fp
write.fst(out_offsets, offset_save_fp)
saveRDS(out_dispersions, dispersion_save_fp)
out_offsets
paste0(log_dir, "/gene_precomp_", pod_id, ".Rout")
library(sceptre)
suppressPackageStartupMessages(library(sceptre))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
log_dir <- paste0(offsite_dir, "/logs/gasperini")
processed_dir
"/Volumes/tims_new_drive/research/sceptre_files/data/gasperini/processed/expression_FBM_metadata.rds"
exp_mat_metadata <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds"))
exp_mat_metadata
cell_gene_expression_matrix <- load_fbm(exp_mat_metadata)
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
offsite_dir
log_dir <- paste0(offsite_dir, "logs/gasperini")
log_dir
log_dir <- paste0(offsite_dir, "/logs/gasperini")
suppressPackageStartupMessages(library(sceptre))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
# Load the gRNAs and genes to analyze
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
dicts <- create_and_store_dictionaries(gRNA_gene_pairs = gRNA_gene_pairs, gene_precomp_dir = gene_precomp_dir, gRNA_precomp_dir = gRNA_precomp_dir, results_dir = results_dir, pod_sizes = c(gene = 10, gRNA = 20, pair = 12000))
# Print to the standard output n_pods for genes, gRNAs, and pairs (in that order) so that the bash file knows how many pod_ids to iterate over.
paste(dicts$n_pods[["gene"]], dicts$n_pods[["gRNA"]], dicts$n_pods[["pairs"]]) %>% cat
suppressPackageStartupMessages(library(sceptre))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
pod_id <- args[3] # pod_id input
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
exp_mat_metadata <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds"))
cell_gene_expression_matrix <- load_fbm(exp_mat_metadata)
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
log_dir <- paste0(offsite_dir, "/logs/gasperini")
pod_id
pod_id <- 1
gene_precomp_dir
cell_gene_expression_matrix
ordered_gene_ids
covariate_matrix %>% head
cell_subset
gene_dispersions = NULL
x <- run_gene_precomputation_at_scale(pod_id = pod_id, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, gene_dispersions = NULL, log_dir = log_dir)
x
library(sceptre)
suppressPackageStartupMessages(library(sceptre))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
pod_id <- args[3] # pod_id input
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
exp_mat_metadata <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds"))
cell_gene_expression_matrix <- load_fbm(exp_mat_metadata)
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
log_dir <- paste0(offsite_dir, "/logs/gasperini")
pod_id <- args[3] # pod_id input
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
exp_mat_metadata <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds"))
cell_gene_expression_matrix <- load_fbm(exp_mat_metadata)
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
log_dir <- paste0(offsite_dir, "/logs/gasperini")
pod_id <- 1
run_gene_precomputation_at_scale(pod_id = pod_id, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, gene_dispersions = NULL, log_dir = log_dir)
x <- readRDS(paste0(gRNA_precomp_dir, "/gene_dispersion_1.rds"))
paste0(gRNA_precomp_dir, "/gene_dispersion_1.rds")
paste0(gene_precomp_dir, "/gene_dispersion_1.rds")
x <- paste0(gene_precomp_dir, "/gene_dispersion_1.rds") %>% readRDS()
x
x[["ENSG00000075624"]]
x <- paste0(gene_precomp_dir, "/gene_offsets_1.rds") %>% read.fst()
x <- paste0(gene_precomp_dir, "/gene_offsets_1.fst") %>% read.fst()
x
head(x)
suppressPackageStartupMessages(library(sceptre))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
pod_id <- 1
pod_id
pod_id <-  1
gene_precomp_dir
gRNA_precomp_dir
readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds")) %>% load_fbm()
cell_gene_expression_matrix[,1]
paste0(processed_dir, "/ordered_gene_ids.RDS")
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
head(ordered_gene_ids)
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
gRNA_indicator_matrix_fp
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
head(covariate_matrix)
log_dir <- paste0(offsite_dir, "/logs/gasperini")
suppressPackageStartupMessages(library(sceptre))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
pod_id <- as.integer(args[3]) # pod_id <-  1
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.RDS")) %>% load_fbm()
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
B <- 500
log_dir <- paste0(offsite_dir, "/logs/gasperini")
seed <- 1234
read.fst(paste0(results_dir, "/results_dictionary.fst"))
pod_id <- 1
pod_id
results_dir <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
head(results_dir)
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
results_dir
results_dict <- results_dir
rm(results_dir)
results_dict
nrow(results_dict)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
head(gene_dict)
nrow(gene_dict)
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
head(gRNA_dict)
results_dict
results_dict <- results_dict[1:10,]
head(results_dict)
i <- 1
i
9
0987
results_dict[[i, "gene_id"]]
curr_gRNA <- results_dict[[i, "gRNA_id"]]
curr_gene
curr_gene <- results_dict[[i, "gene_id"]]
curr_gRNA <- results_dict[[i, "gRNA_id"]]
curr_gene
curr_gRNA
curr_gene
curr_gRNA
gene_dict
filter(gene_dict, gene_id == curr_gene)
head(gene_dict)
filter(gene_dict, id == curr_gene)
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_precomp_locs
curr_gene
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_precomp_locs
gene_precomp_locs %>% pull(offset_file)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character()
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
head(gene_offset_loc)
gene_precomp_locs %>% pull(dispersion_file) %>% as.character
gene_precomp_locs
gene_offset_loc
gene_dispersion_loc
gene_dispersion_loc <- gene_precomp_locs %>% pull(dispersion_file) %>% as.character
gene_dispersion_loc
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA)
gRNA_prcomp_loc
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
gRNA_prcomp_loc
# Load the appropriate data
gene_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene)
head(gene_offsets)
# Load the appropriate data
gene_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
head(gene_offset_loc)
head(gene_offsets)
readRDS(file = gene_dispersion_loc)
readRDS(file = gene_dispersion_loc)
readRDS(file = gene_dispersion_loc)[[curr_gene]]
gene_dispersion <- readRDS(file = gene_dispersion_loc)[[curr_gene]]
head(gene_offsets)
head()
head(gene_dispersion)
read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA)
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
head(gRNA_precomp)
head(gene_offsets)
head(gene_dispersion)
cell_gene_expression_matrix
curr_gene
curr_gene
which(curr_gene == ordered_gene_ids)
expressions <- cell_gene_expression_matrix[,which(curr_gene == ordered_gene_ids)]
expressions
expressions %>% head()
gRNA_indicators
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA)
head(gRNA_indicators)
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% as.integer()
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
head(gRNA_indicators)
cell_subset
length(gene_offsets)
length(gene_dispersion)
length(gRNA_precomp)
length(expressions)
length(gRNA_indicators)
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
length(expressions)
length(gRNA_indicators)
length(gene_offsets)
gene_precomp_dispersion <- readRDS(file = gene_dispersion_loc)[[curr_gene]]
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
B
seed
suppressPackageStartupMessages(library(sceptre))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
pod_id <-  1
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.RDS")) %>% load_fbm()
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
B <- 500
log_dir <- paste0(offsite_dir, "/logs/gasperini")
seed <- 1234
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
curr_gene <- results_dict[[i, "gene_id"]]
i <- 1
curr_gene <- results_dict[[i, "gene_id"]]
curr_gRNA <- results_dict[[i, "gRNA_id"]]
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
gene_dispersion_loc <- gene_precomp_locs %>% pull(dispersion_file) %>% as.character
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
gene_precomp_dispersion <- readRDS(file = gene_dispersion_loc)[[curr_gene]]
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
seed
B
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_dispersion, gene_precomp_offsets, B, seed)
if (!is.null(seed)) set.seed(seed)
cat(paste0("Starting conditional randomization test.\n"))
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators == 1])
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
t_nulls <- sapply(1:B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", B, ".\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]
})
nrow(results_dict)
p_vals <- sapply(1:3, function(i) {
curr_gene <- results_dict[[i, "gene_id"]]
curr_gRNA <- results_dict[[i, "gRNA_id"]]
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
gene_dispersion_loc <- gene_precomp_locs %>% pull(dispersion_file) %>% as.character
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
gene_precomp_dispersion <- readRDS(file = gene_dispersion_loc)[[curr_gene]]
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_dispersion, gene_precomp_offsets, B, seed)
})
p_vals
cat(paste("Running distilled CRT on gene", curr_gene, "and gRNA", curr_gRNA, "\n"))
head(results_dict)
p_vals <- sapply(1:3, function(i) {
curr_gene <- results_dict[[i, "gene_id"]]
curr_gRNA <- results_dict[[i, "gRNA_id"]]
cat(paste("Running distilled CRT on gene", curr_gene, "and gRNA", curr_gRNA, "\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
gene_dispersion_loc <- gene_precomp_locs %>% pull(dispersion_file) %>% as.character
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
gene_precomp_dispersion <- readRDS(file = gene_dispersion_loc)[[curr_gene]]
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_dispersion, gene_precomp_offsets, B, seed)
})
results_dict %>% summarize(gene_id = gene_id, gRNA_id = gRNA_id)
results_dict %>% summarize(gene_id = gene_id, gRNA_id = gRNA_id) %>% mutate(p_value = p_vals)
p_vals
p_vals_orig <- p_vals
c(9,10,NA)
c(9,10,NA) %>% na.omit
c(9,10,NA) %>% na.omit()
c(9, 10, NA, 10)
c(9, 10, NA, 10) %>% na.exclude()
t_nulls <- c(5,6,NA,10)
t_nulls <- t_nulls[!is.na(t_nulls)]
t_nulls
run_sceptre_using_precomp <- function(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_dispersion, gene_precomp_offsets, B, seed) {
if (!is.null(seed)) set.seed(seed)
cat(paste0("Starting conditional randomization test.\n"))
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators == 1])
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
# resample B times
t_nulls <- sapply(1:B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", B, ".\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
tryCatch({
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]},
error = function(e) return(NA),
warning = function(w) return(NA)
)
})
t_nulls <- t_nulls[!is.na(t_nulls)]
# Fit a skew-t distribution and obtain a p-value
p_value_skew_t <- NA
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
if (class(skew_t_fit) == "selm") { # If the fit worked,
dp <- skew_t_fit@param$dp # then extract the parameters.
if (!any(is.na(dp))) { # If all the fitted parameters are numbers,
p_value_skew_t <- pst(x = t_star, dp = dp) # then compute the skew t-based p-value.
}
}
p_value_raw <- mean(c(-Inf, t_nulls) <= t_star)
out <- if (is.na(p_value_skew_t)) p_value_raw else p_value_skew_t
return(out)
}
p_vals <- sapply(1:3, function(i) {
curr_gene <- results_dict[[i, "gene_id"]]
curr_gRNA <- results_dict[[i, "gRNA_id"]]
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
gene_dispersion_loc <- gene_precomp_locs %>% pull(dispersion_file) %>% as.character
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
gene_precomp_dispersion <- readRDS(file = gene_dispersion_loc)[[curr_gene]]
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_dispersion, gene_precomp_offsets, B, seed)
})
12000
12000 * 20
(12000 * 20)/(60)
(12000 * 20)/(60 * 60)
p_vals
p_vals_orig
results_dict <- results_dict[1:3,]
results_dict
# Create and save the result dataframe
out <- results_dict %>% summarize(gene_id = gene_id, gRNA_id = gRNA_id) %>% mutate(p_value = p_vals)
out
results_dict$result_file
out_fp <- (results_dict %>% pull(result_file))[1] %>% as.character()
out)fp
out_fp
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
head(results_dict)
results_dict$result_file
out_fp <- (results_dict %>% pull(result_file))[1] %>% as.character()
out_fp
out_fp
out_fp <- (results_dict %>% pull(result_file))[1] %>% as.character()
out_fp
out
write.fst(out, out_fp)
library(sceptre)
