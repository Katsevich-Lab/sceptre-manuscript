source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(R.utils))
dest <- paste0(raw_data_dir, "/bulk_rna_info.xlsx")
download.file(url = "https://ars.els-cdn.com/content/image/1-s2.0-S2211124719313956-mmc5.xlsx", destfile = dest)
dest <- paste0(raw_data_dir, "/bulk_rna_info.xlsx")
download.file(url = "https://ars.els-cdn.com/content/image/1-s2.0-S2211124719313956-mmc3.xlsx", destfile = dest)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(ravel))
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(ravel))
##############
# Bulk RNA-seq
##############
bulk_info <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/bulk_rna_info.xlsx"))
bulk_info
##############
# Bulk RNA-seq
##############
bulk_info <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/bulk_rna_info.xlsx"), sheet = 3)
head(bulk_info)
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"))
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiii")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiii")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778_1")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778_1" = "PZ778")
read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778" = "PZ778_1")
bulk_df <- read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778" = "PZ778_1")
head(buld_df)
head(bulk_df)
# We will use only the protein-coding genes in this analysis; load them.
gene_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/Genes.xlsx"), sheet = 1)
all_protein_coding_genes <- gene_df$Gene_Symbol
rm(gene_df)
head(all_protein_coding_genes)
filter(bulk_df, Geneid %in% all_protein_coding_genes)
head(bulk_info)
tail(bulk_info)
bulk_info
slice(bulk_info, 1:25)
slice(bulk_info, 1:25) %>% select(Library.Name )
slice(bulk_info, 1:25) %>% select(library_name = Library.Name)
slice(bulk_info, 1:25) %>% select(library_name = Library.Name, gRNA = sgRNA, region = Region, biological_duplicate = Biological.Duplicate)
bulk_df
bulk_info <- slice(bulk_info, 1:25) %>% select(library_name = Library.Name, gRNA = sgRNA, region = Region, biological_duplicate = Biological.Duplicate)
bulk_info
head(bulk_df)
bulk_df
bulk_df <- read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778" = "PZ778_1")
##############
# Bulk RNA-seq
##############
bulk_info <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/bulk_rna_info.xlsx"), sheet = 3)
bulk_info <- slice(bulk_info, 1:25) %>% select(library_name = Library.Name, gRNA = sgRNA, region = Region, biological_duplicate = Biological.Duplicate)
bulk_df <- read_tsv(file = paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"), col_types = "ccccciiiiiiiiiiiiiiiiiiiiiiiiii") %>% rename("PZ788" = "PZ778", "PZ778" = "PZ778_1")
bulk_df <- filter(bulk_df, Geneid %in% all_protein_coding_genes)
bulk_df
bulk_df
bulk_info
bulk_info
write.fst(x = bulk_info, path = paste0(processed_dir, "/bulk_RNAseq_info.fst"))
write.fst(x = bulk_df, path = paste0(processed_dir, "/bulk_RNAseq.fst"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
exp_mat_t_metadata <- list(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", backingfile = paste0(processed_dir, "/expression_matrix_t"))
# First, we determine the number of cells and number of genes across all the batches
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
out <- as.integer(dim)
H5Fclose(h5_handle)
return(out)
}) %>% t()
row.names(dims_across_h5s) <- NULL
all(dims_across_h5s[,1] == dims_across_h5s[1,1]) # Verify n genes consistent across files
n_cells_total <- sum(dims_across_h5s[,2])
n_genes_total <- dims_across_h5s[1,1]
# We will use only the protein-coding genes in this analysis; load them.
gene_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/Genes.xlsx"), sheet = 1)
all_protein_coding_genes <- gene_df$Gene_Symbol
rm(gene_df)
h5_file <- h5_files[1]
h5_handle <- H5Fopen(h5_file)
all_sequenced_genes <- h5_handle$"/refgenome_hg38_CROP-Guide-MS2-2.1.0/gene_names"
genes_in_use <- all_sequenced_genes[which(all_sequenced_genes %in% all_protein_coding_genes)]
n_genes_in_use <- length(genes_in_use)
H5Fclose(h5_handle)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(openxlsx))
suppressPackageStartupMessages(library(ravel))
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
out <- as.integer(dim)
H5Fclose(h5_handle)
return(out)
}) %>% t()
row.names(dims_across_h5s) <- NULL
all(dims_across_h5s[,1] == dims_across_h5s[1,1]) # Verify n genes consistent across files
n_cells_total <- sum(dims_across_h5s[,2])
n_genes_total <- dims_across_h5s[1,1]
gene_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/Genes.xlsx"), sheet = 1)
all_protein_coding_genes <- gene_df$Gene_Symbol
rm(gene_df)
h5_file <- h5_files[1]
h5_handle <- H5Fopen(h5_file)
all_sequenced_genes <- h5_handle$"/refgenome_hg38_CROP-Guide-MS2-2.1.0/gene_names"
genes_in_use <- all_sequenced_genes[which(all_sequenced_genes %in% all_protein_coding_genes)]
n_genes_in_use <- length(genes_in_use)
H5Fclose(h5_handle)
exp_mat_t_metadata <- list(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", backingfile = paste0(processed_dir, "/expression_matrix_t"))
exp_mat_t_metadata
saveRDS(object = exp_mat_t_metadata, file = paste0(processed_dir, "exp_mat_t_metadata.rds"))
exp_mat_metadata <- list(nrow = n_cells_total, ncol = n_genes_in_use, type = "unsigned short", backingfile = paste0(processed_dir, "/expression_matrix"))
saveRDS(object = exp_mat_metadata, file = paste0(processed_dir, "exp_mat_metadata.rds"))
saveRDS(object = exp_mat_t_metadata, file = paste0(processed_dir, "/exp_mat_t_metadata.rds"))
saveRDS(object = exp_mat_metadata, file = paste0(processed_dir, "/exp_mat_metadata.rds"))
# Download the Genes.xlsx file from this url: https://osf.io/edjzv/ (source: Human protein-coding genes and gene feature statistics in 2019 by Piovesan et al in BMC Research Notes)
dest <- paste0(raw_data_dir, "/Genes_2.xlsx")
download.file(url = "https://app.box.com/s/lyr9ojwos6gd01popxwmmxf81zbaovh2", destfile = dest)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
readRDS(paste0(processed_dir, "/exp_mat_t.rds"))
processed_dir
readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds"))
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
exp_mat_t[,1]
exp_mat_t[,100000]
?big_apply
n_genes_per_cell <- big_apply(exp_mat_t, function(X, ind) {colSums(X[,ind] > 0)}) %>% unlist()
head(n_genes_per_cell)
n_umis_per_cell <- big_apply(exp_mat_t, function(X, ind) {colSums(X[,ind])}) %>% unlist()
head(n_umis_per_cell)
covariate_matrix <- read.fst(processed_dir, "/covariate_matrix.fst")
covariate_matrix <- read.fst(processed_dir, "/cell_covariate_matrix.fst")
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
head(covariate_matrix)
nrow(covariate_matrix)
length(n_umis_per_cell)
length(n_genes_per_cell)
covariate_matrix %>% mutate(n_umis = n_umis_per_cell, n_genes = n_genes_per_cell)
covariate_matrix <- covariate_matrix %>% mutate(n_umis = n_umis_per_cell, n_genes = n_genes_per_cell)
head(covariate_matrix)
summarize(covariate_matrix, batch = paste0("batch_", batch) %>% factor, log_n_umis = log(n_umis))
covariate_model_matrix <- summarize(covariate_matrix, batch = paste0("batch_", batch) %>% factor, log_n_umis = log(n_umis))
head(covariate_model_matrix)
covariate_model_matrix$batch
write.fst(x = covariate_model_matrix, path = paste0(processed_dir, "/covariate_model_matrix.fst"))
packs <- c("rhdf5", "stringr", "openxlsx", "ravel")
library(devtools)
install_github(repo="Timothy-Barry/ravel")
installed.packages()
rownames(installed.packages())
my_packs <- rownames(installed.packages())
my_packs
rep("CRAN", 8)
data.frame(packages = packages, locs = locs)
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "ravel", "rhdf5")
locs <- c(rep("CRAN", 8), "Bioc", "github")
data.frame(packages = packages, locs = locs)
data.frame(package = packages, loc = locs)
df <- data.frame(package = packages, loc = locs)
github_repo <- c( rep(NA, 9), "Timothy-Barry/ravel")
github_repo
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo)
df
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "ravel", "rhdf5", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo
github_repo_subdir <- c(rep(NA, 10), "sceptre")
github_repo_subdir
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
i <- 1
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
my_packs <- rownames(installed.packages())
df[i, "package"]
curr_package <- df[i, "package"]
curr_package
curr_package %in% my_packs
curr_package
curr_loc <- df[i, "loc"]
curr_loc
if (curr_loc == "CRAN")  {
install.packages(curr_package)
}
!requireNamespace("BiocManager", quietly = TRUE)
"BiocManager" %in% my_packs
if (!("BiocManager" %in% my_packs)) install.packages("BiocManager")
curr_loc
i <- 10
curr_package <- df[i, "package"]
curr_loc <- df[i, "loc"]
curr_loc
dir
df[i,]
git_dir <- df[i, "github_repo"]
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
git_dir
git_subdir
if (!("devtools" %in% my_packs)) install.packages("devtools")
"devtools" %in% my_packs
library(BiocManager)
git_subdir
git_dir
install_github(repo = git_dir, subdir = git_subdir)
library(devtools)
install_github(repo = git_dir, subdir = git_subdir)
?install_github
git_subdir
verify_all_packages_available <- function(df) {
my_packs <- rownames(installed.packages())
for (i in 1:nrow(df)) {
curr_package <- df[i, "package"]
if(!(curr_package %in% my_packs)) {
curr_loc <- df[i, "loc"]
if (curr_loc == "CRAN")  {
install.packages(curr_package)
} else if (curr_loc == "Bioc") {
if (!("BiocManager" %in% my_packs)) install.packages("BiocManager")
library(BiocManager)
BiocManager::install(curr_package)
} else if (curr_loc == "github") {
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
if (!("devtools" %in% my_packs)) install.packages("devtools")
library(devtools)
if (is.na(git_subdir)) install_github(repo = git_dir) else install_github(repo = git_dir, subdir = git_subdir)
}
}
}
}
verify_all_packages_available <- function(df) {
my_packs <- rownames(installed.packages())
for (i in 1:nrow(df)) {
curr_package <- df[i, "package"]
cat(paste("Checking", curr_package))
if(!(curr_package %in% my_packs)) {
curr_loc <- df[i, "loc"]
if (curr_loc == "CRAN")  {
install.packages(curr_package)
} else if (curr_loc == "Bioc") {
if (!("BiocManager" %in% my_packs)) install.packages("BiocManager")
library(BiocManager)
BiocManager::install(curr_package)
} else if (curr_loc == "github") {
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
if (!("devtools" %in% my_packs)) install.packages("devtools")
library(devtools)
if (is.na(git_subdir)) install_github(repo = git_dir) else install_github(repo = git_dir, subdir = git_subdir)
}
}
}
}
verify_all_packages_available(df)
verify_all_packages_available <- function(df) {
my_packs <- rownames(installed.packages())
for (i in 1:nrow(df)) {
curr_package <- df[i, "package"]
cat(paste("Checking", curr_package, "\n"))
if(!(curr_package %in% my_packs)) {
curr_loc <- df[i, "loc"]
if (curr_loc == "CRAN")  {
install.packages(curr_package)
} else if (curr_loc == "Bioc") {
if (!("BiocManager" %in% my_packs)) install.packages("BiocManager")
library(BiocManager)
BiocManager::install(curr_package)
} else if (curr_loc == "github") {
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
if (!("devtools" %in% my_packs)) install.packages("devtools")
library(devtools)
if (is.na(git_subdir)) install_github(repo = git_dir) else install_github(repo = git_dir, subdir = git_subdir)
}
}
}
}
verify_all_packages_available(df)
df
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "ravel", "rhdf5", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
# This script verifies that all packages required for the Xie analysis are available.
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
code_dir
source(paste0(code_dir, "/utilities/verify_all_packages_available.R"))
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
# This script verifies that all packages required for the Xie analysis are available.
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/utilities/verify_all_packages_available.R"))
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "stringr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
verify_all_packages_available(df)
ls
print(code_dir)
args[1]
# This script verifies that all packages required for the Xie analysis are available.
args <- commandArgs(trailingOnly = TRUE)
args
args[1]
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
packages
locs
length(packages)
length(locs)
length(github_repo)
length(github_repo_subdir)
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
df
verify_all_packages_available
i <- 10
my_packs <- rownames(installed.packages())
curr_package <- df[i, "package"]
curr_package
cat(paste("Checking", curr_package, "\n"))
curr_loc <- df[i, "loc"]
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
if (!("devtools" %in% my_packs)) install.packages("devtools")
library(devtools)
install_github
if (is.na(git_subdir)) install_github(repo = git_dir) else install_github(repo = git_dir, subdir = git_subdir)
git_subdir
git_dir
i
git_dir <- df[i, "github_repo"]
git_subdir <- df[i, "github_repo_subdir"]
git_dir
git_subdir
install_github
git_subdir
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/utilities/verify_all_packages_available.R"))
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
find.package("sceptre")
# This script verifies that all packages required for the Xie analysis are available.
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/utilities/verify_all_packages_available.R"))
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
verify_all_packages_available(df)
packages <- c("fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 7), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 8), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 9), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df[1,"package"]
df[[1,"package"]]
require(sceptre)
create_parent_directories
create_parent_directories
s <- "data/xie/raw"
str_split(string = s, pattern = "/")
unlist(str_split(string = s, pattern = "/"))
dirs <- unlist(str_split(string = s, pattern = "/"))
1:length(dirs)
map(.x = 1:length(dirs), .f = function(i) {
paste0(dirs[1:i], collapse = "/")
})
out <- map(.x = 1:length(dirs), .f = function(i) {
paste0(dirs[1:i], collapse = "/")
})
unlist(out)
create_parent_directories("data/xie/raw")
create_parent_directories <- function(s) {
dirs <- unlist(str_split(string = s, pattern = "/"))
out <- map(.x = 1:length(dirs), .f = function(i) {
paste0(dirs[1:i], collapse = "/")
})
return(unlist(out))
}
create_parent_directories("data/xie/raw")
# Hardcode the directories to create.
sub_dirs <- c(create_parent_directories("data/xie/raw"), create_parent_directories("data/xie/precomp/gRNA"), "data/xie/precomp/gene", "data/xie/processed",
create_parent_directories("results/xie"), "figures", create_parent_directories("logs/xie")) %>% unique()
dirs_to_create <- paste0(offsite_dir, "/", sub_dirs)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
offsite_dir
dirs_to_create <- paste0(offsite_dir, "/", sub_dirs)
dirs_to_create
paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R")
paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
source(paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R")))
to_source <- paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
to_source <- paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
for (f_to_source in to_source) source(f_to_source)
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
# Hardcode the directories to create.
sub_dirs <- c(create_parent_directories("data/xie/raw"), create_parent_directories("data/xie/precomp/gRNA"), "data/xie/precomp/gene", "data/xie/processed",
create_parent_directories("results/xie"), "figures", create_parent_directories("logs/xie")) %>% unique()
dirs_to_create <- paste0(offsite_dir, "/", sub_dirs)
for (directory in dirs_to_create) {
if (!dir.exists(directory)) {
dir.create(directory)
}
}
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_gasp/file_paths_to_dirs.R"))
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
# Hardcode the directories to create.
sub_dirs <- c(create_parent_directories("data/gasperini/raw"), create_parent_directories("data/gasperini/precomp/gRNA"), "data/gasperini/precomp/gene", "data/gasperini/processed",
create_parent_directories("data/functional"), "data/functional/HIC", "data/functional/ChIP-seq", "data/functional/GeneHancer",
create_parent_directories("results/gasperini"), "results/simulations",
"figures", create_parent_directories("logs/gasperini")) %>% unique()
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
code_dir
to_source <- paste0(code_dir, c("/analysis_drivers_gasp/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
to_source
for (f_to_source in to_source) source(f_to_source)
code_dir
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
to_source <- paste0(code_dir, c("analysis_drivers_gasp/paths_to_dirs.R", "utilities/verify_all_packages_available.R"))
to_source
for (f_to_source in to_source) source(f_to_source)
to_source <- paste0(code_dir, c("analysis_drivers_gasp/file_paths_to_dirs.R", "utilities/verify_all_packages_available.R"))
for (f_to_source in to_source) source(f_to_source)
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
# Hardcode the directories to create.
sub_dirs <- c(create_parent_directories("data/gasperini/raw"), create_parent_directories("data/gasperini/precomp/gRNA"), "data/gasperini/precomp/gene", "data/gasperini/processed",
create_parent_directories("data/functional"), "data/functional/HIC", "data/functional/ChIP-seq", "data/functional/GeneHancer",
create_parent_directories("results/gasperini"), "results/simulations",
"figures", create_parent_directories("logs/gasperini")) %>% unique()
library(R.utils)
packages <- c("R.utils", "fst", "sn", "MASS", "VGAM", "tidyverse", "bigstatsr", "openxlsx", "rhdf5", "ravel", "sceptre")
locs <- c(rep("CRAN", 8), "Bioc", rep("github", 2))
github_repo <- c(rep(NA, 9), "Timothy-Barry/ravel", "Timothy-Barry/sceptre_paper")
github_repo_subdir <- c(rep(NA, 10), "sceptre")
df <- data.frame(package = packages, loc = locs, github_repo = github_repo, github_repo_subdir = github_repo_subdir)
df
?install.packages
