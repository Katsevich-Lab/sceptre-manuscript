pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
if (multi_processor) {
library(future.apply)
plan(multisession)
}
multi_processor <- TRUE
if (multi_processor) {
library(future.apply)
plan(multisession)
}
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
dicts
# A quick helper function to run a large computation
run_big_computation <- function(n_pods, big_FUN, multi_processor) {
l <- list(X = 1:n_pods, FUN = big_FUN)
if (multi_processor) l[["future.seed"]] <- FALSE
apply_fun <- if (multi_processor) future_lapply else lapply
x <- suppressWarnings(do.call(what = apply_fun, args = l))
}
# Run the first round of gene precomputation
cat("Running the first round of gene precomputations.\n")
dicts$n_pods[["gene"]]
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_1(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, cell_subset, log_dir),
multi_processor)
regularize_gene_sizes_at_scale(gene_precomp_dir, log_dir)
dicts$n_pods[["gene"]]
dicts$n_pods[["gene"]]
# Run the second round of gene precomputations
cat("Running the second round of gene precomputations.\n")
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_2(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, cell_subset, log_dir),
multi_processor)
# Run the precomputation over all gRNA pods
cat("Running precomputation over gRNAs.\n")
run_big_computation(dicts$n_pods[["gRNA"]],
function(i) run_gRNA_precomputation_at_scale(i, gRNA_precomp_dir, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, log_dir),
multi_processor)
dicts$n_pods[["pairs"]]
pod_id
run_big_computation(dicts$n_pods[["pairs"]],
function(i) run_gRNA_gene_pair_analysis_at_scale(i, gene_precomp_dir, gRNA_precomp_dir, results_dir, cell_gene_expression_matrix, ordered_gene_ids, gRNA_indicator_matrix_fp, covariate_matrix, cell_subset, seed, log_dir, B),
multi_processor)
# Aggregate and return the results
cat("Aggregating and returning results.\n")
out <- collect_results(results_dir)
out
out$p_value
out$p_value %>% hist()
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
require(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
gRNA_gene_pairs
list()$a
run_gene_precomputation_at_scale_round_1
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
library(sceptre)
multi_processor = TRUE
if (multi_processor) {
library(future.apply)
plan(multisession)
}
multi_processor
# First, create file dictionaries
cat("Creating precomputation dictionaries.\n")
dicts <- create_and_store_dictionaries(gRNA_gene_pairs, gene_precomp_dir, gRNA_precomp_dir, results_dir, pod_sizes)
dictgs
dicts
# A quick helper function to run a large computation
run_big_computation <- function(n_pods, big_FUN, multi_processor) {
l <- list(X = 1:n_pods, FUN = big_FUN)
if (multi_processor) l[["future.seed"]] <- FALSE
apply_fun <- if (multi_processor) future_lapply else lapply
x <- suppressWarnings(do.call(what = apply_fun, args = l))
}
# Run the first round of gene precomputations
cat("Running the first round of gene precomputations.\n")
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_1(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, cell_subset, log_dir),
multi_processor)
log_dir
run_gene_precomputation_at_scale_round_1
regularization_amount <- 3
regularization_amount <- 3
# A quick helper function to run a large computation
run_big_computation <- function(n_pods, big_FUN, multi_processor) {
l <- list(X = 1:n_pods, FUN = big_FUN)
if (multi_processor) l[["future.seed"]] <- FALSE
apply_fun <- if (multi_processor) future_lapply else lapply
x <- suppressWarnings(do.call(what = apply_fun, args = l))
}
# Run the first round of gene precomputations
cat("Running the first round of gene precomputations.\n")
run_big_computation(n_pods = dicts$n_pods[["gene"]],
big_FUN = function(i) run_gene_precomputation_at_scale_round_1(i, gene_precomp_dir, cell_gene_expression_matrix, ordered_gene_ids, covariate_matrix, regularization_amount, cell_subset, log_dir),
multi_processor)
v
regularization_amount
covariate_matrix <- covariate_matrix[cell_subset,]
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
precomps <- map(gene_ids, function(gene_id) {
cat(paste0("Running precomputation round 1 for gene ", gene_id, ".\n"))
expressions <- cell_gene_expression_matrix[,which(gene_id == ordered_gene_ids)]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
unreg_size <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)[["gene_precomp_size"]]
gene_log_geom_mean <- log_geom_mean(expressions)
return(list(unreg_size = unreg_size, gene_log_geom_mean = gene_log_geom_mean))
})
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
pod_id <- 1
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dictionarty
gene_dictionary
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
gene_ids
regularization_amount
regularization_amount <- 0
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
pod_id <- 1
regularization_amount
regularization_amount <- 0
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
regularization_amount
precomps <- map(gene_ids, function(gene_id) {
cat(paste0("Running precomputation round 1 for gene ", gene_id, ".\n"))
expressions <- cell_gene_expression_matrix[,which(gene_id == ordered_gene_ids)]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
unreg_size <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)[["gene_precomp_size"]]
out <- list()
out$unreg_size <- unreg_size
if (regularization_amount > 0) {
gene_log_geom_mean <- log_geom_mean(expressions)
out$gene_log_geom_mean <- gene_log_geom_mean
}
return(out)
})
precomps
names(precomps) <- gene_ids
out_unreg_sizes <- map_dbl(precomps, function(l) l$unreg_size)
out_unreg_sizes
map_dbl(precomps, function(l) l$gene_log_geom_mean)
if (regularization_amount > 0) out_log_geom_means <- map_dbl(precomps, function(l) l$gene_log_geom_mean)
regularization_amount
(gene_dictionary %>% pull(size_unreg_file))[1] %>% as.character()
(gene_dictionary %>% pull(size_unreg_file))[1] %>% as.character()
(gene_dictionary %>% pull(geom_mean_file))[1] %>% as.character()
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
(gene_dictionary %>% pull(size_unreg_file))[1] %>% as.character()
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
covariate_matrix <- covariate_matrix[cell_subset,]
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
pod_id <- 1
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
precomps <- map(gene_ids, function(gene_id) {
cat(paste0("Running precomputation round 1 for gene ", gene_id, ".\n"))
expressions <- cell_gene_expression_matrix[,which(gene_id == ordered_gene_ids)]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
unreg_size <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)[["gene_precomp_size"]]
out <- list()
out$unreg_size <- unreg_size
if (regularization_amount > 0) {
gene_log_geom_mean <- log_geom_mean(expressions)
out$gene_log_geom_mean <- gene_log_geom_mean
}
return(out)
})
precomps
regularization_amount <- 0
precomps <- map(gene_ids, function(gene_id) {
cat(paste0("Running precomputation round 1 for gene ", gene_id, ".\n"))
expressions <- cell_gene_expression_matrix[,which(gene_id == ordered_gene_ids)]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
unreg_size <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)[["gene_precomp_size"]]
out <- list()
out$unreg_size <- unreg_size
if (regularization_amount > 0) {
gene_log_geom_mean <- log_geom_mean(expressions)
out$gene_log_geom_mean <- gene_log_geom_mean
}
return(out)
})
names(precomps) <- gene_ids
out_unreg_sizes <- map_dbl(precomps, function(l) l$unreg_size)
out_unreg_sizes
if (regularization_amount > 0) out_log_geom_means <- map_dbl(precomps, function(l) l$gene_log_geom_mean)
out_log_geom_means
unreg_sizes_save_fp <- (gene_dictionary %>% pull(size_unreg_file))[1] %>% as.character()
saveRDS(object = out_unreg_sizes, file = unreg_sizes_save_fp)
if (regularization_amount > 0) {
geom_means_save_fp <- (gene_dictionary %>% pull(geom_mean_file))[1] %>% as.character()
saveRDS(object = out_log_geom_means, file = geom_means_save_fp)
}
regularization_amount
regularization_amount
regularization_amount
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
covariate_matrix <- covariate_matrix[cell_subset,]
covariate_matrix
covariate_matrix
tail(covariate_matrix)
covariate_matrix
covariate_matrix <- covariate_matrix[cell_subset,]
covariate_matrix <- covariate_matrix[cell_subset,]
covariate_matrix <- covariate_matrix[cell_subset,]
covariate_matrix <- covariate_matrix[cell_subset,]
nrow(covariate_matrix)
cell_subset
covariate_matrix <- covariate_matrix[cell_subset,]
covariate_matrix
nrow(cell_subset)
nrow(covariate_matrix)
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
pod_id <- 1
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
gene_sizes_regularized <- readRDS(paste0(gene_precomp_dir, "/size_reg_file.rds"))[gene_ids]
gene_dictionary
gene_sizes_regularized
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
pod_id <- 1
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
gene_sizes_regularized
gene_precomp_dir
gene_dictionary
as.character(gene_dictionary$size_reg_file[1]
as.character(gene_dictionary$size_reg_file[1])
as.character(gene_dictionary$size_reg_file[1])
gene_sizes <- readRDS(as.character(gene_dictionary$size_reg_file[1]))[gene_ids]
as.character(gene_dictionary$size_unreg_file)[1]
gene_sizes <- readRDS(as.character(gene_dictionary$size_unreg_file)[1])
gene_sizes
gene_sizes <- readRDS(as.character(gene_dictionary$size_unreg_file[1]))
gene_sizes
gene_ids
offsets <- sapply(gene_ids, function(gene_id) {
cat(paste0("Running precomputation round 2 for gene ", gene_id, ".\n"))
expressions <- cell_gene_expression_matrix[,which(gene_id == ordered_gene_ids)]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
dist_offsets <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = gene_sizes[[gene_id]])[["gene_precomp_offsets"]]
return(dist_offsets)
}) %>% as.data.frame()
offsets_save_fp <- (gene_dictionary %>% pull(offset_file))[1] %>% as.character()
offsets_save_fp
(gene_dictionary %>% pull(offset_file))[1] %>% as.character()
offsets_save_fp <- (gene_dictionary %>% pull(offset_file))[1] %>% as.character()
write.fst(x = offsets, path = offsets_save_fp)
run_gRNA_gene_pair_analysis_at_scale
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
regularization_amount <- 3
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
if (small_example) {
pod_sizes <- c(gene = 10, gRNA = 1, pair = 10)
gRNA_gene_pairs <- slice(gRNA_gene_pairs, 1:20)
}
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
pod_id <- 1
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
gene_ids <- results_dict$gene_id
(gene_dict %>% pull(size_reg_file))[1]
gene_dict$size_reg_file[1] %>% as.character()
readRDS( gene_dict$size_reg_file[1] %>% as.character() )[gene_ids]
gene_ids
gene_dict$size_unreg_file[1] %>% as.character()
results_dict <- read.fst(paste0(results_dir, "/results_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
gene_ids <- results_dict$gene_id
gene_ids
gene_ids <- results_dict$gene_id
regularized_gene_sizes <- readRDS(gene_dict$size_reg_file[1] %>% as.character())[gene_ids]
i <- 1
results_dict
nrow(results_dict)
curr_gene <- results_dict[[i, "gene_id"]] %>% as.character()
curr_gRNA <- results_dict[[i, "gRNA_id"]] %>% as.character()
cat(paste0("Running distilled CRT on gene ", curr_gene, " and gRNA ", curr_gRNA, ".\n"))
# Determine the file locations
gene_precomp_locs <- filter(gene_dict, id == curr_gene)
gene_precomp_locs
gene_offset_loc <- gene_precomp_locs %>% pull(offset_file) %>% as.character
if (regularization_amount == 0) gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gene_size_loc
regularization_amount == 0
regularization_amount <- 0
gene_size_loc <- gene_precomp_locs %>% pull(size_unreg_file) %>% as.character()
gene_size_loc
gene_offset_loc
# Load the appropriate data from disk into memory
gene_precomp_offsets <- read.fst(path = gene_offset_loc, columns = curr_gene) %>% pull()
readRDS(file = gene_size_loc)
readRDS(file = gene_size_loc)[[curr_gene]]
gene_precomp_size <- readRDS(file = gene_size_loc)[[curr_gene]]
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
expressions <- cell_gene_expression_matrix[, which(curr_gene == ordered_gene_ids)]
gRNA_indicators <- read.fst(path = gRNA_indicator_matrix_fp, columns = curr_gRNA) %>% pull() %>% as.integer()
# subset by cell id if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
}
# Run the dCRT
run_sceptre_using_precomp(expressions, gRNA_indicators, gRNA_precomp, gene_precomp_size, gene_precomp_offsets, B, seed)
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
gRNA_prcomp_loc <- filter(gRNA_dict, id == curr_gRNA) %>% pull(precomp_file) %>% as.character()
gRNA_precomp <- read.fst(path = gRNA_prcomp_loc, columns = curr_gRNA) %>% pull()
library(sceptre)
library(sceptre)
