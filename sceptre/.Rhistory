#' @examples
#' offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
#' processed_dir <- paste0(offsite_dir, "/data/xie/processed")
#' covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
#' ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
#' cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
#' expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ARL15")]
#' gRNA_indicators <- paste0(processed_dir, "/gRNA_indicator_matrix.fst") %>% read.fst() %>% pull()
readRDS(file = paste0(offsite_dir, "/data/xie/precomp/gene/gene_size_unreg_2.rds"))
head(expressions)
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
ordered_gene_ids
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
ordered_gene_ids
readRDS(file = paste0(offsite_dir, "/data/xie/precomp/gene/gene_size_unreg_2.rds"))[["ENSG00000134247.9"]]
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ENSG00000197530.12")]
gRNA_indicators <- paste0(processed_dir, "/gRNA_indicator_matrix.fst") %>% read.fst() %>% pull()
readRDS(file = paste0(offsite_dir, "/data/xie/precomp/gene/gene_size_unreg_2.rds"))[["ENSG00000197530.12"]]
expressions
gRNA_indicators
covariate_matrix
gene_size
gene_size
gene_size <- readRDS(file = paste0(offsite_dir, "/data/xie/precomp/gene/gene_size_unreg_2.rds"))[["ENSG00000197530.12"]]
table(expressions)
expressions
gRNA_indicators
covariate_matrix
gene_size
expressions
fit <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_size), data = covariate_matrix)
fit
full_covariate_matrix <- mutate(covariate_matrix, gRNA_indicator = as.integer(gRNA_indicators))
full_covariate_matrix
head(full_covariate_matrix)
fit <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_size), data = full_covariate_matrix)
fit
summaryvglm(fit_star)@coef3["gRNA_indicator", "z value"]
summaryvglm(fit)@coef3["gRNA_indicator", "z value"]
fit
summaryvglm(fit)@coef3["gRNA_indicator", "z value"]
summaryvglm(fit)@coef3["gRNA_indicator", "z value"]
z_val <- summaryvglm(fit)@coef3["gRNA_indicator", "z value"]
fit
p <- pnorm(q = z_val, lower.tail = TRUE)
p
library(sceptre)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
packs <- c("rhdf5", "stringr", "openxlsx", "ravel")
for (pack in packs) suppressPackageStartupMessages(library(pack, character.only = TRUE))
# Load the gRNA identification information; we extract information on all guides targeting ARL15.
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
head(eenh_targeenh_targets_df)
head(enh_targets_df)
head(enh_targets_df)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
arl15_region
# Load the gRNA identification information; we extract information on all guides targeting ARL15.
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1) # for the names
arl15_region <- filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
arl15_region
enh_targets_df
enh_targets_df$gene_names
enh_targets_df$gene_names %>% sort
filter(enh_targets_df, gene_names == "MYB")
filter(enh_targets_df, gene_names == "ARL15"
)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
head(filter(enh_targets_df, gene_names == "ARL15")
head(guude_seqs)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
head(guide_seqs)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
head(guide_seqs)
head(guide_seqs)
head(arl15_region)
head(enh_targets_df)
enh_targets_df$region
enh_targets_df$region %>% unique()
enh_targets_df$region %>% duplicated
head(enh_targets_df)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
head(guide_seqs)
guide_seqs$hg38_enh_region
guide_seqs$hg38_enh_region %>% unique()
guide_seqs$hg38_enh_region %>% unique() %>% length()
head(enh_targets_df)
enh_targets_df$gene_names
# Load the gRNA identification information; we extract information on all guides targeting ARL15.
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1) # for the names
arl15_region <- filter(enh_targets_df, gene_names == "ARL15") %>% pull(region)
head(arl15_region)
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
arl15_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region == arl15_region) %>% pull(spacer.sequence)
arl15_gRNA_spacer_seqs
head(guide_seqs)
guide_seqs
bulk_regions <- filter(enh_targets_df, gene_names %in% c("ARL15", "MYB")) %>% pull(region)
bulk_regions
filter(guide_seqs, hg38_enh_region %in% bulk_regions)
bulk_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region %in% bulk_regions) %>% pull(spacer.sequence)
bulk_gRNA_spacer_seqs
bulk_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region %in% bulk_regions)
bulk_gRNA_spacer_seqs
head(bulk_gRNA_spacer_seqs)
bulk_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region %in% bulk_regions) %>% select(hg38_enh_region, spacer_sequence = spacer.sequence)
bulk_gRNA_spacer_seqs
bulk_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region %in% bulk_regions) %>% select(hg38_enh_region)
bulk_gRNA_spacer_seqs
bulk_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region %in% bulk_regions) %>% select(hg38_enh_region) %>% unique()
bulk_gRNA_spacer_seqs
bulk_gRNA_spacer_seqs <- filter(guide_seqs, hg38_enh_region %in% bulk_regions) %>% pull(hg38_enh_region) %>% unique()
bulk_gRNA_spacer_seqs
bulk_gRNA_regions <- filter(guide_seqs, hg38_enh_region %in% bulk_regions) %>% pull(hg38_enh_region) %>% unique()
bulk_gRNA_regions
bulk_regions
head*
head()
head(enh_targets_df)
bulk_regions_names <- filter(enh_targets_df, gene_names %in% c("ARL15", "MYB")) %>% select(region, Denoted.Region.Name.used.in.the.paper)
bulk_regions_names
bulk_regions_names <- filter(enh_targets_df, gene_names %in% c("ARL15", "MYB")) %>% select(region, region_name = Denoted.Region.Name.used.in.the.paper, targeted_gene = gene_names)
bulk_regions_names
# Load the gRNA identification information; we save the regions of ARL15-enh and MYB-enh-1-4.
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
bulk_regions_names <- filter(enh_targets_df, gene_names %in% c("ARL15", "MYB")) %>% select(region, region_name = Denoted.Region.Name.used.in.the.paper, targeted_gene = gene_names)
head(bulk_regions_names)
bulk_region_names <- filter(enh_targets_df, gene_names %in% c("ARL15", "MYB")) %>% select(region, region_name = Denoted.Region.Name.used.in.the.paper, targeted_gene = gene_names)
bulk_region_names
saveRDS(object = bulk_region_names, paste0(processed_dir, "/bulk_region_names.rds"))
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
head(guide_seqs)
target_regions <- guide_seqs %>% pull(hg38_enh_region) %>% unique()
target_regions
target_regions
# Next, we create a data frame containing UMI counts for all targeted putative enhancers
raw_fs <- list.files(raw_data_dir)
raw_fs
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
head(gRNA_files)
gRNA_files
length(gRNA_files)
gRNA_files
res <- map(.x = gRNA_files, .f = function(curr_file) {
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
}) %>% t()
list(cell_barcodes = cell_barcodes, umi_count_matrix = curr_batch_gRNA_umi_counts, total_umis = as.integer(curr_gRNA_count_matrix$total_umi_count))
})
head(res)
res[[1]]$cell_barcodes
res[[1]]$cell_barcodes %>% head
res[[1]]$umi_count_matrix %>% head
res[[1]]$total_umis %>% head
gRNA_count_matrix <- map(.x = res, .f = function(x) x$umi_count_matrix) %>% reduce(.f = rbind)
head(gRNA_count_matrix)
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
head(cell_barcodes)
head(cell_gRNA_umi_counts)
packs <- c("Matrix", "rhdf5", "stringr", "openxlsx", "ravel")
for (pack in packs) suppressPackageStartupMessages(library(pack, character.only = TRUE))
raw_Fs
raw_fs
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
gRNA_files
print(paste("Working on file", curr_file))
curr_file <- gRNA_files[1]
curr_file
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
head(curr_gRNA_count_matrix)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
head(cell_barcodes)
arl15_gRNA_spacer_seqs
1:nrow(curr_gRNA_count_matrix)
guide_seqs
target_regions
names(target_regions) <- target_regions
head(target_regions)
region
region <- "chr1:11671358-11671758
""
region <- "chr1:11671358-11671758"
region
curr_gRNA_count_matrix
guide_seqs
filter(guide_seqs, hg38_enh_region == region)
filter(guide_seqs, hg38_enh_region == region) %>% pull(spacer.sequence)
row_id <- 1
r <- curr_gRNA_count_matrix[row_id,]
r
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
spacers
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_counts
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
umi_locs
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
curr_counts
arl15_gRNA_spacer_seqs
names(curr_counts) <- arl15_gRNA_spacer_seqs
curr_counts
curr_counts
head(target_regions)
spacers
region
head(guide_seqs)
filter(guide_seqs) %>% pull(spacer.sequence)
filter(guide_seqs, hg38_enh_region == region)
region_spaceer_seqs <- filter(guide_seqs, hg38_enh_region == region) %>% pull(spacer.sequence)
region_spaceer_seqs
region_spacer_seqs <- filter(guide_seqs, hg38_enh_region == region) %>% pull(spacer.sequence)
region_spacer_seqs
region
region_spacer_seqs
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
packs <- c("Matrix", "rhdf5", "stringr", "openxlsx", "ravel")
for (pack in packs) suppressPackageStartupMessages(library(pack, character.only = TRUE))
# Load the gRNA identification information; we save the regions of ARL15-enh and MYB-enh-1-4.
enh_targets_df <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/enh_targets.xlsx"), sheet = 1)
bulk_region_names <- filter(enh_targets_df, gene_names %in% c("ARL15", "MYB")) %>% select(region, region_name = Denoted.Region.Name.used.in.the.paper, targeted_gene = gene_names)
bulk_region_names
guide_seqs <- read.xlsx(xlsxFile = paste0(raw_data_dir, "/all_oligos.xlsx"), sheet = 1) %>% rename(hg38_enh_region = "region.pos.(hg38)")
target_regions <- guide_seqs %>% pull(hg38_enh_region) %>% unique()
head(target_regions)
target_regions
names(target_regions) <- target_regions
target_regions[1:!0]
target_regions[1:10]
# Next, we create a data frame containing UMI counts for all targeted putative enhancers
raw_fs <- list.files(raw_data_dir)
raw_fs
# Next, we create a data frame containing UMI counts for all targeted putative enhancers
raw_fs <- list.files(raw_data_dir)
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
gRNA_files
curr_file <- gRNA_files[1]
curr_file
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
curr_gRNA_count_matrix
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
target_regions
region <- target_regions[1]
region
filter(guide_seqs, hg38_enh_region == region)
region_spacer_seqs <- filter(guide_seqs, hg38_enh_region == region) %>% pull(spacer.sequence)
region_spacer_seqs
row_id <- 1
r <- curr_gRNA_count_matrix[row_id,]
r
str_split(r$gRNA_spacer_seqs, pattern = ";")
str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
arl15_gRNA_spacer_seqs
umi_locs <- match(x = arl15_gRNA_spacer_seqs, table = spacers)
umi_locs <- match(x = region_spacer_seqs, table = spacers)
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = region_spacer_seqs, table = spacers)
umi_locs
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- arl15_gRNA_spacer_seqs
names(curr_counts) <- region_spacer_seqs
curr_counts
curr_counts
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = region_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- region_spacer_seqs
curr_counts
})
curr_batch_gRNA_umi_counts
head(curr_counts)
curr_batch_gRNA_umi_counts[1:4, ]
curr_batch_gRNA_umi_counts[1:4, 1:4]
dim(curr_batch_gRNA_umi_counts)
regMat
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = region_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- region_spacer_seqs
curr_counts
}) %>% t() %>% Matrix(sparse = TRUE)
curr_batch_gRNA_umi_counts
dim(curr_batch_gRNA_umi_counts)
curr_batch_gRNA_umi_counts[,1]
curr_batch_gRNA_umi_counts[,2]
curr_batch_gRNA_umi_counts[,3]
curr_batch_gRNA_umi_counts[,4]
curr_batch_gRNA_umi_counts[,5]
curr_batch_gRNA_umi_counts[,6]
region
target_regions
region
head(target_regions)
cat(paste0("Working on region", region, ".\n"))
count_matrices <- map(target_regions, function(region) {
cat(paste0("Working on region", region, ".\n"))
region_spacer_seqs <- filter(guide_seqs, hg38_enh_region == region) %>% pull(spacer.sequence)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = region_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- region_spacer_seqs
curr_counts
}) %>% t() %>% Matrix(sparse = TRUE)
})
target_regions <- guide_seqs %>% pull(hg38_enh_region) %>% unique()
target_regions
target_regions <- target_regions[1:10]
names(target_regions) <- target_regions
target_regions
# Next, we create a data frame containing UMI counts for all targeted putative enhancers
raw_fs <- list.files(raw_data_dir)
gRNA_files <- paste0(raw_data_dir, "/", grep(pattern = "sgRNA-enrichment_5K-sgRNAs_Batch", x = raw_fs, value = TRUE))
raw_fs
gRNA_files
gRNA_files
curr_file
gRNA_files
curr_file
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
cell_barcodes
count_matrices <- map(target_regions, function(region) {
cat(paste0("Working on region ", region, ".\n"))
region_spacer_seqs <- filter(guide_seqs, hg38_enh_region == region) %>% pull(spacer.sequence)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = region_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- region_spacer_seqs
curr_counts
}) %>% t() %>% Matrix(sparse = TRUE)
})
count_matrices
count_matrices[[1]]
count_matrices[[2]]
count_matrices[[3]]
target_regions
target_regions <- target_regions[1:%]
target_regions <- target_regions[1:5]
res <- map(.x = gRNA_files, .f = function(curr_file) {
print(paste("Working on file", curr_file))
curr_gRNA_count_matrix <- read_tsv(file = curr_file, col_names = c("cell_barcode", "total_read_count", "total_umi_count", "gRNA_spacer_seqs", "read_counts", "umi_counts"), col_types = c("cccccc")) %>% select(cell_barcode, gRNA_spacer_seqs, umi_counts, total_umi_count)
cell_barcodes <- pull(curr_gRNA_count_matrix, cell_barcode)
count_matrix_list <- map(target_regions, function(region) {
cat(paste0("Working on region ", region, ".\n"))
region_spacer_seqs <- filter(guide_seqs, hg38_enh_region == region) %>% pull(spacer.sequence)
curr_batch_gRNA_umi_counts <- sapply(X = 1:nrow(curr_gRNA_count_matrix), FUN = function(row_id) {
r <- curr_gRNA_count_matrix[row_id,]
spacers <- str_split(r$gRNA_spacer_seqs, pattern = ";") %>% unlist()
umi_counts <- str_split(r$umi_counts, pattern = ";") %>% unlist() %>% as.integer()
umi_locs <- match(x = region_spacer_seqs, table = spacers)
curr_counts <- sapply(umi_locs, function(i) if (is.na(i)) 0 else umi_counts[i])
names(curr_counts) <- region_spacer_seqs
curr_counts
}) %>% t() %>% Matrix(sparse = TRUE)
})
list(cell_barcodes = cell_barcodes, count_matrix_list = count_matrix_list, total_umis = as.integer(curr_gRNA_count_matrix$total_umi_count))
})
res
res[[1]]
res[[1]]$count_matrix_list$`chr1:11671358-11671758`
res
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
cell_gRNA_umi_counts[[1]]
target_regions
region
res
region
x
x <- res[[1]]
x
x$count_matrix_list[[region]]
gRNA_count_matrix_list <- map(target_regions, function(region) {
map(res, function(x) x$count_matrix_list[[region]]) %>% reduce(.f = rbind)
})
gRNA_count_matrix_list$`chr1:11671358-11671758`
gRNA_count_matrix_list$`chr1:11671358-11671758` %>% dim
gRNA_count_matrix_list$`chr1:11798398-11798798` %>% dim
cell_barcodes <- map(.x = res, .f = function(x) x$cell_barcodes) %>% reduce(.f = c)
cell_gRNA_umi_counts <- map(.x = res, function(x) x$total_umis) %>% reduce(.f = c)
cell_barcodes
cell_gRNA_umi_counts
source('~/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/pre_process_data_3.R')
gRNA_count_matrix <- gRNA_count_matrix_list$`chr1:11671358-11671758`
head(gRNA_count_matrix)
gRNA_count_matrix
head(gRNA_count_matrix)
gRNA_count_matrix <- gRNA_count_matrix_list[[1]]
gRNA_count_matrix
gRNA_count_matrix_thresh <- apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
})
gRNA_count_matrix_thresh
apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
}) %>% apply(MARGIN = 1, FUN = function(r) any(r))
apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
}) %>% apply(MARGIN = 1, FUN = function(r) any(r))
head(v)
head(gRNA_count_matrix_list)
gRNA_count_matrix_list$`chr1:11671358-11671758`
map_dfr(gRNA_count_matrix_list, combine_gRNAs_in_group)
combine_gRNAs_in_group <- function(gRNA_count_matrix) {
apply(X = gRNA_count_matrix, MARGIN = 2, FUN = function(column) {
v <- sum(column >= 1)
U <- sum(column)
column/U > 1/v
}) %>% apply(MARGIN = 1, FUN = function(r) any(r))
}
map_dfr(gRNA_count_matrix_list, combine_gRNAs_in_group)
gRNA_indic_matrix <- map_dfr(gRNA_count_matrix_list, combine_gRNAs_in_group)
head(gRNA_indic_matrix)
# Finally, confirm that the cell barcode order for the gRNA indicator matrix matches that of the cell-by-gene expression matrix and cell-specific covariate matrix. Also, append the gRNA UMI count to the cell covariate matrix.
cell_covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
cell_barcodes_to_check <- pull(cell_covariate_matrix, ordered_cell_barcodes) %>% gsub(pattern = "-1", replacement = "")
head(cell_covariate_matrix)
m <- match(x = cell_barcodes_to_check, table = cell_barcodes) # There will be some na's.
gRNA_indic_matrix_ordered <- gRNA_indic_matrix[m,]
head(gRNA_indic_matrix_ordered)
cell_gRNA_umi_counts <- cell_gRNA_umi_counts[m]
# Put into data frame form and save
write.fst(x = gRNA_indic_matrix_ordered, path = paste0(processed_dir, "/gRNA_indicator_matrix.fst"))
# Append the gRNA UMI counts to the cell-specific covariate matrix.
cell_covariate_matrix <- mutate(cell_covariate_matrix, tot_gRNA_umis = cell_gRNA_umi_counts)
cell_covariate_matrix
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
# First, save the model covariate matrix
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
n_umis_per_cell <- big_apply(exp_mat_t, function(X, ind) {colSums(X[,ind])}) %>% unlist()
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_matrix.fst"))
covariate_model_matrix <- covariate_matrix %>% mutate(n_umis = n_umis_per_cell) %>% summarize(batch = paste0("batch_", batch) %>% factor, log_n_umis = log(n_umis), log_n_gRNA_umis = log(tot_gRNA_umis))
head(covariate_model_matrix)
# Determine which cells will be included in the analysis; for now, we exclude cells with 0 gRNA UMIs
cell_subset <- which(!is.na(covariate_model_matrix$log_n_gRNA_umis))
cell_subset
# Next, determine which gene-gRNA pairs to analyze
gRNA_indic_mat <- read.fst(paste0(processed_dir, "/gRNA_indicator_matrix.fst"))
head(gRNA_indic_mat)
gRNA_id <- colnames(gRNA_indic_mat)
gRNA_id
gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gene_ids
exp_mat <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm()
gene_expression_p <- big_apply(exp_mat, function(X, ind) colMeans(X[,ind] >= 1)) %>% unlist()
head(gene_expression_p)
highly_expressed_genes <- gene_ids[which(gene_expression_p >= 0.08)] %>% unique()
highly_expressed_genes
gRNA_gene_pairs <- tibble(gene_id = highly_expressed_genes, gRNA_id = gRNA_id)
gRNA_gene_pairs <- expand_grid(gene_id = highly_expressed_genes, gRNA_id = gRNA_id)
head(gRNA_gene_pairs)
gRNA_gene_pairs
gRNA_gene_pairs <- expand_grid(gene_id = highly_expressed_genes, gRNA_id = gRNA_id) %>% mutate(gene_id = factor(gene_id), gRNA_id = factor(gRNA_id))
head(gRNA_gene_pairs)
gRNA_gene_pairs
gRNA_gene_pairs <- expand_grid(gene_id = highly_expressed_genes, gRNA_id = gRNA_id) %>% mutate(gene_id = factor(gene_id), gRNA_id = factor(gRNA_id))
write.fst(gRNA_gene_pairs, paste0(processed_dir, "/gRNA_gene_pairs.fst"))
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
small_example <- TRUE
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
gRNA_names <- readRDS(paste0(processed_dir, "/bulk_region_names.rds"))
gRNA_names
filter(gRNA_names, targeted_gene == "ARL15") %>% pull(region)
arl15_region <- filter(gRNA_names, targeted_gene == "ARL15") %>% pull(region)
arl15_region
head(gRNA_gene_pairs)
arl15_region
filter(gRNA_gene_pairs, gRNA_id == arl15_region)
