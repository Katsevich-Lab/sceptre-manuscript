}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
pois_fit <- glm(expressions ~ ., data = model_matrix, family = poisson())
tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 50)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
warnings()
expressions
theta.ml(expressions, pois_fit$fitted.values, limit = 50)[1]
warnings()
expressions
length(expressoins)
length(expressions)
length(pois_fit$fitted.values)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
nrow(covariate_matrix)
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == "ARL15")]
length(expressions)
gRNA_indicators <- paste0(processed_dir, "/gRNA_indicator_matrix.fst") %>% read.fst() %>% pull()
length(gRNA_indicators)
# construct the full model matrix
if("gRNA_indic" %in% colnames(covariate_matrix)) stop("gRNA_indic should be passed as a vector and not included as a column in the covariate matrix.")
model_matrix <- mutate(covariate_matrix, gRNA_indic = as.integer(gRNA_indicators))
nrow(model_matrix)
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = model_matrix, family = poisson())
tryCatch({
theta.ml(y = expressions, mu = pois_fit$fitted.values, limit = 50)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
}
size <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = model_matrix)
fit_nb$theta
}, error = function(e) , warning = function(w))
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = model_matrix, family = poisson())
tryCatch({
theta.ml(y = expressions, mu = pois_fit$fitted.values, limit = 50)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
}
size <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = model_matrix)
fit_nb$theta
}, error = function(e) backup(), warning = function(w) backup())
size
expressions
# next, we fit the model with known size parameter.
fit_star <- vglm(formula = expressions ~ ., family = negbinomial.size(size), data = model_matrix)
fit_star
# next, we fit the model with known size parameter.
fit_star <- vglm(formula = expressions ~ ., family = negbinomial.size(size), data = model_matrix)
# we extract the p-value corresponding to gRNA_indic
summary(fit_star)
# we extract the p-value corresponding to gRNA_indic
summaryvglm(fit_star)@coef3["gRNA_indic", "z value"]
# we extract the z-value corresponding to gRNA_indic
z_val <- summaryvglm(fit_star)@coef3["gRNA_indic", "z value"]
z_val
# Return the appropriate one-sided p-value
pnorm(q = z_val, lower.tail = TRUE)
# Return the appropriate one-sided p-value
pnorm(q = z_val, lower.tail = FALSE)
# Return the appropriate one-sided p-value
pnorm(q = z_val, lower.tail = TRUE)
pnorm(0)
pnorm(-1)
# Return the appropriate one-sided p-value
pnorm(q = z_val, lower.tail = TRUE)
# Return the appropriate one-sided p-value
p <- pnorm(q = z_val, lower.tail = TRUE)
p
library(sceptre)
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
require(sceptre)
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie/sceptre")
results_dir_negbin <- paste0(offsite_dir, "/results/xie/negative_binomial")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/sceptre_function_args.R"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/sceptre_function_args.R"))
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
# Create a dictionary in the results directory
gRNA_gene_pairs
pod_sizes["pair"]
pod_sizes[["pair"]]
# Create a dictionary in the results directory
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]])
# Create a dictionary in the results directory
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]])
# Create a dictionary in the results directory
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% tail
# Create a dictionary in the results directory
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]])
gRNA_gene_pairs$gRNA_id
create_dictionary
# Create a dictionary in the results directory
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]])
# Create a dictionary in the results directory
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]])
gRNA_gene_pairs
# Create a dictionary in the results directory
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% pull(pod_id)
# Create a dictionary in the results directory
mutate(create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% pull(pod_id))
# Create a dictionary in the results directory
mutate(create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% pull(pod_id))
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]
# Create a dictionary in the results directory
mutate(create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]])) %>% pull(pod_id))
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]])
# Create a dictionary in the results directory
create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% pull(pod_id)
# Create a dictionary in the results directory
pod_ids <- create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% pull(pod_id)
pod_ids
gRNA_gene_pairs
gRNA_gene_pairs %>% mutate(pod_ids)
pairs_with_ids <- gRNA_gene_pairs %>% mutate(pod_ids)
head(pairs_with_ids)
write.fst(x = pairs_with_ids, path = paste0(results_dir_negbin, "/result_dictionary.fst"))
# Print the number of pairs.
cat(max(pairs_with_ids$pod_ids))
# Print the number of pairs.
cat(max(pairs_with_ids$pod_ids))
# Print the number of pairs.
cat(max(pairs_with_ids$pod_ids[nrow(pairs_with_ids)]))
# Print the number of pairs.
cat(pairs_with_ids$pod_ids[nrow(pairs_with_ids)])
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
# Create a dictionary in the results directory
pod_ids <- create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% pull(pod_id)
pairs_with_ids <- gRNA_gene_pairs %>% mutate(pod_ids)
write.fst(x = pairs_with_ids, path = paste0(results_dir_negbin, "/result_dictionary.fst"))
# Print the number of pairs.
cat(pairs_with_ids$pod_ids[nrow(pairs_with_ids)])
pairs_with_ids
pod_id <- 1
gRNA_gene_pairs <- filter(gRNA_gene_pairs, pod_id == 1)
gRNA_gene_pairs %>% head
result_dir <- result_dir_negbin
results_dir <- results_dir_negbin
results_dir
pod_id
dictionary <- pairs_with_ids
dictionary
cell_gene_expression_matrix
pod_id ,- 1
pod_id <- 1
dictionary
results_dir
cell_gene_expression_matrix
ordered_gene_ids
gRNA_indicator_matrix_fp
covariate_matrix
cell_subset
log_dir
log_dir = NULL
pod_id
dictionary
results_dir
cell_gene_expression_matrix
ordered_gene_ids
gRNA_indicator_matrix_fp
map_reduce_at_scale
pod_id
dictionary
results_dir
cell_gene_expression_matrix
cell_gene_expression_matrix
ordered_gene_ids
gRNA_indicator_matrix_fp
covariate_matrix
cell_subset
log_dir
pod_id
filter(dictionary)
filter(dictionary, pod_id == !!pod_id)
pod_id
filter(dictionary, pod_ids == pod_id)
pairs_to_analyze <- filter(dictionary, pod_ids == pod_id)
pairs_to_analyze
i <- 1
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gene_id
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
gene_id
gRNA_id
i
which( ordered_gene_ids == gene_id )
ordered_gene_ids
gene_id
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicator_matrix_fp %>% read.fst()
gRNA_indicators <- gRNA_indicator_matrix_fp %>% read.fst() %>% pull(gRNA_id)
gRNA_indicators
gRNA_indicators
expressions
cell_subset
!is.null(cell_subset)
expressions <- expressions[cell_subset]
gRNA_indicators
covariate_matrix
covariate_matrix <- covariate_matrix[cell_subset,]
covariate_matrix
nrow(covariate_matrix)
length(expressions)
length(gRNA_indicators)
gRNA_indicators <- gRNA_indicators[cell_subset]
length(gRNA_indicators)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
# Create a dictionary in the results directory
pod_id <- create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% pull(pod_id)
pairs_with_ids <- gRNA_gene_pairs %>% mutate(pod_id = pod_id)
head(pairs_with_ids)
write.fst(x = pairs_with_ids, path = paste0(results_dir_negbin, "/result_dictionary.fst"))
# Print the number of pairs.
cat(pairs_with_ids$pod_ids[nrow(pairs_with_ids)])
pairs_with_ids
# Print the number of pairs.
cat(pairs_with_ids$pod_id[nrow(pairs_with_ids)])
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
pairs_to_analyze <- filter(dictionary, pod_ids == pod_id)
dictionary <- pairs_with_ids
dictionary
head(dictionary)
pairs_to_analyze
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
gRNA_gene_pairs
# Create a dictionary in the results directory
pod_id <- create_dictionary(gRNA_gene_pairs$gRNA_id, pod_sizes[["pair"]]) %>% pull(pod_id)
dictionary <- gRNA_gene_pairs %>% mutate(pod_id = pod_id)
write.fst(x = dictionary, path = paste0(results_dir_negbin, "/result_dictionary.fst"))
# Print the number of pairs.
cat(dictionary$pod_id[nrow(dictionary)])
dictionary
pairs_to_analyze <- filter(dictionary, pod_ids == pod_id)
pod_id <- 1
pairs_to_analyze <- filter(dictionary, pod_ids == pod_id)
dictionary
pairs_to_analyze <- filter(dictionary, pod_id == !!pod_id)
head(pairs_to_analyze)
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
i <- 1
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- gRNA_indicator_matrix_fp %>% read.fst() %>% pull(gRNA_id)
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
run_NB_model
run_NB_model <- function(expressions, gRNA_indicators, covariate_matrix) {
# construct the full model matrix
if("gRNA_indic" %in% colnames(covariate_matrix)) stop("gRNA_indic should be passed as a vector and not included as a column in the covariate matrix.")
model_matrix <- mutate(covariate_matrix, gRNA_indic = as.integer(gRNA_indicators))
# first, we estimate the size parameter.
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = model_matrix, family = poisson())
tryCatch({
theta.ml(y = expressions, mu = pois_fit$fitted.values, limit = 50)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
}
size <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = model_matrix)
fit_nb$theta
}, error = function(e) backup(), warning = function(w) backup())
# next, we fit the model with known size parameter.
fit_star <- vglm(formula = expressions ~ ., family = negbinomial.size(size), data = model_matrix)
# we extract the z-value corresponding to gRNA_indic
z_val <- summaryvglm(fit_star)@coef3["gRNA_indic", "z value"]
# Return the appropriate one-sided p-value
p <- pnorm(q = z_val, lower.tail = TRUE)
return(p)
}
f
f <- run_NB_model()
f <- run_NB_model
eval("run_NB_model")
do.call(what = "run_NB_model")
f <- "run_NB_model"
f
run_NB_model(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
f
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
dictionary
pairs_to_analyze
pairs_to_analyze <- pairs_to_analyze[1:10,]
f
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id))
res <- map_dfr(.x = 1:nrow(pairs_to_analyze), .f = function(i) {
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- gRNA_indicator_matrix_fp %>% read.fst() %>% pull(gRNA_id)
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
})
p_vals <- map_dfr(.x = 1:nrow(pairs_to_analyze), .f = function(i) {
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id, "\n"))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- gRNA_indicator_matrix_fp %>% read.fst() %>% pull(gRNA_id)
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
})
f
p_vals <- sapply(X = 1:nrow(pairs_to_analyze), FUN = function(i) {
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id, "\n"))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- gRNA_indicator_matrix_fp %>% read.fst() %>% pull(gRNA_id)
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
})
p_Vals
p_vals
p_vals
p_vals <- sapply(X = 1:nrow(pairs_to_analyze), FUN = function(i) {
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id, "\n"))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- gRNA_indicator_matrix_fp %>% read.fst(columns = gRNA_id)
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
})
gRNA_indicator_matrix_fp
gRNA_indicators <- gRNA_indicator_matrix_fp %>% read.fst(., columns = gRNA_id)
gRNA_indicators
p_vals <- sapply(X = 1:nrow(pairs_to_analyze), FUN = function(i) {
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id, "\n"))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id)
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
})
gRNA_indicator_matrix_fp
read.fst(gRNA_indicator_matrix_fp)
read.fst(gRNA_indicator_matrix_fp) %>% head
gRNA_id
read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id) %>% head
gRNA_indicators <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id)
head(gRNA_indicators)
p_vals <- sapply(X = 1:nrow(pairs_to_analyze), FUN = function(i) {
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id, "\n"))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id)
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
})
i
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id, "\n"))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id)
gRNA_indicators
gRNA_indicators <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull()
p_vals <- sapply(X = 1:nrow(pairs_to_analyze), FUN = function(i) {
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id, "\n"))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull()
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
})
p_vals
p_Vals
p_vals
out <- dictionary %>% summarize(gene_id = gene_id, gRNA_id = gRNA_id) %>% mutate(p_value = p_vals)
dictionary %>% summarize(gene_id = gene_id, gRNA_id = gRNA_id)
dictionary <- dictionary[1:10,]
p_vals <- sapply(X = 1:nrow(pairs_to_analyze), FUN = function(i) {
gene_id <- pairs_to_analyze[[i, "gene_id"]]
gRNA_id <- pairs_to_analyze[[i, "gRNA_id"]]
cat(paste("Running", f, "on gene", gene_id, "and gRNA", gRNA_id, "\n"))
expressions <- cell_gene_expression_matrix[, which(ordered_gene_ids == gene_id)]
gRNA_indicators <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull()
# subset if necessary
if (!is.null(cell_subset)) {
expressions <- expressions[cell_subset]
gRNA_indicators <- gRNA_indicators[cell_subset]
covariate_matrix <- covariate_matrix[cell_subset,]
}
do.call(what = f, args = list(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix))
})
out <- dictionary %>% summarize(gene_id = gene_id, gRNA_id = gRNA_id) %>% mutate(p_value = p_vals)
out
out
results_dir
results_dir <- results_dir_negbin
results_dir
paste0(results_dir, "/result_", pod_id)
paste0(results_dir, "/result_", pod_id, ".fst")
write.fst(x = out, path = paste0(results_dir, "/result_", pod_id, ".fst"))
require(sceptre)
find.package("sceptre")
find.package("sceptre")
library(sceptre)
library(sceptre)
