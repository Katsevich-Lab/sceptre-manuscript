internal_idx_range
internal_idx_range[1]:internal_idx_range[2]
non_zero_out <- dat[internal_idx_range[1]:internal_idx_range[2]]
non_zero_out
internal_idx_range[1]
internal_idx_range
external_idx <- indices[internal_idx_range[1]:internal_idx_range[2]]
full_out <- rep(0, n_rows)
external_idx_range
external_idx
full_out[external_idx] <- non_zero_out
full_out
column_no <- n_cols
column_no
internal_idx_range <- ind_ptr[column_no:(column_no + 1)] + c(0,-1)
non_zero_out <- dat[internal_idx_range[1]:internal_idx_range[2]]
external_idx <- indices[internal_idx_range[1]:internal_idx_range[2]]
full_out <- rep(0, n_rows)
full_out[external_idx] <- non_zero_out
full_out
column_no <- 1:4
sapply(X = column_no, FUN = function(i) {
internal_idx_range <- ind_ptr[i:(i + 1)] + c(0,-1)
non_zero_out <- dat[internal_idx_range[1]:internal_idx_range[2]]
external_idx <- indices[internal_idx_range[1]:internal_idx_range[2]]
full_out <- rep(0, n_rows)
full_out[external_idx] <- non_zero_out
return(full_out)
})
h5_obj <- H5Fopen(paste0(raw_data_dir, "/GSM3722727_K562-dCas9-KRAB_5K-sgRNAs_Batch-4_1_filtered_gene_bc_matrices_h5.h5"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
h5_obj <- H5Fopen(paste0(raw_data_dir, "/GSM3722727_K562-dCas9-KRAB_5K-sgRNAs_Batch-4_1_filtered_gene_bc_matrices_h5.h5"))
dat <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
indices <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indices"
ind_ptr <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indptr"
n_rows <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"[1]
n_cols <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"[2]
column_no
sapply(X = column_no, FUN = function(i) {
internal_idx_range <- ind_ptr[i:(i + 1)] + c(0,-1)
non_zero_out <- dat[internal_idx_range[1]:internal_idx_range[2]]
external_idx <- indices[internal_idx_range[1]:internal_idx_range[2]]
full_out <- rep(0, n_rows)
full_out[external_idx] <- non_zero_out
return(full_out)
})
sapply(X = column_no, FUN = function(i) {
internal_idx_range <- ind_ptr[i:(i + 1)] + c(0,-1)
non_zero_out <- dat[internal_idx_range[1]:internal_idx_range[2]]
external_idx <- indices[internal_idx_range[1]:internal_idx_range[2]]
full_out <- rep(0, n_rows)
full_out[external_idx] <- non_zero_out
return(full_out)
})
column_no <- 1:50
sapply(X = column_no, FUN = function(i) {
internal_idx_range <- ind_ptr[i:(i + 1)] + c(0,-1)
non_zero_out <- dat[internal_idx_range[1]:internal_idx_range[2]]
external_idx <- indices[internal_idx_range[1]:internal_idx_range[2]]
full_out <- rep(0, n_rows)
full_out[external_idx] <- non_zero_out
return(full_out)
})
sapply(X = column_no, FUN = function(i) {
internal_idx_range <- ind_ptr[i:(i + 1)] + c(0,-1)
non_zero_out <- dat[internal_idx_range[1]:internal_idx_range[2]]
external_idx <- indices[internal_idx_range[1]:internal_idx_range[2]]
full_out <- rep(0, n_rows)
full_out[external_idx] <- non_zero_out
return(full_out)
})
head(ind_ptr)
max(ind_ptr)
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
extract_matrix_from_hdf5 <- function(h5_obj) {
dat <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
indices <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indices"
ind_ptr <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indptr"
n_rows <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"[1]
n_cols <- h5_obj$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"[2]
}
h5_obj <- H5Fopen(paste0(raw_data_dir, "/GSM3722727_K562-dCas9-KRAB_5K-sgRNAs_Batch-4_1_filtered_gene_bc_matrices_h5.h5"))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
raw_data_dir
# First, we determine the number of cells and number of genes
list.files(raw_data_dir)
# First, we determine the number of cells and number of genes
grep(pattern = "*\.h5" list.files(raw_data_dir))
# First, we determine the number of cells and number of genes
grep(pattern = "*.h5" list.files(raw_data_dir))
# First, we determine the number of cells and number of genes
grep(pattern = "\\.h5" list.files(raw_data_dir))
# First, we determine the number of cells and number of genes
grep(pattern = '\\.h5' list.files(raw_data_dir))
# First, we determine the number of cells and number of genes
grep(pattern = '.h5' list.files(raw_data_dir))
# First, we determine the number of cells and number of genes
grep(pattern = '/.h5' list.files(raw_data_dir))
# First, we determine the number of cells and number of genes
grep(pattern = '*.h5', list.files(raw_data_dir))
# First, we determine the number of cells and number of genes
grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE)
# First, we determine the number of cells and number of genes
paste0(raw_data_dir, grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
# First, we determine the number of cells and number of genes
paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
# First, we determine the number of cells and number of genes across all the batches
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
h5_files
h5_file <- h5_files
h5_handle <- H5Fopen(h5_file)
h5_file
h5_file <- h5_files[1]
h5_file
h5_handle <- H5Fopen(h5_file)
h5_handle
h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0"
h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0"$shape
h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0"$shape
for (h5_file in h5_files) {
h5_handle <- H5Fopen(h5_file)
h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0"$shape
}
h5_handle
h5_handle@ID
h5_handle@native
h5_handle$
h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
h5_file
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
dim
c(nrow = dim[1], ncol = dim[2])
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
c(nrow = dim[1], ncol = dim[2])
})
dims_across_h5s
dims_across_h5s <- apply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
c(nrow = dim[1], ncol = dim[2])
})
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
c(nrow = dim[1], ncol = dim[2])
}, simplify = TRUE)
dims_across_h5s
dim
dim
9
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
dim
})
dims_across_h5s
class(dim)
as.integer(dim)
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
as.integer(dim)
})
dims_across_h5s
dim
as.integer(dim)
as.integer(dim) %>% class
class(dims_across_h5s)
dim(dims_across_h5s)
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
as.integer(dim)
}) %>% t
dims_across_h5s
dim(dims_across_h5s)
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
as.integer(dim)
})
dim(dims_across_h5s)
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
as.integer(dim)
}) %>% t()
row.names(dims_across_h5s)
col.names(dims_across_h5s)
colnames(dims_across_h5s)
row.names(dims_across_h5s) <- NULL
dims_across_h5s
dims_across_h5s[,1]
dims_across_h5s[,1] == dims_across_h5s[1,1]
all(dims_across_h5s[,1] == dims_across_h5s[1,1])
all(dims_across_h5s[,1] == dims_across_h5s[1,1]
all(dims_across_h5s[,1] == dims_across_h5s[1,1])
ims_across_h5s[,2]
dims_across_h5s[,2]
sum(dims_across_h5s[,2])
n_cells_total <- sum(dims_across_h5s[,2])
H5Fclose(h5_handle)
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(bigstatsr))
# First, we determine the number of cells and number of genes across all the batches
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
out <- as.integer(dim)
H5Fclose(h5_handle)
return(out)
}) %>% t()
row.names(dims_across_h5s) <- NULL
all(dims_across_h5s[,1] == dims_across_h5s[1,1]) # Verify n genes consistent across files
n_cells_total <- sum(dims_across_h5s[,2])
n_genes_total <- dims_across_h5s[1,1]
n_genes_total
n_cells_total
n_genes_total
n_cells_total
# Next, we create a file-backed matrix to store the
FBM(nrow = n_genes_total, ncol = n_cells_total, type = "unsigned short", init = 0, backingfile = paste0(processed_dir_data_dir, "/expression_matrix_t"), create_bk = TRUE)
processed_dir_data_dir
106670 * 58382
106670 * 58382 + 1
240000 * 3000
6227607941 > 7.2e+08
h5_file
h5_file
# Select a subset of genes on which to store the data
h5_files[1]
# Select a subset of genes on which to store the data
h5_handle <- H5Fopen(h5_files[1])
h5_handle
h5ls(h5_handle)
h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0 /genes"
h5_handle$"/refgenome_hg38_CROP-Guide-MS2-2.1.0 /genes"
h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/genes"
genes_to_use <- sample(all_genes, 1000)
# Select a subset of genes on which to store the data
genes_to_use_idxs <- sample(1:n_genes_total, 1000)
genes_to_use_idxs
# Select a subset of genes on which to store the data
genes_to_use_idxs <- sample(1:n_genes_total, 1000) %>% order()
genes_to_use_idxs
# Select a subset of genes on which to store the data
genes_to_use_idxs <- sample(1:n_genes_total, 1000) %>% sort()
genes_to_use_idxs
# Select a subset of genes for which to store the data
n_genes_in_use <- 1000
genes_to_use_idxs <- sample(1:n_genes_total, n_genes_in_use) %>% sort()
genes_to_use_idxs
n_genes_in_use
n_cells_total
processed_dir_data_dir
procprocessed_dir
processed_dir
# Next, we create a file-backed matrix to store the
FBM(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", init = 0, backingfile = paste0(processed_dir, "/expression_matrix_t"), create_bk = TRUE)
library(sceptre)
h5_file <- h5_files[1]
h5_file
h5_file
h5_handle <- H5Fopen(h5_file)
dat <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
dat
dat <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
print(h5_file)
print(paste("Working on", h5_file))
print(paste("Working on", h5_file))
head(h5_file)
head(dat)
h5ls(h5_handle)
indices <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indices"
indices
ind_ptr <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indptr"
shape <-  h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
shape
n_row <- shape[1]
n_row
n_col <- shape[2]
n_rows <- shape[1]
n_cols <- shape[2]
genes_to_use_idxs
to_write <- extract_column_from_csc(column_no = 1:n_cols, dat = dat, indices = indices, ind_ptr = ind_ptr, n_rows = n_row, row_idxs = genes_to_use_idxs)
dim(to_write)
to_write
head(to_write)
to_write[1:10,1:10]
?FBM
# Next, we create a file-backed matrix to store the transpose of the expression matrix
exp_mat <- FBM(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", init = 0, backingfile = paste0(processed_dir, "/expression_matrix_t"), create_bk = TRUE)
# Next, we create a file-backed matrix to store the transpose of the expression matrix
exp_mat_t <- FBM(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", init = 0, backingfile = paste0(processed_dir, "/expression_matrix_t"), create_bk = TRUE)
# We iterate through the hd5 files and write the column chunks piece by piece to the FBM.
n_cells_processed <- 0
n_cells_processed
# We iterate through the hd5 files and write the column chunks piece by piece to the FBM.
n_cells_processed <- 1
n_cols
n_cells_processed:n_cols
1:n_genes_in_use
dim(to_write)
1:n_genes_in_use
n_cells_processed:n_cols
exp_mat_t[1:n_genes_in_use, n_cells_processed:n_cols] <- to_write
exp_mat_t
exp_mat_t[1,1]
exp_mat_t[1,10]
exp_mat_t[1,1:10]
exp_mat_t[1,1:100]
exp_mat_t[1:100,1:100]
n_cols
n_cells_processed
n_cells_processed - 1
n_cells_processed - 1 + n_cols
n_genes_in_use
1:n_genes_in_use
(n_cells_processed + 1):(n_cells_processed + n_cols)
n_cells_processed + 1
# We iterate through the hd5 files and write the column chunks piece by piece to the FBM.
n_cells_processed <- 0
(n_cells_processed + 1)
(n_cells_processed + n_cols)
h5_file
grep(h5_file, pattern = "Batch-[0-9]", value = TRUE)
grep(x = h5_file, pattern = "Batch-[0-9]")
suppressPackageStartupMessages(library(stringr))
str_extract(string = h5_file, pattern = "Batch-[0-9]")
str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]")
str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.int()
str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.integer()
str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.integer()
dim(to_write)
batch <- integer(0)
batch
c(batch, 1)
c(batch, c(1, 2))
curr_batch <- str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.integer()
rep(curr_batch, n_cols)
batch <- c(batch, rep(curr_batch, n_cols))
batch
n_cols
# Next, we create a file-backed matrix to store the transpose of the expression matrix
exp_mat_t <- FBM(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", init = 0, backingfile = paste0(processed_dir, "/expression_matrix_t"), create_bk = TRUE)
# We iterate through the hd5 files and write the column chunks piece-by-piece to the FBM.
n_cells_processed <- 0
batch <- integer(0)
for (h5_file in h5_files) {
print(paste("Working on", h5_file))
h5_handle <- H5Fopen(h5_file)
dat <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
indices <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indices"
ind_ptr <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indptr"
shape <-  h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
n_rows <- shape[1]
n_cols <- shape[2]
to_write <- extract_column_from_csc(column_no = 1:n_cols, dat = dat, indices = indices, ind_ptr = ind_ptr, n_rows = n_row, row_idxs = genes_to_use_idxs)
exp_mat_t[1:n_genes_in_use, (n_cells_processed + 1):(n_cells_processed + n_cols)] <- to_write
H5Fclose(h5_file)
n_cells_processed <- n_cells_processed + n_cols
curr_batch <- str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.integer()
batch <- c(batch, rep(curr_batch, n_cols))
}
h5_file <- h5_files[1]
h5_file
print(paste("Working on", h5_file))
h5_handle <- H5Fopen(h5_file)
dat <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
indices <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indices"
ind_ptr <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indptr"
shape <-  h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
n_rows <- shape[1]
n_cols <- shape[2]
to_write <- extract_column_from_csc(column_no = 1:n_cols, dat = dat, indices = indices, ind_ptr = ind_ptr, n_rows = n_row, row_idxs = genes_to_use_idxs)
exp_mat_t[1:n_genes_in_use, (n_cells_processed + 1):(n_cells_processed + n_cols)] <- to_write
H5Fclose(h5_file)
H5Fclose(h5_handle)
n_cells_processed <- n_cells_processed + n_cols
curr_batch <- str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.integer()
batch <- c(batch, rep(curr_batch, n_cols))
batch
# We iterate through the hd5 files and write the column chunks piece-by-piece to the FBM.
n_cells_processed <- 0
batch <- integer(0)
for (h5_file in h5_files) {
print(paste("Working on", h5_file))
h5_handle <- H5Fopen(h5_file)
dat <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
indices <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indices"
ind_ptr <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indptr"
shape <-  h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
n_rows <- shape[1]
n_cols <- shape[2]
to_write <- extract_column_from_csc(column_no = 1:n_cols, dat = dat, indices = indices, ind_ptr = ind_ptr, n_rows = n_row, row_idxs = genes_to_use_idxs)
exp_mat_t[1:n_genes_in_use, (n_cells_processed + 1):(n_cells_processed + n_cols)] <- to_write
H5Fclose(h5_handle)
n_cells_processed <- n_cells_processed + n_cols
curr_batch <- str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.integer()
batch <- c(batch, rep(curr_batch, n_cols))
}
# First, we determine the number of cells and number of genes across all the batches
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
# First, we determine the number of cells and number of genes across all the batches
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
# Pre-process data
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
suppressPackageStartupMessages(library(rhdf5))
suppressPackageStartupMessages(library(bigstatsr))
suppressPackageStartupMessages(library(stringr))
# First, we determine the number of cells and number of genes across all the batches
h5_files <- paste0(raw_data_dir, "/", grep(pattern = '*.h5', list.files(raw_data_dir), value = TRUE))
dims_across_h5s <- sapply(h5_files, function(h5_file) {
h5_handle <- H5Fopen(h5_file)
dim <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
out <- as.integer(dim)
H5Fclose(h5_handle)
return(out)
}) %>% t()
row.names(dims_across_h5s) <- NULL
all(dims_across_h5s[,1] == dims_across_h5s[1,1]) # Verify n genes consistent across files
n_cells_total <- sum(dims_across_h5s[,2])
n_genes_total <- dims_across_h5s[1,1]
# Select a subset of genes for which to store the data
n_genes_in_use <- 1000
genes_to_use_idxs <- sample(1:n_genes_total, n_genes_in_use) %>% sort()
# Next, we create a file-backed matrix to store the transpose of the expression matrix
exp_mat_t <- FBM(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", init = 0, backingfile = paste0(processed_dir, "/expression_matrix_t"), create_bk = TRUE)
# Next, we create a file-backed matrix to store the transpose of the expression matrix
exp_mat_t <- FBM(nrow = n_genes_in_use, ncol = n_cells_total, type = "unsigned short", init = 0, backingfile = paste0(processed_dir, "/expression_matrix_t"), create_bk = TRUE)
# We iterate through the hd5 files and write the column chunks piece-by-piece to the FBM.
n_cells_processed <- 0
batch <- integer(0)
for (h5_file in h5_files) {
print(paste("Working on", h5_file))
h5_handle <- H5Fopen(h5_file)
dat <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
indices <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indices"
ind_ptr <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indptr"
shape <-  h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
n_rows <- shape[1]
n_cols <- shape[2]
to_write <- extract_column_from_csc(column_no = 1:n_cols, dat = dat, indices = indices, ind_ptr = ind_ptr, n_rows = n_row, row_idxs = genes_to_use_idxs)
exp_mat_t[1:n_genes_in_use, (n_cells_processed + 1):(n_cells_processed + n_cols)] <- to_write
H5Fclose(h5_handle)
n_cells_processed <- n_cells_processed + n_cols
curr_batch <- str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.integer()
batch <- c(batch, rep(curr_batch, n_cols))
}
for (h5_file in h5_files) {
print(paste("Working on", h5_file))
h5_handle <- H5Fopen(h5_file)
dat <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/data"
indices <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indices"
ind_ptr <- h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/indptr"
shape <-  h5_handle$"refgenome_hg38_CROP-Guide-MS2-2.1.0/shape"
n_rows <- shape[1]
n_cols <- shape[2]
to_write <- extract_column_from_csc(column_no = 1:n_cols, dat = dat, indices = indices, ind_ptr = ind_ptr, n_rows = n_rows, row_idxs = genes_to_use_idxs)
exp_mat_t[1:n_genes_in_use, (n_cells_processed + 1):(n_cells_processed + n_cols)] <- to_write
H5Fclose(h5_handle)
n_cells_processed <- n_cells_processed + n_cols
curr_batch <- str_extract(string = h5_file, pattern = "Batch-[0-9]") %>% str_extract(pattern = "[0-9]") %>% as.integer()
batch <- c(batch, rep(curr_batch, n_cols))
}
exp_mat_t
[200:300,100:200]
exp_mat_t[200:300,100:200]
big_transpose(exp_mat_t, backingfile = paste0(processed_dir, "/expression_matrix"))
exp_mat <- big_transpose(exp_mat_t, backingfile = paste0(processed_dir, "/expression_matrix"))
exp_mat <- big_transpose(exp_mat_t, backingfile = paste0(processed_dir, "/expression_matrix"))
exp_mat
extract_column_from_csc
##############
# Bulk RNA-seq
##############
paste0(raw, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt")
##############
# Bulk RNA-seq
##############
paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt")
##############
# Bulk RNA-seq
##############
read_tsv(paste0(raw_data_dir, "/GSE129825_Libraries.FeatureCounts.ARL15_enhancer.txt"))
batch
tibble(batch = batch)
cell_covariate_matrix <- tibble(batch = batch)
cell_covariate_matrix
rinternals <- file.path(R.home("include"), "Rinternals.h")
rinternals
install.packages("inline")
