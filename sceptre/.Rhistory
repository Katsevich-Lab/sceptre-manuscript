code_dir
# Source the parameter file; file paths can be defined in terms of "offsite_dir"
param_file_rel <- if(is.na(args[3])) "/analysis_drivers_xie/sceptre_function_args.R" else args[3]
param_file_rel
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
# Source the parameter file; file paths can be defined in terms of "offsite_dir"
param_file_rel <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
code_dir
param_file_rel
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
# Source the parameter file; file paths can be defined in terms of "offsite_dir"
param_file_rel <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
code_dir
offsite_dir
param_file_rel
code_dir
offsite_dir
param_file_rel
param_file_rel
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
to_source <- paste0(code_dir, c("/analysis_drivers_xie/paths_to_dirs.R", "/utilities/verify_all_packages_available.R"))
to_source
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
# Source the parameter file; file paths can be defined in terms of "offsite_dir"
param_file_rel <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
code_Dir
code_dir
offsite_dir
param_file_rel
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[3]
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[3]
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
paste0(code_dir, param_file)
paste0(code_dir, "/",param_file)
paste0(code_dir, "/",param_file)
args <- commandArgs(trailingOnly = TRUE)
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/",param_file))
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
cell_subset <- NULL
seed <- 1234
B <- 500
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst")) %>% slice(1:10)
gRNA_gene_pairs
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
dicts <- create_and_store_dictionaries(gRNA_gene_pairs = gRNA_gene_pairs, gene_precomp_dir = gene_precomp_dir, gRNA_precomp_dir = gRNA_precomp_dir, results_dir = results_dir, pod_sizes = )
dicts <- create_and_store_dictionaries(gRNA_gene_pairs = gRNA_gene_pairs, gene_precomp_dir = gene_precomp_dir, gRNA_precomp_dir = gRNA_precomp_dir, results_dir = results_dir, pod_sizes = pod_sizes)
dicts
paste(dicts$n_pods[["gene"]], dicts$n_pods[["gRNA"]], dicts$n_pods[["pairs"]]) %>% cat
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
pod_id <- 1
pod_id
gene_precomp_dir
cell_gene_expression_matrix
ordered_gene_ids
covariate_matrix
cell_subset
select_sizes
select_sizes <- NULL
select_sizes
log_dir
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper" else args[1]
offsite_dir <- if (is.na(args[2])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[3])) "analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(paste0(code_dir, "/", param_file))
collect_results(results_dir = results_dir, save_to_disk = TRUE)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[3]
offsite_dir
param_file
# source the function arguments
source(param_file)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
# Define the code and offsite dirs
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[2]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[3]
# source the function arguments
source(param_file)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
# First, save the model covariate matrix
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
exp_mat_t
# Finally, partition the cells into exploratory and validation
set.seed(1234)
gRNA_indic_mat
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
# First, save the model covariate matrix
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
exp_mat_t
exp_mat_t@.xData
exp_mat_t$nrow
exp_mat_t$ncol
n_cells <- exp_mat_t$ncol
n_cells/2
floor(n_cells/2)
sample(x = 1:n_cells, size = floor(n_cells/2), replace = FALSE)
sample(x = 1:n_cells, size = floor(n_cells/2), replace = FALSE) %>% sort()
# Finally, partition the cells into exploratory and validation
set.seed(1234)
n_cells <- exp_mat_t$ncol
exploratory_cells <- sample(x = 1:n_cells, size = floor(n_cells/2), replace = FALSE) %>% sort()
head(exploratory_cells)
# Finally, partition the cells into exploratory and validation
set.seed(1234)
n_cells <- exp_mat_t$ncol
exploratory_cells <- sample(x = 1:n_cells, size = floor(n_cells/2), replace = FALSE) %>% sort()
head(exploratory_cells)
exploratory_cells
1:n_cells[!exploratory_cells]
1:n_cells[-exploratory_cells]
validation_cells <- 1:n_cells[-exploratory_cells]
head(validation_cells)
length(validation_cells)
validation_cells <- (1:n_cells)[-exploratory_cells]
length(validation_cells)
head(validation_cells)
exploratory_cells %>% head()
list(exploratory_cells = exploratory_cells, validation_cells = validation_cells)
saveRDS(object = list(exploratory_cells = exploratory_cells, validation_cells = validation_cells), file = paste0(processed_dir, "/cell_subsets.rds"))
readRDS(paste0(processed_dir, "/cell_subsets.rds"))
readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
7000/5
1900 * .4
19000 * .4
7000/200
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_xie/paths_to_dirs.R"))
# First, save the model covariate matrix
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
x
# First, save the model covariate matrix
exp_mat_t <- readRDS(paste0(processed_dir, "/exp_mat_t_metadata.rds")) %>% load_fbm()
exp_mat_t %>% head()
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
offsite_dir <- "/Volumes/tims_new_drive/research/sceptre_files"
source(paste0(code_dir, "/analysis_drivers_xie/sceptre_function_args.R"))
which(ordered_gene_ids == "INPP5B")
gene_id <- which(ordered_gene_ids == "INPP5B")
expressions <- cell_gene_expression_matrix[,gene_id]
head(expressions)
sum(expressions)
mean(expressions >= 1)
covariate_matrix %>% head()
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix)
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)
gene_id <- which(ordered_gene_ids == "CUL2")
expressions <- cell_gene_expression_matrix[,gene_id]
gene_id
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)
ls()
ccccccheciirrddnnchfblgkbvdnnrvivttubtfnuubt
run_gene_precomputation_at_scale
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
gene_precomp_dir
cell_subset
gene_sizes
gene_sizes
gene_sizes
# sceptre function arguments; these arguments should be defined in terms of "offsite_dir"
processed_dir <- paste0(offsite_dir, "/data/xie/processed")
gene_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gene")
gRNA_precomp_dir <- paste0(offsite_dir, "/data/xie/precomp/gRNA")
results_dir <- paste0(offsite_dir, "/results/xie")
log_dir <- paste0(offsite_dir, "/logs/xie")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gRNA_gene_pairs.fst"))
covariate_matrix <- read.fst(paste0(processed_dir, "/covariate_model_matrix.fst"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/exp_mat_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_genes.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicator_matrix.fst")
cell_subset <- readRDS(paste0(processed_dir, "/cell_subsets.rds"))[["exploratory_cells"]]
seed <- 1234
B <- 500
pod_sizes <- c(gene = 200, gRNA = 1, pair = 200)
gene_sizes <- NULL
gene_sizes
run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
3run_gene_precomputation_at_scale
run_gene_precomputation_at_scale
cell_subset
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset, ]
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
pod_id <- 19
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset, ]
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_dictionary
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
head(gene_ids)
head(gene_ids, 20)
gene_id <- "CUL2"
integer_id <- which(gene_id == ordered_gene_ids)
integer_id
expressions <- cell_gene_expression_matrix[, integer_id]
expressions
if (!is.null(cell_subset))  expressions <- expressions[cell_subset]
expressoins
expressions
curr_gene_size <- gene_sizes[[gene_id]]
curr_gene_size
expressions
length(expressions)
nrow(covariate_matrix)
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = curr_gene_size)
precomps <- map(gene_ids, function(gene_id) {
integer_id <- which(gene_id == ordered_gene_ids)
expressions <- cell_gene_expression_matrix[, integer_id]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
curr_gene_size <- gene_sizes[[gene_id]]
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = curr_gene_size)
})
run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
r <- run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
r <- run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
covariate_matrix <- covariate_matrix[cell_subset,]
which(ordered_gene_ids == "CUL2")
expressions <- cell_gene_expression_matrix[cell_subset, which(ordered_gene_ids == "CUL2") ]
expressions
run_gene_precomputation(expressions, covariate_matrix)
run_gene_precomputation(expressions, covariate_matrix, NULL)
run_gene_precomputation(expressions, covariate_matrix, NULL)
run_gene_precomputation
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
warnings()
hist(expressions)
table(expressions)
pois_fit <- glm(expressions ~ ., data = covariate_matrix,
family = poisson())
pois_fit
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values)[1]
?theta.ml
expressions
pois_fit$fitted.values
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 20)[1]
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 50)
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 50)
gene_precomp_size_out
theta.mm(expressions, pois_fit$fitted.values, limit = 50)
gene_precomp_size_out <- theta.md(expressions, pois_fit$fitted.values, limit = 50)
theta.ml(expressions, pois_fit$fitted.values, limit = 50)
.Machine$double.eps^0.25
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 50)
gene_precomp_size_out
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
gene_precomp_size_out
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
vglm(formula = expressions ~ ., data = covariate_matrix, family = negbinomial.size(Inf))
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
nb_fit <- vglm(formula = expressions ~ ., data = covariate_matrix, family = negbinomial.size(Inf))
pois_fit
nb_fit
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
gene_precomp_size_out
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 5)
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)
nb_fit <- vglm(formula = expressions ~ ., data = covariate_matrix, family = negbinomial.size(70))
nb_fit
pois_fit$df.residual
pois_fit$df.residual
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
expressions
covariate_matrix
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
pois_fit
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
gene_precomp_size_out
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
tryCatch({
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(), warning = function(w) backup_2())
backup_2 <- function() {
}
tryCatch({
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(), warning = function(w) backup_2())
backup_2 <- function() {
x <- 10
}
tryCatch({
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(), warning = function(w) backup_2())
x
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
gene_precomp_size_out
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
gene_precomp_size_out
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 50)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
gene_precomp_size_out
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
gene_precomp_size_out
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
warnings()
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 100)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size_out), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(fit_nb))
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
result
fitted_vals <- result$fitted_vals; gene_precomp_size_out <- gene_precomp_size_out
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 10)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size_out), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(fit_nb))
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
result$gene_precomp_size_out
backup_2 <- function(pois_fit) {
theta.mm(y = expressions, mu = pois_fit$fitted.values, dfr = pois_fit$df.residual)
}
backup <- function() {
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- tryCatch({
theta.ml(expressions, pois_fit$fitted.values, limit = 50)[1]
}, error = function(e) backup_2(pois_fit), warning = function(w) backup_2(pois_fit))
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size_out), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(fit_nb))
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
r <- run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
result <- tryCatch({
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
gene_precomp_size_out <- fit_nb$theta
list(fitted_vals = fitted_vals, gene_precomp_size_out = gene_precomp_size_out)
}, error = function(e) backup(), warning = function(w) backup())
res <- tryCatch({
x <- 10
})
x
x <- res$x
res <- tryCatch({
x <- 10
})
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
suppressPackageStartupMessages(library(sceptre))
offsite_dir <- if (is.na(args[1])) "/Volumes/tims_new_drive/research/sceptre_files" else args[1]
param_file <- if(is.na(args[2])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/analysis_drivers_xie/sceptre_function_args.R" else args[2]
source(param_file)
r <- run_gene_precomputation_at_scale(pod_id = 19, gene_precomp_dir = gene_precomp_dir, cell_gene_expression_matrix = cell_gene_expression_matrix, ordered_gene_ids = ordered_gene_ids, covariate_matrix = covariate_matrix, cell_subset = cell_subset, log_dir = NULL, gene_sizes = gene_sizes)
r
library(sceptre)
