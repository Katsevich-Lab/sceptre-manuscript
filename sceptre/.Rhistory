abline(a = 0, b = 1, col = "red")
punif
punif(0.4)
ks.test(x = res, y = punif)
?ks.test
res
mean(res < 0.05)
mean(res <= 0.05)
# simulate data
saveRDS(res)
# simulate data
saveRDS(res, "null_p_vals.rds")
# simulate data
qqplot(runif(1000), res)
# simulate data
qqplot(res, runif(1000))
# simulate data
qqplot(res, runif(1000), pch = 19)
# simulate data
qqplot(res, runif(1000), pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "red")
?qqplot
# simulate data
qqplot(res, runif(1000), pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "red")
hist(res)
res
hist(res, main = "p-values under null")
hist(res, main = "p-values under null", xlab = "")
# simulate data
qqplot(res, runif(1000), pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "red")
ks.test(res, punif)
library(stringr, quietly = TRUE)
args
args <- commandArgs(trailingOnly = TRUE)
base_directory <- args[1]
data_directory <- args[1]
data_directory
data_directory <- "/Volumes/tims_new_drive/work/sceptre_data"
data_res_directory <- "/Volumes/tims_new_drive/work/sceptre_data"
data_res_directory
data_res_sub_directories <- c("data", "data/raw", "data/raw/CRISPR", "data/raw/ChIP-seq",
"data/raw/HIC", "data/raw/GeneHancer", "data/processed", "precomp",
"results", "results/pvalues", "results/resampled_zvalues",
"figures")
data_res_sub_directories
data_res_directory
paste0(data_res_directory, c("/logs", "/data"))
data_res_directory
paste0(data_res_directory, c("/logs", "/data"))
paste0(data_res_directory, c("/logs", "/data", "/results"))
paste0(data_res_directory, c("/logs", "/data", "/results", "/precomp"))
paste0(data_res_directory, c("/logs", "/data", "/results", "/precomp"))
sub_dirs <- paste0(data_res_directory, c("/logs", "/data", "/results", "/precomp"))
sub_dirs
c(paste0("logs"), "hi" )
sub_dirs <- paste0(data_res_directory, c("/logs",
"/data",
"/results",
"/precomp"))
sub_dirs
data_res_directory
paste0("logs", c("hi", "me"))
paste0("logs", c("/hi", "/me"))
paste0("logs", c("/hi", "/me", ""))
paste0("logs", c("", "/hi", "/me"))
sub_dirs <- paste0(data_res_directory, c(paste0("logs", c("", "/hi", "/me")),
"/data",
"/results",
"/precomp"))
sub_dirs
sub_dirs <- paste0(data_res_directory, c(paste0("/logs", c("", "/hi", "/me")),
"/data",
"/results",
"/precomp"))
sub_dirs
c(paste0("/logs", c("", "/Gasperini", "/Xie")),
paste0("/data", c("", "/Gasperini", "/Xie"),
"/results",
"/precomp"))
sub_dirs <- paste0(data_res_directory, c(paste0("/logs", c("", "/Gasperini", "/Xie")),
paste0("/data", c("", "/Gasperini", "/Xie")),
"/results",
"/precomp")
)
sub_dirs
library(sceptre)
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, seed = 1234)
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, seed = 1234)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
set.seed(1)
rnorm(1)
rnorm(1)
set.seed(1)
rnorm(1)
rnorm(1)
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
head(df)
head(random_pair_results)
head(size)
# set the expression vector, gRNA indicator vector, and covariate matrix.
expressions <- df$gene_exp
head(df)
gRNA_indicators <- df$grna_group_indicator
summarize(df, percent.mito = percent.mito)
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = factor(prep_batch), total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
head(covariate_matrix)
covariate_matrix$prep_batch
head(covariate_matrix)
head(expressions)
head(gRNA_indicators)
p <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
p
random_pair_results
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
expressions
gRNA_indicators
covariate_matrix
gRNA_precomp
gRNA_precomp <- NULL
gene_precomp_size M- 2
gene_precomp_size <- 2
gene_precomp_offsets
ene_precomp_offsets = NULL
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gRNA_precomp
gene_precomp_size
gene_precomp_offsets
is.null(gene_precomp_size) || is.null(gene_precomp_offsets)
head(expressions)
covariate_matrix
gene_precomp_size
gene_precomp_offsets
gene_precomp_offsets <- NULL
expressions
covariate_matrix
gene_precomp_size
gene_precomp_offsets
gene_precomp_size
gene_precomp_offsets
fit_model_gene <- glm.nb(expressions ~ ., data = covariate_matrix)
fit_model_gene
gene_precomp_size
gene_precomp_size
is.null(gene_precomp_size)
is.null(gene_precomp_size)
!is.null(gene_precomp_size)
gene_precomp_size
expressions
negbinomial.size(gene_precomp_size)
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size), data = covariate_matrix)
fit_nb
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size), data = covariate_matrix)
fit_nb <- glm.nb(formula = eexpressions ~ ., data = covariate_matrix)
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fit_nb
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size), data = covariate_matrix)
fit_nb
fit_nb$fitted.values
fittedvlm(nb_fit)
fittedvlm(nb_fit)
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fit_nb$fitted.values
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size), data = covariate_matrix)
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fit_nb$fitted.values
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size), data = covariate_matrix)
fitted_vals <- fittedvlm(fit_nb)
fitted_vals
as.numeric(fittedvlm(fit_nb))
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
fitted_vals
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(fit_nb))
fitted_vals
fit_nb <- glm.nb(formula = expressions ~ ., data = covariate_matrix)
fitted_vals <- as.numeric(fit_nb$fitted.values)
fit_nb$theta
gene_precomp_size_out <- fit_nb$theta
gene_precomp_offsets
is.null(gene_precomp_offsets)
is.null(gene_precomp_offsets)
gene_precomp_offsets
gene_precomp_offsets_out <- log(fitted_vals)
gene_precomp_offsets_out
is.null(gene_precomp_size)
is.null(gene_precomp_size) || is.null(gene_precomp_offsets)
pois_fit
pois_fit <- glm(expressions ~ ., data = covariate_matrix, family = poisson())
gene_precomp_size_out <- theta.ml(expressions, pois_fit$fitted.values)[1]
gene_precomp_size_out
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size_out), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(nb_fit))
fitted_vals <- as.numeric(fittedvlm(fit_nb))
fitted_vals
out <- list(gene_precomp_offsets = gene_precomp_offsets_out, gene_precomp_size = gene_precomp_offsets_out)
out
library(sceptre)
?run_gene_precomputation
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
covariate_matrix <- sim_dat$covariate_df
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix)
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, 2, NULL)
gene_precomp
gene_precomp
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, 2, NULL)
gene_precomp$gene_precomp_size
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
covariate_matrix <- sim_dat$covariate_df
library(sceptre)
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix)
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, 2, NULL)
library(sceptre)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
covariate_matrix <- sim_dat$covariate_df
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, 2, NULL)
gene_precomp$gene_precomp_offsets
gene_precomp$sgene_precomp_size
gene_precomp$gene_precomp_size
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, NULL, NULL)
gene_precomp$gene_precomp_size
gene_precomp$gene_precomp_offsets
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, NULL, gene_precomp$gene_precomp_offsets)
gene_precomp$gene_precomp_offsets
o <- gene_precomp$gene_precomp_offsets
o
run_gene_precomputation(expressions, covariate_matrix, 2, o)
run_gene_precomputation(expressions, covariate_matrix, NULL, o)
library(sceptre)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
covariate_matrix <- sim_dat$covariate_df
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, 2 NULL)
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, 2, NULL)
gene_precomp$gene_precomp_offsets
gene_precomp$gene_precomp_size
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, NULL, gene_precomp$gene_precomp_offsets)
gene_precomp$gene_precomp_size
gene_precomp$gene_precomp_offsets
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, NULL, NULL)
gene_precomp$gene_precomp_offsets
gene_precomp$gene_precomp_size
library(sceptre)
library(sceptre)
library(sceptre)
?run_gene_precomputation
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
covariate_matrix <- sim_dat$covariate_df
gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, NULL, NULL)
gene_precomp$gene_precomp_offsets
gene_precomp$gene_precomp_dispersion
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
library(sceptre)
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = -4,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
gRNA_precomp = NULL; gene_precomp_dispersion = NULL; gene_precomp_offsets = NULL; B = 500; seed = NULL
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gRNA_precomp
if (is.null(gene_precomp_dispersion) || is.null(gene_precomp_offsets)) gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, gene_precomp_dispersion, gene_precomp_offsets)
gene_precomp
library(sceptre)
?run_sceptre_gRNA_gene_pair
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
if (!is.null(seed)) set.seed(seed)
seed <- 1234
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators == 1])
expressions = expressions; gRNA_indicators = gRNA_indicators; gRNA_precomp = gRNA_precomp; gene_precomp_dispersion = gene_precomp$gene_precomp_dispersion; gene_precomp_offsets = gene_precomp$gene_precomp_offsets; B = B; seed = seed
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
gRNA_precomp = NULL; gene_precomp_dispersion = NULL; gene_precomp_offsets = NULL; B = 500; seed = NULL
if (is.null(gRNA_precomp)) gRNA_precomp <- run_gRNA_precomputation(gRNA_indicators, covariate_matrix)
if (is.null(gene_precomp_dispersion) || is.null(gene_precomp_offsets)) gene_precomp <- run_gene_precomputation(expressions, covariate_matrix, gene_precomp_dispersion, gene_precomp_offsets)
expressions = expressions; gRNA_indicators = gRNA_indicators; gRNA_precomp = gRNA_precomp; gene_precomp_dispersion = gene_precomp$gene_precomp_dispersion; gene_precomp_offsets = gene_precomp$gene_precomp_offsets; B = B; seed = seed
if (!is.null(seed)) set.seed(seed)
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators == 1])
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
t_star
# resample B times
t_nulls <- sapply(1:B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", B, "\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_dispersion), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]
})
# Fit a skew-t distribution and obtain a p-value
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
library(sceptre)
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
# set the expression vector, gRNA indicator vector, and covariate matrix.
expressions <- df$gene_exp
gRNA_indicators <- df$grna_group_indicator
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = factor(prep_batch), total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
expressions
gRNA_indicators
covariate_matrix
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
expressions <- df$gene_exp
gRNA_indicators <- df$grna_group_indicator
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = factor(prep_batch), total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
p <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = size, seed = 1234)
p
random_pair_results
random_pair_results$corrected_pvalue_st
p <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = NULL, seed = 1234)
p
library(sceptre)
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
# set the expression vector, gRNA indicator vector, and covariate matrix.
expressions <- df$gene_exp
# reproduce result
# The goal of this analysis is to reproduce the result obtained by Gene on a random gRNA-gene pair.
require(sceptre)
load("/Users/timbarry/Box/SCEPTRE/sceptre_paper/drivers_simple/single_pair.Rda")
sim_dat <- simulate_crispr_screen_data(num_cells = 1000,
grna_mean_prob = 0.2,
covariate_sampler = list(cell_size = rnorm, cell_cycle = runif),
mRNA_mean_expression = 40,
gRNA_effect = 0,
covariate_effects = c(0.5, 1),
zero_inflation = 0,
neg_binom_size = 2)
expressions <- sim_dat$Y
gRNA_indicators <- sim_dat$X
covariate_matrix <-sim_dat$covariate_df
run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix)
# set the expression vector, gRNA indicator vector, and covariate matrix.
expressions <- df$gene_exp
gRNA_indicators <- df$grna_group_indicator
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = factor(prep_batch), total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
p <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = NULL, seed = 1234)
p
result  <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = size, seed = 1234)
result
random_pair_results
# check that the results match
abs(result$p_value_raw - random_pair_results$corrected_pvalue_raw)
abs(result$p_value_skew_t - random_pair_results$corrected_pvalue_st)
abs(result$z_value_star - random_pair_results$original_zvalue)
# check that the results match
abs(result$p_value_raw - random_pair_results$corrected_pvalue_raw) < 1e-5
abs(result$p_value_skew_t - random_pair_results$corrected_pvalue_st) < 1e-5
abs(result$z_value_star - random_pair_results$original_zvalue) < 1e-5
1e-5
0.000001
0.00001
covariate_matrix <- summarize(df, percent.mito = percent.mito, prep_batch = prep_batch, total_umis = log(total_umis), guide_count = log(guide_count), gene_count = log(gene_count))
result <- run_sceptre_gRNA_gene_pair(expressions = expressions, gRNA_indicators = gRNA_indicators, covariate_matrix = covariate_matrix, gene_precomp_dispersion = size, seed = 1234)
result
# check that the results match
abs(result$p_value_raw - random_pair_results$corrected_pvalue_raw) < 1e-5
abs(result$p_value_skew_t - random_pair_results$corrected_pvalue_st) < 1e-5
abs(result$z_value_star - random_pair_results$original_zvalue) < 1e-5
result$p_value_raw - random_pair_results$corrected_pvalue_raw
result$p_value_skew_t - random_pair_results$corrected_pvalue_st
result$z_value_star - random_pair_results$original_zvalue
