x <- file.remove(list.files(direct, full.names = TRUE))
}
results_dir
file_names <- list.files(results_dir)
file_names
grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE)
to_load <- c(grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE), "results_dictionary.fst")
to_load
file_names <- list.files(results_dir)
to_delete <- c(grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE), "results_dictionary.fst")
to_delete
file
file <- to_delete[1]
full_file <- paste0(results_dir, "/", file)
full_file
file_names <- list.files(results_dir)
to_delete <- c(grep(pattern = 'result_[0-9]+.fst', x = file_names, value = TRUE), "results_dictionary.fst")
for (file in to_delete) {
full_file <- paste0(results_dir, "/", file)
if (file.exists(full_file)) file.remove(full_file)
}
# run gene precomputation at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
select_sizes
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/comparison_to_gene/sceptre_package_known_sizes.fst"))
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
gene_mod
"/Users/timbarry/Box/SCEPTRE/sceptre_paper/"
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
tim_known_size <- read.fst(paste0(offsite_dir, "/results/comparison_to_gene/sceptre_package_known_sizes.fst"))
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
l <- list(tim_known_size, gene_mod)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
})
comparision_df
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results.fst"))
tim_known_size
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
l <- list(tim_known_size, gene_mod)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
})
comparision_df
###################################################
# Investigate gene ENSG00000102981 and scrambled_21
###################################################
gene_id <- "ENSG00000102981"; gRNA_id <- "scrambled_21"
gene_id_int <- which(ordered_gene_ids == gene_id)
gene_id
gene_id_int
expressions <- cell_gene_expression_matrix[, gene_id_int]
expressions %>% head()
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = "scrambled_21") %>% pull() %>% as.integer()
gRNA_indic
# subset!
expressions <- expressions[cell_subset]; gRNA_indic <- gRNA_indic[cell_subset]; covariate_matrix <- covariate_matrix[cell_subset, ]
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[["ENSG00000102981"]])
gRNA_precomp_true <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
p <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp, gene_precomp_size = gene_precomp_true$gene_precomp_size, gene_precomp_offsets = gene_precomp_true$gene_precomp_offsets, B = 500, seed = 1234)
p <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp_true, gene_precomp_size = gene_precomp_true$gene_precomp_size, gene_precomp_offsets = gene_precomp_true$gene_precomp_offsets, B = 500, seed = 1234)
p
comparision_df
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gene_dict
gene_dict <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
gRNA_dict <- read.fst(paste0(gRNA_precomp_dir, "/gRNA_dictionary.fst"))
filter(gene_dict, id == gene_id)
filter(gene_dict, id == gene_id) %>% pull(offset_file)
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character()
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst()
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst() %>% pull(gene_id)
offsets <- filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst() %>% pull(gene_id)
head(offsets)
gene_precomp_true$gene_precomp_offsets %>% head(?)
gene_precomp_true$gene_precomp_offsets %>% head()
gene_precomp_true
gene_precomp_true$gene_precomp_size
gene_id
filter(gene_dict, id == gene_id) %>% pull(offset_file)
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character()
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst() %>% pull(gene_id)
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst() %>% pull(gene_id) %>% head()
filter(gene_dict, id == gene_id) %>% pull(offset_file) %>% as.character() %>% read.fst(columns = gene_id) %>% head()
filter(gene_dict, id == gene_id)
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character()
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS() %>% pull(gene_id)
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS()
size <- (filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS())[[gene_id]]
size
filter(gRNA_dict, id == gene_id)
gRNA_dict
filter(gRNA_dict, id == gRNA_id)
filter(gRNA_dict, id == gRNA_id) %>% pull(precomp_file) %>% as.character()
gRNA_precomp <- filter(gRNA_dict, id == gRNA_id) %>% pull(precomp_file) %>% as.character() %>% read.fst() %>% pull(gRNA_id)
head(gRNA_precomp)
head(offsets)
head(size)
gene_precomp_true$gene_precomp_offsets %>% head()
gene_precomp_true$size %>% head()
gene_precomp_true$size
gene_precomp_true$gene_precomp_size
gRNA_precomp_true %>% head()
gRNA_precomp %>% head()
gene_precomp_true$gene_precomp_offsets %>% head()
offsets %>% head()
size
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)
gene_precomp_true$gene_precomp_size
gene_precomp_true$gene_precomp_offsets
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[[gRNA_id]])
select_sizes
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[[gene_id]])
gRNA_precomp_true <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
p <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp_true, gene_precomp_size = gene_precomp_true$gene_precomp_size, gene_precomp_offsets = gene_precomp_true$gene_precomp_offsets, B = 500, seed = 1234)
p
comparision_df
gene_precomp_true$gene_precomp_offsets $>$ head
gene_precomp_true$gene_precomp_offsets %>% head
head(offsets)
gRNA_precomp <- filter(gRNA_dict, id == gRNA_id) %>% pull(precomp_file) %>% as.character() %>% read.fst() %>% pull(gRNA_id)
gRNA_precomp %>% head()
head(gRNA_precomp_true)
gRNA_precomp_true == gRNA_precomp
all(gRNA_precomp_true == gRNA_precomp)
size <- (filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS())[[gene_id]]
size
gene_dict
filter(gene_dict, id == gene_id)
filter(gene_dict, id == gene_id) %>% pull(size_file)
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character()
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS())
filter(gene_dict, id == gene_id) %>% pull(size_file) %>% as.character() %>% readRDS()
slice(gene_dict, 1) %>% pull(size_file) %>% as.character() %>% readRDS()
slice(gene_dict, 2) %>% pull(size_file) %>% as.character() %>% readRDS()
slice(gene_dict, 4) %>% pull(size_file) %>% as.character() %>% readRDS()
# run gene precomputation at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
select_sizes
cell_subset
pod_id <- 2
pod_id
gene_precomp_dir
cell_gene_expression_matrix
ordered_gene_ids
head(covariate_matrix)
cell_subset
log_dir
gene_sizes
gene_sizes = select_sizes
# subset covariate matrix by rows
if (!is.null(cell_subset)) covariate_matrix <- covariate_matrix[cell_subset,]
read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst"))
read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
integer_ids <- sapply(gene_ids, function(i) which(i == ordered_gene_ids)) %>% as.integer()
gene_dictionary <- read.fst(paste0(gene_precomp_dir, "/gene_dictionary.fst")) %>% filter(pod_id == !!pod_id)
gene_ids <- gene_dictionary %>% pull(id) %>% as.character()
integer_ids <- sapply(gene_ids, function(i) which(i == ordered_gene_ids)) %>% as.integer()
gene_dictionary
gene_ids
integer_ids
gene_sizes
gene_ids
gene_id <- gene_ids[1]
gene_id
cat(paste0("Running precomputation for gene ", gene_id, ".\n"))
ordered_gene_ids
integer_id <- which(gene_id == ordered_gene_ids)
integer_id
gene_ids
expressions <- cell_gene_expression_matrix[,integer_id]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
gene_sizes[[gene_id]]
curr_gene_size <- gene_sizes[[gene_id]]
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = curr_gene_size)
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = NULL)
gene_ids
head(precomps)
gene_sizes
NULL[[gene_id]]
gene_sizes
curr_gene_size <- gene_sizes[[gene_id]]
precomps <- map(gene_ids, function(gene_id) {
cat(paste0("Running precomputation for gene ", gene_id, ".\n"))
integer_id <- which(gene_id == ordered_gene_ids)
expressions <- cell_gene_expression_matrix[,integer_id]
if (!is.null(cell_subset)) expressions <- expressions[cell_subset]
curr_gene_size <- gene_sizes[[gene_id]]
run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = curr_gene_size)
})
head(precomps)
names(precomps)
names(precomps) <- gene_ids
out_offsets <- map_dfc(precomps, function(l) l$gene_precomp_offsets)
out_sizes <- map_dbl(precomps, function(l) l$gene_precomp_size)
out_sizes
gene_sizes
# save the precomputations
offset_save_fp <- (gene_dictionary %>% pull(offset_file))[1] %>% as.character()
size_save_fp <- (gene_dictionary %>% pull(size_file))[1] %>% as.character()
offset_save_fp
size_save_fp
library(sceptre)
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results.fst"))
tim_known_size
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
l <- list(tim_known_size, gene_mod)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
})
comparision_df
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
gene_id_int <- which(ordered_gene_ids == gene_id)
###################################################
# Investigate gene ENSG00000102981 and scrambled_21
###################################################
gene_id <- "ENSG00000166295"; gRNA_id <- "chr10.2548_second_two"
gene_id_int <- which(ordered_gene_ids == gene_id)
gene_id_int
expressions <- cell_gene_expression_matrix[, gene_id_int]
expressions
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = "scrambled_21") %>% pull() %>% as.integer()
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
###################################################
# Investigate gene ENSG00000102981 and scrambled_21
###################################################
gene_id <- "ENSG00000166295"; gRNA_id <- "chr10.2548_second_two"
gene_id_int <- which(ordered_gene_ids == gene_id)
expressions <- cell_gene_expression_matrix[, gene_id_int]
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull() %>% as.integer()
expressions <- expressions[cell_subset]; gRNA_indic <- gRNA_indic[cell_subset]; covariate_matrix <- covariate_matrix[cell_subset, ]
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[[gene_id]])
gene_precomp_true
select_sizes[[gene_id]]
gRNA_precomp_true <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
gRNA_precomp_true
p <- run_sceptre_using_precomp(expressions = expressions, gRNA_indicators = gRNA_indic, gRNA_precomp = gRNA_precomp_true, gene_precomp_size = gene_precomp_true$gene_precomp_size, gene_precomp_offsets = gene_precomp_true$gene_precomp_offsets, B = 500, seed = 1234)
p
gene_mod
gene_id <- "ENSG00000166295"; gRNA_id <- "chr10.2548_second_two"
gene_id_int <- which(ordered_gene_ids == gene_id)
expressions <- cell_gene_expression_matrix[, gene_id_int]
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull() %>% as.integer()
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
###################################################
# Investigate gene ENSG00000102981 and scrambled_21
###################################################
gene_id <- "ENSG00000166295"; gRNA_id <- "chr10.2548_second_two"
gene_id_int <- which(ordered_gene_ids == gene_id)
expressions <- cell_gene_expression_matrix[, gene_id_int]
gRNA_indic <- read.fst(gRNA_indicator_matrix_fp, columns = gRNA_id) %>% pull() %>% as.integer()
expressions <- expressions[cell_subset]; gRNA_indic <- gRNA_indic[cell_subset]; covariate_matrix <- covariate_matrix[cell_subset, ]
gene_precomp_true <- run_gene_precomputation(expressions = expressions, covariate_matrix = covariate_matrix, gene_precomp_size = select_sizes[[gene_id]])
gRNA_precomp_true <- run_gRNA_precomputation(gRNA_indicators = gRNA_indic, covariate_matrix = covariate_matrix)
run_sceptre_using_precomp
expressions
covariate_matrix
gene_precomp_size
gene_precomp_size = select_sizes[[gene_id]]
gene_precomp_size
covariate_matrix
expressions
gene_precomp_size
gene_precomp_size_out <- gene_precomp_size
fit_nb <- vglm(formula = expressions ~ ., family = negbinomial.size(gene_precomp_size_out), data = covariate_matrix)
fitted_vals <- as.numeric(fittedvlm(fit_nb))
gene_precomp_offsets_out <- log(fitted_vals)
gene_precomp_offsets_out
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
gRNA_indicators = gRNA_indic
fit_model_grna <- glm(gRNA_indicators ~ ., family = binomial(), data = covariate_matrix)
out <- as.numeric(fitted(fit_model_grna))
if (!is.null(seed)) set.seed(seed)
seed <- 1234
if (!is.null(seed)) set.seed(seed)
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators == 1])
expressions = expressions; gRNA_indicators = gRNA_indic; gRNA_precomp = gRNA_precomp_true; gene_precomp_size = gene_precomp_true$gene_precomp_size; gene_precomp_offsets = gene_precomp_true$gene_precomp_offsets; B = 500; seed = 1234
# compute the test statistic on the real data
fit_star <- vglm(formula = expressions[gRNA_indicators == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators == 1])
fit_star
t_star <- summaryvglm(fit_star)@coef3["(Intercept)", "z value"]
t_star
t_nulls <- sapply(1:B, function(i) {
if (i %% 100 == 0) cat(paste0("Running resample ", i ,"/", B, ".\n"))
gRNA_indicators_null <- rbinom(n = length(gRNA_precomp), size = 1, prob = gRNA_precomp)
tryCatch({
fit_null <- vglm(formula = expressions[gRNA_indicators_null == 1] ~ 1, family = negbinomial.size(gene_precomp_size), offset = gene_precomp_offsets[gRNA_indicators_null == 1])
summaryvglm(fit_null)@coef3["(Intercept)", "z value"]},
error = function(e) return(NA),
warning = function(w) return(NA)
)
})
t_nulls
length(t_nulls)
t_nulls <- t_nulls[!is.na(t_nulls)]
length(t_nulls)
# Fit a skew-t distribution and obtain a p-value
p_value_skew_t <- NA
p_value_skew_t
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
skew_t_fit
skew_t_fit <- tryCatch(selm(t_nulls ~ 1, family = "ST"), error = function(e) return(NA), warning = function(w) return(NA))
skew_t_fit
selm(t_nulls ~ 1, family = "ST")
skew_t_fit
p_value_raw <- mean(c(-Inf, t_nulls) <= t_star)
p_value_raw
covariate_matrix <- read.fst(paste0(processed_dir, "/cell_covariate_model_matrix.fst"))
cell_subset <- readRDS(paste0(processed_dir, "/cells_to_keep.rds"))
cell_gene_expression_matrix <- readRDS(paste0(processed_dir, "/expression_FBM_metadata.rds")) %>% load_fbm
ordered_gene_ids <- readRDS(paste0(processed_dir, "/ordered_gene_ids.RDS"))
gRNA_indicator_matrix_fp <- paste0(processed_dir, "/gRNA_indicators.fst")
gRNA_gene_pairs <- read.fst(paste0(processed_dir, "/gene_gRNA_pairs_to_study.fst"))
nrow(gRNA_gene_pairs)
sample(x = 1:629515, size = 20, replace = F)
# run gene precomputation at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
select_sizes
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results.fst"))
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results_size_known.fst.fst"))
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results_size_known.fst"))
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
l <- list(tim_known_size, gene_mod)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
})
comparision_df
tim_unknown_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results_size_unknown.fst"))
# Run pair analysis at scale
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers/file_paths_to_dirs.R"))
source(paste0(code_dir, "/analysis_drivers/sceptre_function_args.R"))
#################
# Compare to Gene
#################
tim_known_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results_size_known.fst"))
tim_unknown_size <- read.fst(paste0(offsite_dir, "/results/gasperini/all_results_size_unknown.fst"))
tim_unknown_size
gene <- read_tsv(paste0(offsite_dir, "/results/comparison_to_gene/resampling_results.tsv"))
gene_mod <- gene %>% filter(method == "conditional_randomization") %>% select(gene_id, grna_group, corrected_pvalue_st) %>% rename(gRNA_id = grna_group, p_value = corrected_pvalue_st)
rm(gene)
l <- list(tim_known_size, gene_mod)
l
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
})
comparision_df
l <- list(tim_known_size, gene_mod, tim_unknown_size)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
})
comparision_df
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
}) %>% rename(p_value.x = tim_known_size, p_value.y = Gene, p_value = tim_unknown_size)
comparision_df <- reduce(.x = l, .f = function(x, y) {
left_join(x = x, y = y, by = c("gene_id", "gRNA_id"))
}) %>% rename(tim_known_size = p_value.x, Gene = p_value.y, tim_unknown_size = p_value)
comparision_df
saveRDS(object = comparision_df, file = paste0(offsite_dir, "/results/comparison_of_p_vals.rds"))
all_dispersions <- read.fst(paste0(processed_dir, "/disp_table.fst"))
all_dispersions
gRNA_gene_pairs$gene_id
select_dispersions <- sapply(X = gRNA_gene_pairs$gene_id, FUN = function(id) {
filter(all_dispersions, gene_id == as.character(id)) %>% pull(disp)
})
select_dispersions
select_sizes <- 1/select_dispersions
names(select_sizes) <- gRNA_gene_pairs$gene_id
select_sizes
source <- paste0("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file", ".gz")
raw_data_dir_xie <- "/Volumes/tims_new_drive/research/sceptre_files/data/Xie/raw"
source <- paste0("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file", ".gz")
raw_data_dir_xie <- "/Volumes/tims_new_drive/research/sceptre_files/data/Xie/raw"
dest <- paste0(raw_data_dir_gasp, "/", filename, ".gz")
raw_data_dir_xie <- "/Volumes/tims_new_drive/research/sceptre_files/data/Xie/raw"
source <- paste0("https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file", ".gz")
dest <- paste0(raw_data_dir_xie, "/", xie_all, ".gz")
dest <- paste0(raw_data_dir_xie, "/xie_all.gz")
dest
source <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file.gz"
dest <- paste0(raw_data_dir_xie, "/xie_all.gz")
source
dest
download.file(source, dest)
source <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file.tar"
dest <- paste0(raw_data_dir_xie, "/xie_all.tar")
download.file(source, dest)
source <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file=GSE129837_RAW.tar"
dest <- paste0(raw_data_dir_xie, "/xie_all.tar")
download.file(source, dest)
source <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file=GSE129837_RAW"
source <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file=GSE129837_RAW"
dest <- paste0(raw_data_dir_xie, "/xie_all.tar")
download.file(source, dest)
https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file
source <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE129837&format=file=GSE129837_RAW.tar"
dest <- paste0(raw_data_dir_xie, "/xie_all.tar")
download.file(source, dest)
dest
library(sceptre)
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
source(paste0(code_dir, "/analysis_drivers_gasp/file_paths_to_dirs.R"))
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
args <- commandArgs(trailingOnly = TRUE)
code_dir <- if (is.na(args[1])) "/Users/timbarry/Box/SCEPTRE/sceptre_paper/" else args[1]
packages <- c("purrr", "stringr")
for (package in packages) suppressPackageStartupMessages(library(package, character.only = TRUE))
sub_dirs <- c(create_parent_directories("data/xie/raw"), create_parent_directories("data/xie/precomp/gRNA"), "data/xie/precomp/gene", "data/xie/processed",
create_parent_directories("results/xie"), create_parent_directories("logs/xie")) %>% unique()
sub_dirs
create_parent_directories <- function(s) {
s_split <- str_split(string = s, pattern = "/")[[1]]
unlist(map(1:length(s_split), function(i) paste0(s_split[1:i], collapse = "/")))
}
sub_dirs <- c(create_parent_directories("data/xie/raw"), create_parent_directories("data/xie/precomp/gRNA"), "data/xie/precomp/gene", "data/xie/processed",
create_parent_directories("results/xie"), create_parent_directories("logs/xie")) %>% unique()
dirs_to_create <- paste0(offsite_dir, "/", sub_dirs)
for (directory in dirs_to_create) {
if (!dir.exists(directory)) {
dir.create(directory)
}
}
create_parent_directories <- function(s) {
s_split <- str_split(string = s, pattern = "/")[[1]]
unlist(map(1:length(s_split), function(i) paste0(s_split[1:i], collapse = "/")))
}
sub_dirs <- c(create_parent_directories("data/xie/raw"), create_parent_directories("data/xie/precomp/gRNA"), "data/xie/precomp/gene", "data/xie/processed",
create_parent_directories("results/xie"), create_parent_directories("logs/xie")) %>% unique()
dirs_to_create <- paste0(offsite_dir, "/", sub_dirs)
for (directory in dirs_to_create) {
if (!dir.exists(directory)) {
dir.create(directory)
}
}
